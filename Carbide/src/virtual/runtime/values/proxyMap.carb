class Carbide.Virtual.Values.ProxyMap inherits Carbide.Virtual.Value {
	bound public override string type = "map";
	bound public override map value = new map();

	bound public override <void>function setValue(map raw) {
		this.value = raw["value"];
	}

	bound public override <bool>function compare(map raw) {
		if (this.value == raw["value"]) {
			return true;
		}else{
			return false;
		}
	}

	fixed public override <Carbide.Virtual.Values.ProxyMap>function create(map val) {
		var map m = new map();
		var Carbide.Virtual.Values.ProxyMap value = new Carbide.Virtual.Values.ProxyMap(m);
		value.value = val;
		return value;
	}

	bound public override <void>function iterate(Carbide.Virtual.Variable vKey, Carbide.Virtual.Variable v, Carbide.Virtual.Block code, Carbide.Virtual.Scope scope) {
		for (var string key in this.value) {
			var Carbide.Virtual.Values.String cast = vKey.value;
			cast.value = key; //Warn
			v.value = Carbide.Virtual.Value.primitiveToValue(this.value[key]);
			code.run(scope);
		}
	}

	bound public override <Carbide.Virtual.Value>function property(string name, Carbide.Virtual.Scope scope) {
		if (name in this.value) {
			var Carbide.Virtual.Value rtn = Carbide.Virtual.Value.primitiveToValue(this.value[name]);
			return rtn;
		}
		return Carbide.Virtual.Values.Null.create();
	}

	bound public override <Carbide.Virtual.Value>function method(string name, <Carbide.Virtual.Value>array input, Carbide.Virtual.Scope scope) {
		if (name == "set") {
			var Carbide.Virtual.Values.String key = input[0];
			var Carbide.Virtual.Value ind = input[1];
			this.value[key.value] = ind.value; //TODO: Replace with value casted to its Carbide.Virtual.Value.type
		}else if (name == "index") {
			var Carbide.Virtual.Value ind = input[0];
			var Carbide.Virtual.Value found = Carbide.Virtual.Value.primitiveToValue(this.value[ind.value]);
			return found;
		}
		return Carbide.Virtual.Values.Null.create();
	}

	bound public override <Carbide.Virtual.Value>function dotSet(string prop, Carbide.Virtual.Value value,  Carbide.Virtual.Scope scope) {
		var Carbide.Virtual.Value v = empty;
		this.value[prop] = value.value; //TODO: Same as method "set" above
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}