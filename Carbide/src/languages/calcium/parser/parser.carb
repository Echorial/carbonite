class CarbideCalciumParserLocation {
bound public int offset = 0;
bound public int line = 1;
bound public int column = 0;
fixed public <CarbideCalciumParserLocation>function @construct(int offset, int line, int column) {
this.offset = offset; this.line = line; this.column = column;
}
}

class CarbideCalciumParserError inherits CarbideCalciumParserLocation {
bound public int code = 0;
bound public string found = 0;
bound public string expected = 0;
bound public int vested = 0;
bound public <CarbideCalciumParserError>array path = new <CarbideCalciumParserError>array();
bound public <CarbideCalciumParserError>function clone() {var CarbideCalciumParserError clone = new CarbideCalciumParserError(this.offset, this.line, this.column); clone.code = this.code; clone.found = this.found; clone.expected = this.expected; clone.vested = this.vested; for (var int i in this.path) {var CarbideCalciumParserError current = this.path[i]; clone.path.push(current.clone());} return clone;}}

class <class T>CarbideCalciumParserOutput {
	fixed public <<T>CarbideCalciumParserOutput>function @construct(bool hadError, CarbideCalciumParserError error, map data) {this.hadError = hadError; this.error = error; this.data = data;}
	bound public CarbideCalciumParserError error = empty;
	bound public bool hadError = false;
	bound public map data = new map();
}
class CarbideCalciumParser inherits CarbideCalciumParserLocation {
fixed public override <CarbideCalciumParser>function @construct() {}
fixed public <<map>CarbideCalciumParserOutput>function parse(string input) {	var <map>CarbideCalciumParser parser = new <map>CarbideCalciumParser();
	var map output = parser.start(input);
	if (parser.hadError and (parser.error.found == string.fromCharCode(0001))) {
		parser.error.found = "End of input";
}
	var <map>CarbideCalciumParserOutput rtn = new <map>CarbideCalciumParserOutput(parser.hadError, parser.error, parser.data["data"]);
	return rtn;
}
bound public <CarbideCalciumParserError>array lastErrors = new <CarbideCalciumParserError>array();
bound public bool hadError = false;
bound public int parsedChars = 0;
bound public string currentInput = new string();
bound public map data = new map();
bound public CarbideCalciumParserError error = new CarbideCalciumParserError(0, 0, 0);
bound public <string>function assembleCodes(<int>array codes) {
	var string rtn = new string();
	for (var int i in codes) {
		rtn += string.fromCharCode(codes[i]);
	}
	return rtn;}
bound public <void>function giveError(int code, string expected, string found) {
this.hadError = true;
this.error.code = code;
this.error.expected = expected;
this.error.found = found;
this.error.offset = this.offset;
this.error.line = 1;
this.error.column = 0;
}

bound public <map>function start(string input) {
	this.currentInput = input;
	input += string.fromCharCode(0001);	this.data["data"] = new map();
	var map data = this.data["data"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = 0; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (c == 0 - 1) {if (currentChar != string.fromCharCode(0001)) {this.giveError(2, "EOF", currentChar);}}
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarbideCalciumParserOutput ruleOut0 = this.Document(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Document(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["document"] = ruleOutCast0;
		c = 0 - 1;
		
	}
}		this.offset++; 
 this.column++;
		if (this.hadError) {break;}
	}
	for (var int i = 0; i < this.error.offset; i++) {
		this.error.column++;
		if (this.currentInput[i] == "\n") {this.error.line++; this.error.column = 0;}
	}
	if (false and this.hadError == false) {
		if (this.offset < input.length() - 1) {
			this.giveError(2, "EOF", input[this.offset + 1]);		}
	}
}
bound public <<map>CarbideCalciumParserOutput>function Document(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["exp"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarbideCalciumParserOutput ruleOut0 = this.Statement(input, charPos);
	
if (ruleOut0.hadError) {
		if (true) {

var <map>array castacexp0 = data["exp"];
var <map>array actionCap0exp = data["exp"];dataStore["data"]["expressions"] = actionCap0exp;
}c = 0 - 1; charPos--; this.offset--;
		if (ruleOut0.error.vested > 1) {this.giveError(ruleOut0.error.code, ruleOut0.error.expected, ruleOut0.error.found);}
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array castexp0 = data["exp"];
castexp0.push(ruleOutCast0);
if (input.charCodeAt(charPos + 1) != 10) {
if (true) {

var <map>array castacexp0 = data["exp"];
var <map>array actionCap0exp = data["exp"];dataStore["data"]["expressions"] = actionCap0exp;
}c = 0 - 1;continue;}else {charPos++;}if (true) {

var <map>array castacexp0 = data["exp"];
var <map>array actionCap0exp = data["exp"];dataStore["data"]["expressions"] = actionCap0exp;
}
		c = 0;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Expression(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarbideCalciumParserOutput ruleOut1 = this.Function(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarbideCalciumParserOutput ruleOut2 = this.Call(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarbideCalciumParserOutput ruleOut3 = this.Operation(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast3;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>CarbideCalciumParserOutput ruleOut4 = this.Value(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(1, "Function, Call, Operation, Value", currentChar);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast4;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Call(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


data["args"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this.Safe_Name(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
}else if (c == 1) {
	if (currentCode == 40) {
			
			c = 2;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarbideCalciumParserOutput ruleOut3 = this.Expression(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		if (ruleOut3.error.vested > 1) {this.giveError(ruleOut3.error.code, ruleOut3.error.expected, ruleOut3.error.found);}
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		var <map>array castargs3 = data["args"];
castargs3.push(ruleOutCast3);
if (input.charCodeAt(charPos + 1) != 44) {
c = 4;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 3;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarbideCalciumParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 41) {
			if (true) {

var string castac5 = data[""];
var string actionCap5name = data["name"];var <map>array actionCap5args = data["args"];dataStore["data"]["type"] = "call";
dataStore["data"]["name"] = actionCap5name;
dataStore["data"]["arguments"] = actionCap5args;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Operation(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarbideCalciumParserOutput ruleOut0 = this.Value(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Value(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["head"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this.Operator(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Operator(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["operator"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarbideCalciumParserOutput ruleOut4 = this.Expression(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "Expression(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["tail"] = ruleOutCast4;if (true) {

var map castactail4 = data["tail"];
var map actionCap4head = data["head"];var map actionCap4tail = data["tail"];var string actionCap4operator = data["operator"];dataStore["data"]["type"] = "operation";
dataStore["data"]["head"] = actionCap4head;
dataStore["data"]["tail"] = actionCap4tail;
dataStore["data"]["operator"] = actionCap4operator;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbideCalciumParserOutput>function Operator(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 43) {
			data["s"] = "+";if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	if (currentCode == 45) {
			data["s"] = "-";if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	if (currentCode == 42) {
			data["s"] = "*";if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
	if (currentCode == 47) {
			data["s"] = "/";if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		c = 4; charPos--; this.offset--;
	}
}else if (c == 4) {
	var <int>array lit4 = [61, 61];
	if (currentCode == lit4[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["s"] = this.assembleCodes(lit4);if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 5; charPos--; this.offset--;
	}
}else if (c == 5) {
	if (currentCode == 62) {
			data["s"] = ">";if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		c = 6; charPos--; this.offset--;
	}
}else if (c == 6) {
	if (currentCode == 60) {
			data["s"] = "<";if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		c = 7; charPos--; this.offset--;
	}
}else if (c == 7) {
	var <int>array lit7 = [33, 61];
	if (currentCode == lit7[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["s"] = this.assembleCodes(lit7);if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 8; charPos--; this.offset--;
	}
}else if (c == 8) {
	var <int>array lit8 = [43, 61];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["s"] = this.assembleCodes(lit8);if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 9; charPos--; this.offset--;
	}
}else if (c == 9) {
	var <int>array lit9 = [45, 61];
	if (currentCode == lit9[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["s"] = this.assembleCodes(lit9);if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 10; charPos--; this.offset--;
	}
}else if (c == 10) {
	var <int>array lit10 = [42, 61];
	if (currentCode == lit10[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["s"] = this.assembleCodes(lit10);if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 11; charPos--; this.offset--;
	}
}else if (c == 11) {
	var <int>array lit11 = [47, 61];
	if (currentCode == lit11[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["s"] = this.assembleCodes(lit11);if (true) {

var map castacs0 = data["s"];
var map actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "+, -, *, /, ==, >, <, !=, +=, -=, *=, /=", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbideCalciumParserOutput parseOutput = new <string>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Statement(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarbideCalciumParserOutput ruleOut1 = this.For(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarbideCalciumParserOutput ruleOut2 = this.If(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarbideCalciumParserOutput ruleOut3 = this.Return(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast3;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>CarbideCalciumParserOutput ruleOut4 = this.Let(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast4;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarbideCalciumParserOutput ruleOut5 = this.Call(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast5;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>CarbideCalciumParserOutput ruleOut6 = this.Set(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast6;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>CarbideCalciumParserOutput ruleOut7 = this.Operation(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(1, "For, If, Return, Let, Call, Set, Operation", currentChar);
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast7;if (true) {

var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Return(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [114, 101, 116, 117, 114, 110];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarbideCalciumParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;if (true) {

var map castacexp2 = data["exp"];
var map actionCap2exp = data["exp"];dataStore["data"]["type"] = "return";
dataStore["data"]["value"] = actionCap2exp;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function If(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	






			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [105, 102];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarbideCalciumParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarbideCalciumParserOutput ruleOut4 = this.Document(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "Document(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast4;
		c = 5;
		
	}
}else if (c == 5) {
	var <string>CarbideCalciumParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <int>array lit6 = [101, 110, 100];
	if (currentCode == lit6[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			if (true) {

var string castac6 = data[""];
var map actionCap6check = data["check"];var map actionCap6body = data["body"];dataStore["data"]["type"] = "if";
dataStore["data"]["check"] = actionCap6check;
dataStore["data"]["body"] = actionCap6body["expressions"];
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit6) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Set(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 61) {
			
			c = 4;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 4) {
	var <string>CarbideCalciumParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>CarbideCalciumParserOutput ruleOut5 = this.Expression(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Expression(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast5;if (true) {

var map castacvalue5 = data["value"];
var string actionCap5name = data["name"];var map actionCap5value = data["value"];dataStore["data"]["type"] = "set";
dataStore["data"]["name"] = actionCap5name;
dataStore["data"]["value"] = actionCap5value;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Let(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	






			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [108, 101, 116];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 61) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 5) {
	var <string>CarbideCalciumParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>CarbideCalciumParserOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast6;if (true) {

var map castacvalue6 = data["value"];
var string actionCap6name = data["name"];var map actionCap6value = data["value"];dataStore["data"]["type"] = "let";
dataStore["data"]["name"] = actionCap6name;
dataStore["data"]["value"] = actionCap6value;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function For(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
















			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [102, 111, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 61) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 5) {
	var <string>CarbideCalciumParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>CarbideCalciumParserOutput ruleOut6 = this.Value(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Value(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["from"] = ruleOutCast6;
		c = 7;
		this.error.vested++;
	}
}else if (c == 7) {
	var <string>CarbideCalciumParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	var <int>array lit8 = [97, 115];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 9;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
	}
}else if (c == 9) {
	var <string>CarbideCalciumParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	var <map>CarbideCalciumParserOutput ruleOut10 = this.Expression(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "Expression(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast10;
		c = 11;
		this.error.vested++;
	}
}else if (c == 11) {
	var <string>CarbideCalciumParserOutput ruleOut11 = this._(input, charPos);
	
if (ruleOut11.hadError) {
		this.giveError(ruleOut11.error.code, "White space(optional)(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
		
	}else{
		var string ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		
		c = 12;
		
	}
}else if (c == 12) {
	var <int>array lit12 = [100, 111];
	if (currentCode == lit12[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 13;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit12) + "", currentChar);
	}
}else if (c == 13) {
	var <string>CarbideCalciumParserOutput ruleOut13 = this._(input, charPos);
	
if (ruleOut13.hadError) {
		this.giveError(ruleOut13.error.code, "White space(optional)(" + ruleOut13.error.expected + ")", ruleOut13.error.found);
		
	}else{
		var string ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		
		c = 14;
		
	}
}else if (c == 14) {
	var <map>CarbideCalciumParserOutput ruleOut14 = this.Document(input, charPos);
	
if (ruleOut14.hadError) {
		this.giveError(ruleOut14.error.code, "Document(" + ruleOut14.error.expected + ")", ruleOut14.error.found);
		
	}else{
		var map ruleOutCast14 = ruleOut14.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast14;
		c = 15;
		
	}
}else if (c == 15) {
	var <string>CarbideCalciumParserOutput ruleOut15 = this._(input, charPos);
	
if (ruleOut15.hadError) {
		this.giveError(ruleOut15.error.code, "White space(optional)(" + ruleOut15.error.expected + ")", ruleOut15.error.found);
		
	}else{
		var string ruleOutCast15 = ruleOut15.data["data"];
charPos = this.offset;
		
		c = 16;
		
	}
}else if (c == 16) {
	var <int>array lit16 = [101, 110, 100];
	if (currentCode == lit16[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			if (true) {

var string castac16 = data[""];
var string actionCap16name = data["name"];var map actionCap16from = data["from"];var map actionCap16exp = data["exp"];var map actionCap16body = data["body"];dataStore["data"]["type"] = "for";
dataStore["data"]["name"] = actionCap16name;
dataStore["data"]["from"] = actionCap16from;
dataStore["data"]["check"] = actionCap16exp;
dataStore["data"]["body"] = actionCap16body["expressions"];
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit16) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Constant(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this.Safe_Name(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast0;if (true) {

var string castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"]["type"] = "constant";
dataStore["data"]["name"] = actionCap0name;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Literal_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["num"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 46) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["num"] += currentChar;
if (true) {

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "number";
dataStore["data"]["value"] = string.parseFloat(actionCap0num);
}
c = 0;		this.error.vested++;

	}else{
		var string castnum0 = data["num"];
if (castnum0.length() >= 1) {
if (true) {

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "number";
dataStore["data"]["value"] = string.parseFloat(actionCap0num);
}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, .", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Literal_Boolean(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [116, 114, 117, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacbool0 = data["bool"];
data["bool"] = true;}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [102, 97, 108, 115, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			if (true) {

var string castacbool1 = data["bool"];
data["bool"] = false;}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "true, false", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Literal_String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this.String(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var string castacstr0 = data["str"];
var string actionCap0str = data["str"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "string";
dataStore["data"]["value"] = actionCap0str;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Literal_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["arr"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <map>CarbideCalciumParserOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		if (ruleOut1.error.vested > 1) {this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);}
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array castarr1 = data["arr"];
castarr1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 2;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 93) {
			if (true) {

var string castac3 = data[""];
var <map>array actionCap3arr = data["arr"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "array";
dataStore["data"]["value"] = actionCap3arr;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Literal_Map_Key(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["key"] = ruleOutCast1;
		c = 3;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this.String(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Safe_Name, String", currentChar);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["key"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 58) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, ":", currentChar);
	}
}else if (c == 5) {
	var <string>CarbideCalciumParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>CarbideCalciumParserOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast6;if (true) {

var map castacvalue6 = data["value"];
var map actionCap6key = data["key"];var map actionCap6value = data["value"];dataStore["data"]["key"] = actionCap6key;
dataStore["data"]["value"] = actionCap6value;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Literal_Map(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["arr"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarbideCalciumParserOutput ruleOut2 = this.Literal_Map_Key(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castarr2 = data["arr"];
castarr2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 125) {
			if (true) {

var string castac4 = data[""];
var <map>array actionCap4arr = data["arr"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "map";
dataStore["data"]["value"] = actionCap4arr;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Literal(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarbideCalciumParserOutput ruleOut0 = this.Literal_Number(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast0;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		
	}
}else if (c == 1) {
	var <map>CarbideCalciumParserOutput ruleOut1 = this.Literal_Boolean(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast1;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarbideCalciumParserOutput ruleOut2 = this.Literal_String(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast2;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarbideCalciumParserOutput ruleOut3 = this.Literal_Array(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast3;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>CarbideCalciumParserOutput ruleOut4 = this.Literal_Map(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(1, "Literal_Number, Literal_Boolean, Literal_String, Literal_Array, Literal_Map", currentChar);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast4;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbideCalciumParserOutput>function Safe_Name(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["after"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 95) {passed0 = true;}else if (currentCode == 64) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 97, 122)) {passed0 = true;}else if (int.mid(currentCode, 65, 90)) {passed0 = true;}
	}
	if (passed0) {
		data["start"] = currentChar;
c = 1;		this.error.vested++;

	}else{
		this.giveError(1, "a-z, A-Z, _, @", currentChar);
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 95) {passed1 = true;}else if (currentCode == 46) {passed1 = true;}
	if (passed1 == false) {
		if (int.mid(currentCode, 97, 122)) {passed1 = true;}else if (int.mid(currentCode, 65, 90)) {passed1 = true;}else if (int.mid(currentCode, 48, 57)) {passed1 = true;}
	}
	if (passed1) {
		data["after"] += currentChar;
if (true) {

var string castacafter1 = data["after"];
var string actionCap1start = data["start"];var string actionCap1after = data["after"];dataStore["data"] = actionCap1start + actionCap1after;}
c = 1;		this.error.vested++;

	}else{
		if (true) {

var string castacafter1 = data["after"];
var string actionCap1start = data["start"];var string actionCap1after = data["after"];dataStore["data"] = actionCap1start + actionCap1after;}c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbideCalciumParserOutput parseOutput = new <string>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarbideCalciumParserOutput ruleOut0 = this.Function(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast0;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>CarbideCalciumParserOutput ruleOut1 = this.Literal(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast1;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarbideCalciumParserOutput ruleOut2 = this.Constant(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Function, Literal, Constant", currentChar);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast2;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Function(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



data["params"] = new <string>array();







			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [102, 117, 110, 99, 116, 105, 111, 110];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 40) {
			
			c = 3;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <string>CarbideCalciumParserOutput ruleOut4 = this.Safe_Name(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		if (ruleOut4.error.vested > 1) {this.giveError(ruleOut4.error.code, ruleOut4.error.expected, ruleOut4.error.found);}
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		var <string>array castparams4 = data["params"];
castparams4.push(ruleOutCast4);
if (input.charCodeAt(charPos + 1) != 44) {
c = 5;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 4;
		this.error.vested++;
	}
}else if (c == 5) {
	var <string>CarbideCalciumParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	if (currentCode == 41) {
			
			c = 7;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 7) {
	var <string>CarbideCalciumParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	var <map>CarbideCalciumParserOutput ruleOut8 = this.Document(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "Document(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast8;
		c = 9;
		
	}
}else if (c == 9) {
	var <string>CarbideCalciumParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	var <int>array lit10 = [101, 110, 100];
	if (currentCode == lit10[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			if (true) {

var string castac10 = data[""];
var <string>array actionCap10params = data["params"];var map actionCap10body = data["body"];dataStore["data"]["type"] = "function";
dataStore["data"]["parameters"] = actionCap10params;
dataStore["data"]["body"] = actionCap10body["expressions"];
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit10) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbideCalciumParserOutput>function _(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var <string>array data = dataStore["temp"];
	var int c = 0;
	data = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		
c = 0;		this.error.vested++;

	}else{
		c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbideCalciumParserOutput parseOutput = new <string>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbideCalciumParserOutput>function __(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["w"] = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		var <string>array castw0 = data["w"];
castw0.push(currentChar);

c = 0;		this.error.vested++;

	}else{
		var <string>array castw0 = data["w"];
if (castw0.length() >= 1) {
c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, " , 	, 
, 
", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbideCalciumParserOutput parseOutput = new <string>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbideCalciumParserOutput>function String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this.String_Double(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this.String_Single(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "String_Double, String_Single", currentChar);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast1;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbideCalciumParserOutput parseOutput = new <string>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbideCalciumParserOutput>function String_Double(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 34) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "\"") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 34) {
			if (true) {

var string castac2 = data[""];
var string actionCap2str = data["str"];dataStore["data"] = actionCap2str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbideCalciumParserOutput parseOutput = new <string>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbideCalciumParserOutput>function String_Single(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 39) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "'") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 39) {
			if (true) {

var string castac2 = data[""];
var string actionCap2str = data["str"];dataStore["data"] = actionCap2str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbideCalciumParserOutput parseOutput = new <string>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Json(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["keys"] = new <map>array();
var map captureRoot1 = new map();









			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>CarbideCalciumParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this.String(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "String(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		captureRoot1["key"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarbideCalciumParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 58) {
			
			c = 6;
			this.error.vested++;
	}else{
		this.giveError(1, ":", currentChar);
	}
}else if (c == 6) {
	var <string>CarbideCalciumParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <int>CarbideCalciumParserOutput ruleOut7 = this.Json_Value(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Json_Value(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var int ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		captureRoot1["val"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarbideCalciumParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		var <map>array castkeys2 = data["keys"];
castkeys2.push(captureRoot1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 9;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}
captureRoot1 = new map();







		c = 2;
		
	}
}else if (c == 9) {
	var <string>CarbideCalciumParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	if (currentCode == 125) {
			if (true) {

var string castac10 = data[""];
var <map>array actionCap10keys = data["keys"];
for (var int i in actionCap10keys) {
    var map k = actionCap10keys[i];
    var string key = k["key"];
    dataStore["data"][key] = k["val"];
}}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Json_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["vals"] = new <int>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <int>CarbideCalciumParserOutput ruleOut2 = this.Json_Value(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var int ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <int>array castvals2 = data["vals"];
castvals2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarbideCalciumParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 93) {
			if (true) {

var string castac4 = data[""];
var <int>array actionCap4vals = data["vals"];dataStore["data"] = actionCap4vals;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<<map>array>CarbideCalciumParserOutput>function Json_EmptyArray(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new <map>array();
dataStore["temp"] = new map();
	var <map>array data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 93) {
			if (true) {

var string castac2 = data[""];
data = new <map>array();}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <<map>array>CarbideCalciumParserOutput parseOutput = new <<map>array>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbideCalciumParserOutput>function Json_EmptyMap(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>CarbideCalciumParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 125) {
			if (true) {

var string castac2 = data[""];
data = new map();}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbideCalciumParserOutput parseOutput = new <map>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>CarbideCalciumParserOutput>function Json_Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarbideCalciumParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <int>array lit1 = [110, 117, 108, 108];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacexp1 = data["exp"];
data["exp"] = empty;}
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	var <int>array lit2 = [116, 114, 117, 101];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacexp2 = data["exp"];
data["exp"] = true;}
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
	var <int>array lit3 = [102, 97, 108, 115, 101];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			if (true) {

var string castacexp3 = data["exp"];
data["exp"] = false;}
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 4; charPos--; this.offset--;
	}
}else if (c == 4) {
	var <<map>array>CarbideCalciumParserOutput ruleOut4 = this.Json_EmptyArray(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var <map>array ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast4;
		c = 10;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarbideCalciumParserOutput ruleOut5 = this.Json_EmptyMap(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast5;
		c = 10;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>CarbideCalciumParserOutput ruleOut6 = this.Json_Array(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast6;
		c = 10;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>CarbideCalciumParserOutput ruleOut7 = this.Json(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast7;
		c = 10;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarbideCalciumParserOutput ruleOut8 = this.String(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast8;
		c = 10;
		this.error.vested++;
	}
}else if (c == 9) {
	var <int>CarbideCalciumParserOutput ruleOut9 = this.Json_Number(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", currentChar);
		
	}else{
		var int ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast9;
		c = 10;
		
	}
}else if (c == 10) {
	var <string>CarbideCalciumParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		if (true) {

var string castac10 = data[""];
var map actionCap10exp = data["exp"];dataStore["data"] = actionCap10exp;}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <int>CarbideCalciumParserOutput parseOutput = new <int>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>CarbideCalciumParserOutput>function Json_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	data["nums"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 46) {passed0 = true;}else if (currentCode == 45) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["nums"] += currentChar;
if (true) {

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);}
c = 0;		this.error.vested++;

	}else{
		var string castnums0 = data["nums"];
if (castnums0.length() >= 1) {
if (true) {

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, ., -", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <int>CarbideCalciumParserOutput parseOutput = new <int>CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
}