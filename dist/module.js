//Relative Carbon
//Relative Context
//Relative Error
//Relative FileSystem
Memory = function () {


}

//Relative Buffer
//Relative File
//Relative Stat
//Relative primitive
//Relative object
//Relative array
//Relative bool
//Relative byte
//Relative char
//Relative Console
//Relative everything
//Relative Exception
//Relative float
//Relative function
//Relative int
//Relative uint
//Relative uint8
//Relative int8
//Relative uint16
//Relative int16
//Relative uint32
//Relative int32
//Relative uint64
//Relative int64
//Relative map
//Relative null
//Relative empty
//Relative void
//Relative string
//Relative Math
Carbonite = function () {


}

Carbonite.Pre = function () {


}

Carbonite.Pre.Statements = function () {


}

Carbonite.Pre.Values = function () {


}

Carbonite.Pre.Expressions = function () {


}

Carbonite.Members = function () {


}

Carbonite.Statements = function () {


}

Carbonite.Terms = function () {


}

Carbonite.Natives = function () {


}

Carbonite.Parts = function () {


}

Carbonite.Assemblers = function () {


}

Carbonite.Platforms = function () {


}

//Relative nativeCarboniteParsers
Carbonite.Parsers = function () {


}

Carbonite.Parsers.PreParse = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		return CarbonitePreprocessor.parse(input);
	}
}

Carbonite.Parsers.CarbonParse = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		return CarboniteCarbonParser.parse(input);
	}
}

Carbonite.ParserLocation = function () {
	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

Carbonite.ParserError = function () {
	this.code = 0;

	this.found = "";

	this.expected = "";

	this.vested = 0;

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

Carbonite.ParserOutput = function () {
	this.error = null;

	this.hadError = false;

	this.data = {};

	if (arguments.length == 3 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.ParserError) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var hadError = arguments[0];
		var error = arguments[1];
		var data = arguments[2];
		this.hadError = hadError;
		this.error = error;
		this.data = data;
	}

}

Carbonite.Location = function () {
	this.line = 0;

	this.column = 0;

	this.offset = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var line = arguments[0];
		var column = arguments[1];
		var offset = arguments[2];
		this.line = line;
		this.column = column;
		this.offset = offset;
	}

}

Carbonite.Status = function () {
	this.hadError = false;

	this.errorCount = 0;

	this.firstError = null;

	this.notices = [];

	if (arguments.length == 0) {

	}

}

Carbonite.Status.prototype.stringify = function () {
	if (arguments.length == 0) {
		var notices = [];
		for (var i = 0; i < this.notices.length; i++) {
			var notice = this.notices[i];
			notices.push(notice.stringify());
			}
		if (notices.length == 0) {
			return "Ok";
			}else{
				return notices.join("\n\n");
			}
	}
}

Carbonite.Status.prototype.give = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Notice) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var notice = arguments[0];
		this.notices.push(notice);
		if (notice.level > 3) {
			if (this.hadError == false) {
				this.hadError = true;
				this.firstError = notice;
				}
			this.errorCount++;
			}
	}
}

Carbonite.Status.prototype.inherit = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Status) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var from = arguments[0];
		for (var i = 0; i < from.notices.length; i++) {
			var notice = from.notices[i];
			this.give(notice);
			}
	}
}

Carbonite.Notice = function () {
	this.start = null;

	this.end = null;

	this.message = "";

	this.level = 0;

	this.module = "Carbon";

	this.found = "";

	this.expected = "";

	this.type = "Build";

	this.source = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var message = arguments[0];
		this.message = message;
	}

}

Carbonite.Notice.prototype.stringify = function () {
	if (arguments.length == 0) {
		var level = "";
		if (this.level == 1) {
			level = "Info";
			}else if (this.level == 2) {
			level = "Notice";
			}else if (this.level == 3) {
			level = "Warning";
			}else if (this.level == 4) {
			level = "Error";
			}
		if (this.start == null) {
			this.start = new Carbonite.Location(0, 0, 0);
			}
		if (this.end == null) {
			this.end = new Carbonite.Location(0, 1, 1);
			}
		if (this.type == "Parse") {
			return this.type + "." + level + ": Found '" + this.found + "' expected '" + this.expected + "' at " + this.source.file + ":" + this.start.line + ":" + this.start.column + " in " + this.module + ".";
			}else{
				return this.type + "." + level + ": " + this.message + " at " + this.source.file + ":" + this.start.line + ":" + this.start.column + " in " + this.module + ".";
			}
	}
}

Carbonite.Notice.fromParser = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof CarbonitePreprocessorOutput) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var source = arguments[0];
		var po = arguments[1];
		var message = ["Expected '", po.error.expected, "' but found '", po.error.found, "'"];
		var notice = new Carbonite.Notice(message.join(""));
		notice.level = 4;
		notice.module = "Parser";
		notice.type = "Parse";
		notice.source = source;
		notice.found = po.error.found;
		notice.expected = po.error.expected;
		notice.start = new Carbonite.Location(po.error.line, po.error.column, po.error.offset);
		notice.end = new Carbonite.Location(po.error.line, po.error.column, po.error.offset + 1);
		return notice;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof CarboniteCarbonParserOutput) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var source = arguments[0];
		var po = arguments[1];
		var message = ["Expected '", po.error.expected, "' but found '", po.error.found, "'"];
		var notice = new Carbonite.Notice(message.join(""));
		notice.level = 4;
		notice.module = "Parser";
		notice.type = "Parse";
		notice.source = source;
		notice.found = po.error.found;
		notice.expected = po.error.expected;
		notice.start = new Carbonite.Location(po.error.line, po.error.column, po.error.offset);
		notice.end = new Carbonite.Location(po.error.line, po.error.column, po.error.offset + 1);
		return notice;
	}
}

Carbonite.Range = function () {
	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;


}

Carbonite.Range.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Range.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Source = function () {
	this.parent = null;

	this.name = "";

	this.file = "";

	this.data = "";

	this.alreadyBuilt = false;

	this.built = "";

	this.raw = null;

	this.index = 0;

	this.pre = null;

	this.status = null;

	this.pipeline = false;

	this.doc = false;

	this.doCache = false;

	this.mtime = 0;

	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var data = arguments[1];
		this.name = name;
		this.data = data;
		this.pre = new Carbonite.Pre.Processor(this);
		this.status = this.pre.status;
	}

}

Carbonite.Source.prototype.process = function () {
	if (arguments.length == 0) {
		this.pre.build();
		this.parent.status.inherit(this.status);
		if (this.pipeline) {
			this.build();
			}
	}
}

Carbonite.Source.prototype.build = function () {
	if (arguments.length == 0) {
		this.pre.run();
		if (this.pipeline) {
			var po = PipelineParser.parse(this.built);
			if (po.hadError) {

				}else{
					var rules = po.data["rules"];
					for (var i = 0; i < rules.length; i++) {
						this.parent.pipe(rules[i]);
						}
				}
			}else{
				if (this.raw == null) {
					var po = Carbonite.Parsers.CarbonParse(this.built);
					if (po.hadError) {
						this.status.give(Carbonite.Notice.fromParser(this, po));
						}else{
							this.raw = po.data["document"]["roots"];
							this.bake();
						}
					}else{
						this.bake();
					}
			}
		return this.status;
	}
}

Carbonite.Source.prototype.findClass = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Range || (arguments[1] instanceof Carbonite.Named || (arguments[1] instanceof Carbonite.Class)) || (arguments[1] instanceof Carbonite.Doc) || (arguments[1] instanceof Carbonite.NamedHack) || (arguments[1] instanceof Carbonite.Member || (arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || (arguments[1] instanceof Carbonite.Members.Property)) || (arguments[1] instanceof Carbonite.Template) || (arguments[1] instanceof Carbonite.Define) || (arguments[1] instanceof Carbonite.Body) || (arguments[1] instanceof Carbonite.Statement || (arguments[1] instanceof Carbonite.Statements.If) || (arguments[1] instanceof Carbonite.Statements.Return) || (arguments[1] instanceof Carbonite.Statements.Define) || (arguments[1] instanceof Carbonite.Statements.For) || (arguments[1] instanceof Carbonite.Statements.ForIn) || (arguments[1] instanceof Carbonite.Statements.While) || (arguments[1] instanceof Carbonite.Statements.Continue) || (arguments[1] instanceof Carbonite.Statements.Break) || (arguments[1] instanceof Carbonite.Statements.Try) || (arguments[1] instanceof Carbonite.Statements.Throw) || (arguments[1] instanceof Carbonite.Statements.Native) || (arguments[1] instanceof Carbonite.Statements.Expression) || (arguments[1] instanceof Carbonite.Statements.Yield)) || (arguments[1] instanceof Carbonite.Statements.IfAlternative) || (arguments[1] instanceof Carbonite.Argument) || (arguments[1] instanceof Carbonite.Expression) || (arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || (arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || (arguments[1] instanceof Carbonite.Implements) || (arguments[1] instanceof Carbonite.Native || (arguments[1] instanceof Carbonite.Natives.Integer) || (arguments[1] instanceof Carbonite.Natives.Float) || (arguments[1] instanceof Carbonite.Natives.Boolean) || (arguments[1] instanceof Carbonite.Natives.String) || (arguments[1] instanceof Carbonite.Natives.Array)) || (arguments[1] instanceof Carbonite.Natives.ArrayItem)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var req = arguments[1];
		return this.parent.findClass(name, req);
	}
}

Carbonite.Source.prototype.bake = function () {
	if (arguments.length == 0) {
		var temp = [];
		for (var i = 0; i < this.raw.length; i++) {
			var rawClass = this.raw[i];
			var type = rawClass["type"];
			if (type == "implements") {
				var imp = new Carbonite.Implements(rawClass);
				imp.loadLocation(this, rawClass);
				this.parent.implements.push(imp);
				}else{
					var cls = new Carbonite.Class();
					cls.loadFromRaw(rawClass);
					cls.source = this;
					cls.setupPropertyContext();
					this.parent.roots.push(cls);
					temp.push(cls);
				}
			}
		this.parent.router.bake(this, temp);
	}
}

Carbonite.Source.prototype.error = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Range || (arguments[0] instanceof Carbonite.Named || (arguments[0] instanceof Carbonite.Class)) || (arguments[0] instanceof Carbonite.Doc) || (arguments[0] instanceof Carbonite.NamedHack) || (arguments[0] instanceof Carbonite.Member || (arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || (arguments[0] instanceof Carbonite.Members.Property)) || (arguments[0] instanceof Carbonite.Template) || (arguments[0] instanceof Carbonite.Define) || (arguments[0] instanceof Carbonite.Body) || (arguments[0] instanceof Carbonite.Statement || (arguments[0] instanceof Carbonite.Statements.If) || (arguments[0] instanceof Carbonite.Statements.Return) || (arguments[0] instanceof Carbonite.Statements.Define) || (arguments[0] instanceof Carbonite.Statements.For) || (arguments[0] instanceof Carbonite.Statements.ForIn) || (arguments[0] instanceof Carbonite.Statements.While) || (arguments[0] instanceof Carbonite.Statements.Continue) || (arguments[0] instanceof Carbonite.Statements.Break) || (arguments[0] instanceof Carbonite.Statements.Try) || (arguments[0] instanceof Carbonite.Statements.Throw) || (arguments[0] instanceof Carbonite.Statements.Native) || (arguments[0] instanceof Carbonite.Statements.Expression) || (arguments[0] instanceof Carbonite.Statements.Yield)) || (arguments[0] instanceof Carbonite.Statements.IfAlternative) || (arguments[0] instanceof Carbonite.Argument) || (arguments[0] instanceof Carbonite.Expression) || (arguments[0] instanceof Carbonite.Term || (arguments[0] instanceof Carbonite.Terms.Literal) || (arguments[0] instanceof Carbonite.Terms.Expression) || (arguments[0] instanceof Carbonite.Terms.Sequence) || (arguments[0] instanceof Carbonite.Terms.Prefix) || (arguments[0] instanceof Carbonite.Terms.Function)) || (arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || (arguments[0] instanceof Carbonite.Implements) || (arguments[0] instanceof Carbonite.Native || (arguments[0] instanceof Carbonite.Natives.Integer) || (arguments[0] instanceof Carbonite.Natives.Float) || (arguments[0] instanceof Carbonite.Natives.Boolean) || (arguments[0] instanceof Carbonite.Natives.String) || (arguments[0] instanceof Carbonite.Natives.Array)) || (arguments[0] instanceof Carbonite.Natives.ArrayItem)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var range = arguments[0];
		var message = arguments[1];
		var notice = new Carbonite.Notice(message);
		notice.level = 4;
		notice.module = "Builder";
		notice.type = "Build";
		notice.source = this;
		notice.start = this.pre.getRealLocation(range.startOffset);
		notice.end = this.pre.getRealLocation(range.endOffset);
		this.status.give(notice);
	}
}

Carbonite.Context = function () {
	this.type = "";

	this.instance = "";

	this.reference = null;

	this.arguments = [];

	this.templates = [];

	this.parent = null;

	this.router = null;

	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (arguments[2] instanceof Array || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var instance = arguments[0];
		var args = arguments[1];
		var templates = arguments[2];
		this.instance = instance;
		this.arguments = args;
		this.templates = templates;
	}

}

Carbonite.Context.prototype.route = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var cls = arguments[0];
		return this.router(cls);
	}
}

Carbonite.Context.prototype.toCarbideValue = function () {
	if (arguments.length == 0) {
		return carbide_proxy_Carbonite_Context.create(this);
		return carbide_proxy_Carbonite_Context.create(this);
	}
}

Carbonite.Compiler = function () {
	this.scope = null;

	this.functionScope = [];

	this.rawOutput = "";

	this.noCore = false;

	this.noExports = [];

	this.importHandler = null;

	this.router = null;

	this.sources = [];

	this.roots = [];

	this.operatorOrders = {};

	this.virtualEvents = null;

	this.docs = new Carbonite.Docs();

	this.buildScript = null;

	this.scripts = [];

	this.status = new Carbonite.Status();

	this.useOldTemplates = false;

	this.pipeReference = {};

	this.pipeConfig = {};

	this.autoCache = false;

	this.sourceCaches = null;

	this.implemented = false;

	this.implements = [];

	this.currentLevel = 0;

	this.sourceIndex = 0;

	if (arguments.length == 0) {
		var emp = null;
		this.scope = new Carbonite.Pre.Scope(emp);
		this.router = new Carbonite.Router(this);
		this.buildScript = new Carbide.Virtual.Processor(null);
		this.virtualEvents = new VirtualEventSystem(this.buildScript);
		this.buildScript.setVar("print", function (args) {
			console.log(args[0].value);
			});
		var compiler = Carbide.Virtual.Values.Map.create({});
		var that = this;
		compiler.value["on"] = Carbide.Virtual.Values.Function.create(function (args) {
			if (args.length == 2) {
				var cast = args[0];
				that.virtualEvents.on(cast.value, args[1]);
				}
			});
		compiler.value["emit"] = Carbide.Virtual.Values.Function.create(function (args) {
			if (args.length == 2) {
				var cast = args[0];
				var argsCast = args[1];
				that.virtualEvents.emit(cast.value, argsCast.value);
				}
			});
		compiler.value["findClass"] = Carbide.Virtual.Values.Function.create(function (args) {
			if (args.length == 1) {
				var cast = args[0];
				var rtn = that.getClass(cast.value);
				if (rtn != null) {
					return VirtualClass.create(rtn);
					}else{
						return Carbide.Virtual.Values.Null.create();
					}
				}
			});
		compiler.value["Method"] = Carbide.Virtual.Values.Map.create({});
		var method = compiler.value["Method"];
		method.value["eval"] = Carbide.Virtual.Values.Function.create(function (args) {
			if (args.length == 2) {
				var raw = args[0].value;
				var cls = args[1].value;
				return VirtualMember.create(Carbonite.Members.Method.evaluate(raw, cls));
				}
			});
		compiler.value["Property"] = Carbide.Virtual.Values.Map.create({});
		var property = compiler.value["Property"];
		property.value["eval"] = Carbide.Virtual.Values.Function.create(function (args) {
			if (args.length == 2) {
				var raw = args[0].value;
				var cls = args[1].value;
				return VirtualMember.create(Carbonite.Members.Property.evaluate(raw, cls));
				}
			});
		compiler.value["Class"] = Carbide.Virtual.Values.Map.create({});
		var cls = compiler.value["Class"];
		cls.value["eval"] = Carbide.Virtual.Values.Function.create(function (args) {
			if (args.length == 1) {
				var raw = args[0].value;
				return VirtualClass.create(Carbonite.Class.evaluate(raw, that.sources[0]));
				}
			});
		this.buildScript.setValue("Carbon", compiler);
	}

}
Carbonite.Compiler.prototype.version = "0.1.1";

Carbonite.Compiler.prototype.buildTo = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var platformPath = arguments[0];
		var options = arguments[1];
		var platform = Carbonite.Platform.make(this, platformPath, options);
		platform.build();
	}
}

Carbonite.Compiler.prototype.getClass = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.roots.length; i++) {
			var root = this.roots[i];
			if (root.route == name) {
				if (root.base != "extend") {
					return root;
					}
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Compiler.prototype.getOrCreateInstance = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var type = arguments[0];

	}
}

Carbonite.Compiler.prototype.findClass = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Range || (arguments[1] instanceof Carbonite.Named || (arguments[1] instanceof Carbonite.Class)) || (arguments[1] instanceof Carbonite.Doc) || (arguments[1] instanceof Carbonite.NamedHack) || (arguments[1] instanceof Carbonite.Member || (arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || (arguments[1] instanceof Carbonite.Members.Property)) || (arguments[1] instanceof Carbonite.Template) || (arguments[1] instanceof Carbonite.Define) || (arguments[1] instanceof Carbonite.Body) || (arguments[1] instanceof Carbonite.Statement || (arguments[1] instanceof Carbonite.Statements.If) || (arguments[1] instanceof Carbonite.Statements.Return) || (arguments[1] instanceof Carbonite.Statements.Define) || (arguments[1] instanceof Carbonite.Statements.For) || (arguments[1] instanceof Carbonite.Statements.ForIn) || (arguments[1] instanceof Carbonite.Statements.While) || (arguments[1] instanceof Carbonite.Statements.Continue) || (arguments[1] instanceof Carbonite.Statements.Break) || (arguments[1] instanceof Carbonite.Statements.Try) || (arguments[1] instanceof Carbonite.Statements.Throw) || (arguments[1] instanceof Carbonite.Statements.Native) || (arguments[1] instanceof Carbonite.Statements.Expression) || (arguments[1] instanceof Carbonite.Statements.Yield)) || (arguments[1] instanceof Carbonite.Statements.IfAlternative) || (arguments[1] instanceof Carbonite.Argument) || (arguments[1] instanceof Carbonite.Expression) || (arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || (arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || (arguments[1] instanceof Carbonite.Implements) || (arguments[1] instanceof Carbonite.Native || (arguments[1] instanceof Carbonite.Natives.Integer) || (arguments[1] instanceof Carbonite.Natives.Float) || (arguments[1] instanceof Carbonite.Natives.Boolean) || (arguments[1] instanceof Carbonite.Natives.String) || (arguments[1] instanceof Carbonite.Natives.Array)) || (arguments[1] instanceof Carbonite.Natives.ArrayItem)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var req = arguments[1];
		for (var i = 0; i < this.roots.length; i++) {
			var root = this.roots[i];
			if (root.route == name) {
				if (root.base != "extend") {
					return root;
					}
				}
			}
		req.source.error(req, "Unable to find class '" + name + "'");
		throw new Error("Build error");
	}
}

Carbonite.Compiler.prototype.getPipeReference = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		if (name in this.pipeReference) {
			return this.pipeReference[name];
			}
		return "";
	}
}

Carbonite.Compiler.prototype.pipe = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		var type = raw["type"];
		if (type == "rule") {
			var value = null;
			if (raw["value"]["type"] == "literal") {
				value = raw["value"]["value"];
				}else if (raw["value"]["type"] == "reference") {
				value = this.getPipeReference(raw["value"]["name"]);
				}
			var ruleName = raw["name"];
			if (ruleName[0] == "$") {
				if (ruleName.length > 1) {
					this.pipeReference[ruleName.substr(1,ruleName.length - 1)] = value;
					}
				}else{
					this.pipeConfig[ruleName] = value;
				}
			}else if (type == "call") {

			}
	}
}

Carbonite.Compiler.prototype.copyClass = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var baseClass = arguments[0];
		var cls = new Carbonite.Class();
		cls.loadFromRaw(baseClass.raw);
		cls.source = baseClass.source;
		cls.setupPropertyContext();
		return cls;
	}
}

Carbonite.Compiler.prototype.loadHeader = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var roots = data["roots"];
		var scripts = data["scripts"];
		var heads = [];
		for (var i = 0; i < roots.length; i++) {
			var cls = Carbonite.Class.fromHeader(this, roots[i]);
			this.roots.push(cls);
			heads.push(cls);
			}
		this.router.bake(null, heads);
		for (var i = 0; i < scripts.length; i++) {
			var script = scripts[i];
			var block = Carbide.Languages.Carbon.virtualizeIntoProcessor("Header embedded carbon script", script["content"][0]["content"], this.buildScript);
			block.run(this.buildScript.scope);
			}
	}
}

Carbonite.Compiler.prototype.addSource = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var code = arguments[1];
		var source = new Carbonite.Source(name, code);
		source.parent = this;
		source.index = this.sourceIndex;
		this.sourceIndex++;
		this.sources.push(source);
		return source;
	}
}

Carbonite.Compiler.prototype.addNativeLibrary = function () {
	if (arguments.length == 0) {
		
			let base = require("path").resolve(__dirname, "../src/library/library.carb");
			let native = this.addSource("Native", require("fs").readFileSync(base, "utf8"));
			native.file = base;
			native.process();
		
	}
}

Carbonite.Compiler.prototype.getLibraryFile = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var path = arguments[0];
		
			let base = require("path").resolve(__dirname, "../src/library/" + path);
			return require("fs").readFileSync(base, "utf8");
		
	}
}

Carbonite.Compiler.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var platformRoute = arguments[0];
		var options = arguments[1];
		var platform = Carbonite.Platform.make(this, platformRoute, options);
		var platforms = {};
		var shivPlatforms = ["javascript", "cpp", "documentation", "php", "header"];
		for (var i = 0; i < shivPlatforms.length; i++) {
			var shivPlatform = shivPlatforms[i];
			if (platform.platform == shivPlatform) {
				platforms[shivPlatform] = true;
				}else{
					platforms[shivPlatform] = false;
				}
			}
		var varName = "platform";
		var platformInfo = new Carbonite.Pre.Variable(varName, Carbonite.Pre.Values.Map.create(platforms));
		this.scope.addVariable(platformInfo);
		for (var i = 0; i < this.sources.length; i++) {
			var source = this.sources[i];
			if (source.alreadyBuilt == false) {
				source.build();
				this.status.inherit(source.status);
				if (source.status.hadError) {
					return source.status;
					}
				source.status = this.status;
				source.alreadyBuilt = true;
				}
			}
		try {;
		for (var i = 0; i < this.roots.length; i++) {
			var root = this.roots[i];
			root.compiler = this;
			}
		for (var i = 0; i < this.roots.length; i++) {
			var root = this.roots[i];
			if (root.alreadyBuilt == false) {
				if (root.getAttribute(root.attributes, "Reroute") != null) {
					var mp = root.getAttribute(root.attributes, "Reroute");
					if ((typeof mp["value"] == 'object' ? (Array.isArray(mp["value"]) ? 'array' : 'map') : (typeof mp["value"] == 'number' ? 'float' : typeof mp["value"])) == "boolean") {
						root.autoReroute = mp["value"];
						}else{
							root.reroute = mp["value"];
						}
					}
				if (root.isFromHeader) {
					root.fillFromHeader();
					}else{
						root.buildTemplates();
					}
				}
			}
		if (this.implemented == false) {
			this.implemented = true;
			for (var i = 0; i < this.implements.length; i++) {
				var imp = this.implements[i];
				var base = this.findClass(imp.implements, imp);
				var real = this.findClass(imp.implementer, imp);
				base.link = real;
				if (base.getAttribute(base.attributes, "Reroute") != null) {
					real.reroute = base.route;
					base.link = null;
					}
				}
			}
		this.currentLevel = 1;
		for (var i = this.roots.length - 1;i >= 0;i--) {
			var root = this.roots[i];
			if (root.alreadyBuilt == false && root.raw != null) {
				root.buildDefaultTemplates();
				}
			}
		this.currentLevel = 2;
		for (var i = this.roots.length - 1;i >= 0;i--) {
			var root = this.roots[i];
			if (root.alreadyBuilt == false && root.raw != null) {
				root.buildMembers();
				root.membersBuilt = true;
				if (root.base == "extend") {
					this.findClass(root.route, root).extend(root);
					this.roots.splice(i, 1);
					}
				}
			}
		this.currentLevel = 3;
		for (var i = 0; i < this.roots.length; i++) {
			var root = this.roots[i];
			if (root.alreadyBuilt == false && root.raw != null) {
				root.executeInherits();
				}
			}
		this.virtualEvents.emit("classes.end", []);
		for (var i = 0; i < this.roots.length; i++) {
			var root = this.roots[i];
			if (root.alreadyBuilt == false) {
				root.buildCode();
				root.alreadyBuilt = true;
				}
			}
		this.currentLevel = 4;
		if (this.status.hadError == false) {
			platform.build();
			}
		} catch(err) {};
		for (var i = 0; i < this.sources.length; i++) {
			var source = this.sources[i];
			if (source.doCache) {
				source.parent.setCache(source.file, source.mtime, source.raw);
				}
			}
		return this.status;
	}
}

Carbonite.Compiler.prototype.hasConfigFlag = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		if (name in this.pipeConfig) {
			var flag = this.pipeConfig[name];
			if (flag == true) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Compiler.prototype.doExport = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var route = arguments[0];
		if ("restrict" in this.pipeConfig) {
			if (route != this.pipeConfig["restrict"]) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Compiler.prototype.buildClassToCurrentLevel = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var root = arguments[0];
		var i = arguments[1];
		try {;
		if (this.currentLevel >= 0) {
			if (root.alreadyBuilt == false) {
				root.compiler = this;
				root.buildTemplates();
				}
			}
		if (this.currentLevel >= 1) {
			if (root.alreadyBuilt == false) {
				root.buildDefaultTemplates();
				}
			}
		if (this.currentLevel >= 2) {
			if (root.alreadyBuilt == false) {
				root.buildMembers();
				if (root.base == "extend") {
					this.findClass(root.route, root).extend(root);
					this.roots.splice(i, 1);
					}
				}
			}
		if (this.currentLevel >= 3) {
			if (root.alreadyBuilt == false) {
				root.buildCode();
				root.alreadyBuilt = true;
				}
			}
		} catch(err) {};
	}
}

Carbonite.Compiler.prototype.loadCache = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		for (var i = 0; i < raw.length; i++) {
			var parsed = raw[i]["parsed"];
			var path = raw[i]["path"];
			var timeStamp = raw[i]["timeStamp"];
			this.setCache(Oxygen.FileSystem.normalize(path), timeStamp, parsed);
			}
	}
}

Carbonite.Compiler.prototype.getCache = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var path = arguments[0];
		var timeStamp = arguments[1];
		if (this.sourceCaches == null) {
			return null;
			}
		for (var i = 0; i < this.sourceCaches.length; i++) {
			var iCache = this.sourceCaches[i];
			if (iCache.path == path) {
				if (iCache.timeStamp < timeStamp) {
					return null;
					}
				return iCache;
				}
			}
	}
}

Carbonite.Compiler.prototype.setCache = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (arguments[2] instanceof Array || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var path = arguments[0];
		var timeStamp = arguments[1];
		var raw = arguments[2];
		if (this.sourceCaches == null) {
			this.sourceCaches = [];
			}
		for (var i = 0; i < this.sourceCaches.length; i++) {
			var iCache = this.sourceCaches[i];
			if (iCache.path == path) {
				iCache.update(timeStamp, raw);
				return null;
				}
			}
		var sCache = new Carbonite.SourceCache(path, timeStamp, raw);
		this.sourceCaches.push(sCache);
	}
}

Carbonite.Compiler.prototype.getPipelineSource = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.sources.length; i++) {
			if (this.sources[i].pipeline) {
				return this.sources[i];
				}
			}
		return null;
	}
}

Carbonite.Level = function () {
	this.names = [];

	this.level = 0;

	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var lvl = arguments[0];
		this.level = lvl;
	}

}

Carbonite.Router = function () {
	this.cacheMap = {};

	this.levelMap = [];

	this.parent = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Router.prototype.getLevel = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var level = arguments[0];
		var lvlCast = this.levelMap;
		for (var i = 0; i < this.levelMap.length; i++) {
			var lvl = lvlCast[i];
			if (lvl.level == level) {
				return lvl;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Router.prototype.addToLevel = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Named || (arguments[0] instanceof Carbonite.Class)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var nme = arguments[0];
		var level = arguments[1];
		var lvlCast = this.levelMap;
		for (var i = 0; i < this.levelMap.length; i++) {
			var lvl = lvlCast[i];
			if (lvl.level == level) {
				lvl.names.push(nme);
				return true;
				}
			}
		var nl = new Carbonite.Level(level);
		nl.names.push(nme);
		this.levelMap.push(nl);
		return true;
	}
}

Carbonite.Router.prototype.getNamedAtLevel = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var route = arguments[0];
		var level = arguments[1];
		var lvl = this.getLevel(level);
		if (lvl != null) {
			var names = lvl.names;
			for (var i = 0; i < lvl.names.length; i++) {
				var nme = names[i];
				if (nme.route == route) {
					return nme;
					}
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Router.prototype.getOwnName = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Named || (arguments[0] instanceof Carbonite.Class)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var nme = arguments[0];
		var splits = nme.route.split(".");
		var lst = splits.length - 1;
		var rtn = splits[lst];
		return rtn;
	}
}

Carbonite.Router.prototype.getParentString = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Named || (arguments[0] instanceof Carbonite.Class)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var nme = arguments[0];
		var splits = nme.route.split(".");
		var lst = splits.pop();
		var rtn = splits.join(".");
		return rtn;
	}
}

Carbonite.Router.prototype.bake = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var names = arguments[1];
		var high = 1;
		for (var i = 0; i < names.length; i++) {
			var nme = names[i];
			nme.name = this.getOwnName(nme);
			var splits = nme.route.split(".");
			var level = splits.length;
			this.addToLevel(nme, level);
			if (level > high) {
				high = level;
				}
			}
		for (var i = 1;i <= high;i++) {
			var lvl = this.getLevel(i);
			if (lvl != null) {
				if (i == 1) {

					}else{
						var nmes = lvl.names;
						for (var j = 0;j < lvl.names.length;j++) {
							var nme = nmes[j];
							var parent = this.getNamedAtLevel(this.getParentString(nme), i - 1);
							if (nme.leveled == false) {
								if (parent != null) {
									if (parent.hasChild(nme.name) == false) {
										parent.children.push(nme);
										nme.parent = parent;
										nme.leveled = true;
										}else{
											var nmeCast = nme;
											if (nmeCast.base == "extend") {
												var cls = parent.getChild(nme.name);
												cls.extend(nme);
												}else{
													var ext = parent.getChild(nme.name);
													if ((ext.base == "interface") && ext.hasFlag("abstract") == false) {
														parent.children.push(nme);
														nme.parent = parent;
														nme.leveled = true;
														}else{
															container.error(nme, "Use extend on class '" + nme.route + "' to add to an already existing class");
														}
												}
										}
									}else{
										container.error(nme, "Unable to put " + nme.name + " into a non namespace <" + nme.route + "> " + this.getParentString(nme));
									}
								}
							}
					}
				}else{

				}
			}
	}
}

Carbonite.Class = function () {
	this.uid = 0;

	this.raw = null;

	this.headerData = null;

	this.isFromHeader = false;

	this.primitiveValue = false;

	this.members = [];

	this.inherits = [];

	this.headerInherits = [];

	this.templates = [];

	this.descendants = [];

	this.attributes = null;

	this.reroute = "";

	this.autoReroute = false;

	this.propertyContext = null;

	this.link = null;

	this.alreadyBuilt = false;

	this.membersBuilt = false;

	this.codeBuilt = false;

	this.inherited = false;

	this.doc = null;

	this.templateClass = false;

	this.templateInstance = false;

	this.templateBase = null;

	this.instances = [];

	this.resolvedTemplates = [];

	this.base = "";

	this.flags = null;

	this.route = "";

	this.name = "";

	this.leveled = false;

	this.compiler = null;

	this.children = [];

	this.parent = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 0) {

	}

}

Carbonite.Class.prototype.setupPropertyContext = function () {
	if (arguments.length == 0) {
		var hackMap = {};
		var emp = null;
		var hack = new Carbonite.Member(this, this, emp);
		hack.name = "propertyContext";
		this.propertyContext = new Carbonite.Body(hack, this, hackMap);
	}
}

Carbonite.Class.evaluate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Source) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var parent = arguments[1];
		var output = CarboniteCarbonParser.parse("Root", raw);
		if (output.hadError) {
			parent.parent.status.give(Carbonite.Notice.fromParser(parent, output));
			}else{
				var cls = new Carbonite.Class();
				cls.loadFromRaw(output.data["data"]);
				cls.source = parent;
				parent.parent.roots.push(cls);
				var temp = [];
				temp.push(cls);
				parent.parent.router.bake(parent, temp);
				parent.parent.buildClassToCurrentLevel(cls, parent.parent.roots.length - 1);
				return cls;
			}
	}
}

Carbonite.Class.prototype.getRoute = function () {
	if (arguments.length == 0) {
		if (this.reroute != "") {
			return this.reroute;
			}
		return this.route;
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var join = arguments[0];
		if (this.reroute != "") {
			return this.reroute;
			}
		return this.route.split(".").join(join);
	}
}

Carbonite.Class.prototype.doExport = function () {
	if (arguments.length == 0) {
		if (this.compiler.noCore) {
			if (this.hasFlag("core")) {
				return false;
				}
			}
		for (var i = 0; i < this.compiler.noExports.length; i++) {
			var cls = this.compiler.getClass(this.compiler.noExports[i]);
			if (cls.route == this.route || this.childOf(cls)) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Class.prototype.findInstance = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var type = arguments[0];
		for (var i = 0; i < this.instances.length; i++) {
			if (this.instances[i].compare(type)) {
				return this.instances[i];
				}
			}
		return null;
	}
}

Carbonite.Class.prototype.createInstance = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var type = arguments[0];
		var cpy = this.compiler.copyClass(this);
		cpy.compiler = this.compiler;
		cpy.templateInstance = true;
		cpy.templateBase = this;
		cpy.buildTemplates();
		var inst = new Carbonite.TemplateInstance(cpy, this);
		for (var i = 0; i < type.templates.length; i++) {
			inst.templates.push(type.templates[i]);
			cpy.resolvedTemplates.push(type.templates[i]);
			}
		this.instances.push(inst);
		if (this.membersBuilt) {
			cpy.buildMembers();
			}
		if (this.alreadyBuilt) {
			cpy.buildCode();
			}
		return inst;
	}
}

Carbonite.Class.prototype.descendantOf = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var of = arguments[0];
		for (var i = 0; i < this.inherits.length; i++) {
			var inh = this.inherits[i];
			if (of.route == inh.route) {
				return true;
				}else if (inh.descendantOf(of)) {
				return true;
				}
			}
		if (this.isFromHeader) {
			for (var i = 0; i < this.headerInherits.length; i++) {
				var inh = this.headerInherits[i];
				if (of.route == inh.route) {
					return true;
					}else if (inh.descendantOf(of)) {
					return true;
					}
				}
			}
		if (of.parent != null) {
			var parent = of.parent;
			return this.descendantOf(parent);
			}
		return false;
	}
}

Carbonite.Class.prototype.childOf = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var of = arguments[0];
		if (this.parent == null) {
			return false;
			}
		if (this.parent.route == of.route) {
			return true;
			}
		var cast = this.parent;
		return cast.childOf(of);
	}
}

Carbonite.Class.prototype.dotMember = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Range || (arguments[1] instanceof Carbonite.Named || (arguments[1] instanceof Carbonite.Class)) || (arguments[1] instanceof Carbonite.Doc) || (arguments[1] instanceof Carbonite.NamedHack) || (arguments[1] instanceof Carbonite.Member || (arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || (arguments[1] instanceof Carbonite.Members.Property)) || (arguments[1] instanceof Carbonite.Template) || (arguments[1] instanceof Carbonite.Define) || (arguments[1] instanceof Carbonite.Body) || (arguments[1] instanceof Carbonite.Statement || (arguments[1] instanceof Carbonite.Statements.If) || (arguments[1] instanceof Carbonite.Statements.Return) || (arguments[1] instanceof Carbonite.Statements.Define) || (arguments[1] instanceof Carbonite.Statements.For) || (arguments[1] instanceof Carbonite.Statements.ForIn) || (arguments[1] instanceof Carbonite.Statements.While) || (arguments[1] instanceof Carbonite.Statements.Continue) || (arguments[1] instanceof Carbonite.Statements.Break) || (arguments[1] instanceof Carbonite.Statements.Try) || (arguments[1] instanceof Carbonite.Statements.Throw) || (arguments[1] instanceof Carbonite.Statements.Native) || (arguments[1] instanceof Carbonite.Statements.Expression) || (arguments[1] instanceof Carbonite.Statements.Yield)) || (arguments[1] instanceof Carbonite.Statements.IfAlternative) || (arguments[1] instanceof Carbonite.Argument) || (arguments[1] instanceof Carbonite.Expression) || (arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || (arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || (arguments[1] instanceof Carbonite.Implements) || (arguments[1] instanceof Carbonite.Native || (arguments[1] instanceof Carbonite.Natives.Integer) || (arguments[1] instanceof Carbonite.Natives.Float) || (arguments[1] instanceof Carbonite.Natives.Boolean) || (arguments[1] instanceof Carbonite.Natives.String) || (arguments[1] instanceof Carbonite.Natives.Array)) || (arguments[1] instanceof Carbonite.Natives.ArrayItem)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var req = arguments[1];
		this.executeInherits();
		for (var i = 0; i < this.members.length; i++) {
			var member = this.members[i];
			if (member.checkName(name)) {
				return member;
				}
			}
		var dots = this.getMethods("@dot");
		if (dots.length > 0) {
			var dot = dots[0];
			return dot;
			}
		req.source.error(req, "No member named '" + name + "' in class '" + this.name + "'");
		throw new Error("Build error");
	}
}

Carbonite.Class.prototype.getMethods = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var rtn = [];
		for (var i = 0; i < this.members.length; i++) {
			var member = this.members[i];
			if (member.checkName(name)) {
				if (member.type != "property") {
					rtn.push(member);
					}
				}
			}
		return rtn;
	}
}

Carbonite.Class.prototype.findCastFor = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var type = arguments[0];
		var methods = this.getMethods("@cast");
		for (var i = 0; i < methods.length; i++) {
			var method = methods[i];
			if (method.output.check(type)) {
				return method;
				}
			}
		return null;
	}
}

Carbonite.Class.prototype.makeArgumentsPretty = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var ___arguments = arguments[1];
		var types = [];
		for (var i = 0; i < ___arguments.length; i++) {
			var arg = ___arguments[i];
			types.push(arg.lookPretty());
			}
		return "Unable to overload for method or operator " + this.route + "." + name + "(" + types.join(", ") + ")";
	}
}

Carbonite.Class.prototype.overloadWithCast = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Range || (arguments[2] instanceof Carbonite.Named || (arguments[2] instanceof Carbonite.Class)) || (arguments[2] instanceof Carbonite.Doc) || (arguments[2] instanceof Carbonite.NamedHack) || (arguments[2] instanceof Carbonite.Member || (arguments[2] instanceof Carbonite.Members.Method || (arguments[2] instanceof Carbonite.Members.Operator)) || (arguments[2] instanceof Carbonite.Members.Property)) || (arguments[2] instanceof Carbonite.Template) || (arguments[2] instanceof Carbonite.Define) || (arguments[2] instanceof Carbonite.Body) || (arguments[2] instanceof Carbonite.Statement || (arguments[2] instanceof Carbonite.Statements.If) || (arguments[2] instanceof Carbonite.Statements.Return) || (arguments[2] instanceof Carbonite.Statements.Define) || (arguments[2] instanceof Carbonite.Statements.For) || (arguments[2] instanceof Carbonite.Statements.ForIn) || (arguments[2] instanceof Carbonite.Statements.While) || (arguments[2] instanceof Carbonite.Statements.Continue) || (arguments[2] instanceof Carbonite.Statements.Break) || (arguments[2] instanceof Carbonite.Statements.Try) || (arguments[2] instanceof Carbonite.Statements.Throw) || (arguments[2] instanceof Carbonite.Statements.Native) || (arguments[2] instanceof Carbonite.Statements.Expression) || (arguments[2] instanceof Carbonite.Statements.Yield)) || (arguments[2] instanceof Carbonite.Statements.IfAlternative) || (arguments[2] instanceof Carbonite.Argument) || (arguments[2] instanceof Carbonite.Expression) || (arguments[2] instanceof Carbonite.Term || (arguments[2] instanceof Carbonite.Terms.Literal) || (arguments[2] instanceof Carbonite.Terms.Expression) || (arguments[2] instanceof Carbonite.Terms.Sequence) || (arguments[2] instanceof Carbonite.Terms.Prefix) || (arguments[2] instanceof Carbonite.Terms.Function)) || (arguments[2] instanceof Carbonite.Type || (arguments[2] instanceof Carbonite.ReferenceType)) || (arguments[2] instanceof Carbonite.Implements) || (arguments[2] instanceof Carbonite.Native || (arguments[2] instanceof Carbonite.Natives.Integer) || (arguments[2] instanceof Carbonite.Natives.Float) || (arguments[2] instanceof Carbonite.Natives.Boolean) || (arguments[2] instanceof Carbonite.Natives.String) || (arguments[2] instanceof Carbonite.Natives.Array)) || (arguments[2] instanceof Carbonite.Natives.ArrayItem)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var ___arguments = arguments[1];
		var req = arguments[2];
		this.executeInherits();
		var methods = this.getMethods(name);
		for (var i = 0; i < methods.length; i++) {
			var method = methods[i];
			if (method.check(___arguments)) {
				return new Carbonite.OverloadInfo(method);
				}
			}
		for (var i = 0; i < methods.length; i++) {
			var method = methods[i];
			var casts = method.checkWithCast(___arguments);
			if (casts.length > 0) {
				return new Carbonite.OverloadInfo(method, casts);
				}
			}
		if (req.source != null) {
			req.source.error(req, this.makeArgumentsPretty(name, ___arguments));
			}else{
				this.source.error(req, this.makeArgumentsPretty(name, ___arguments));
			}
		throw new Error("Build error");
	}
}

Carbonite.Class.prototype.overload = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Range || (arguments[2] instanceof Carbonite.Named || (arguments[2] instanceof Carbonite.Class)) || (arguments[2] instanceof Carbonite.Doc) || (arguments[2] instanceof Carbonite.NamedHack) || (arguments[2] instanceof Carbonite.Member || (arguments[2] instanceof Carbonite.Members.Method || (arguments[2] instanceof Carbonite.Members.Operator)) || (arguments[2] instanceof Carbonite.Members.Property)) || (arguments[2] instanceof Carbonite.Template) || (arguments[2] instanceof Carbonite.Define) || (arguments[2] instanceof Carbonite.Body) || (arguments[2] instanceof Carbonite.Statement || (arguments[2] instanceof Carbonite.Statements.If) || (arguments[2] instanceof Carbonite.Statements.Return) || (arguments[2] instanceof Carbonite.Statements.Define) || (arguments[2] instanceof Carbonite.Statements.For) || (arguments[2] instanceof Carbonite.Statements.ForIn) || (arguments[2] instanceof Carbonite.Statements.While) || (arguments[2] instanceof Carbonite.Statements.Continue) || (arguments[2] instanceof Carbonite.Statements.Break) || (arguments[2] instanceof Carbonite.Statements.Try) || (arguments[2] instanceof Carbonite.Statements.Throw) || (arguments[2] instanceof Carbonite.Statements.Native) || (arguments[2] instanceof Carbonite.Statements.Expression) || (arguments[2] instanceof Carbonite.Statements.Yield)) || (arguments[2] instanceof Carbonite.Statements.IfAlternative) || (arguments[2] instanceof Carbonite.Argument) || (arguments[2] instanceof Carbonite.Expression) || (arguments[2] instanceof Carbonite.Term || (arguments[2] instanceof Carbonite.Terms.Literal) || (arguments[2] instanceof Carbonite.Terms.Expression) || (arguments[2] instanceof Carbonite.Terms.Sequence) || (arguments[2] instanceof Carbonite.Terms.Prefix) || (arguments[2] instanceof Carbonite.Terms.Function)) || (arguments[2] instanceof Carbonite.Type || (arguments[2] instanceof Carbonite.ReferenceType)) || (arguments[2] instanceof Carbonite.Implements) || (arguments[2] instanceof Carbonite.Native || (arguments[2] instanceof Carbonite.Natives.Integer) || (arguments[2] instanceof Carbonite.Natives.Float) || (arguments[2] instanceof Carbonite.Natives.Boolean) || (arguments[2] instanceof Carbonite.Natives.String) || (arguments[2] instanceof Carbonite.Natives.Array)) || (arguments[2] instanceof Carbonite.Natives.ArrayItem)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var ___arguments = arguments[1];
		var req = arguments[2];
		this.executeInherits();
		var methods = this.getMethods(name);
		for (var i = 0; i < methods.length; i++) {
			var method = methods[i];
			if (method.check(___arguments)) {
				return method;
				}
			}
		req.source.error(req, this.makeArgumentsPretty(name, ___arguments));
		throw new Error("Build error");
	}
}

Carbonite.Class.prototype.overloadWithContext = function () {
	if (arguments.length == 4 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Type || (arguments[2] instanceof Carbonite.ReferenceType)) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbonite.Range || (arguments[3] instanceof Carbonite.Named || (arguments[3] instanceof Carbonite.Class)) || (arguments[3] instanceof Carbonite.Doc) || (arguments[3] instanceof Carbonite.NamedHack) || (arguments[3] instanceof Carbonite.Member || (arguments[3] instanceof Carbonite.Members.Method || (arguments[3] instanceof Carbonite.Members.Operator)) || (arguments[3] instanceof Carbonite.Members.Property)) || (arguments[3] instanceof Carbonite.Template) || (arguments[3] instanceof Carbonite.Define) || (arguments[3] instanceof Carbonite.Body) || (arguments[3] instanceof Carbonite.Statement || (arguments[3] instanceof Carbonite.Statements.If) || (arguments[3] instanceof Carbonite.Statements.Return) || (arguments[3] instanceof Carbonite.Statements.Define) || (arguments[3] instanceof Carbonite.Statements.For) || (arguments[3] instanceof Carbonite.Statements.ForIn) || (arguments[3] instanceof Carbonite.Statements.While) || (arguments[3] instanceof Carbonite.Statements.Continue) || (arguments[3] instanceof Carbonite.Statements.Break) || (arguments[3] instanceof Carbonite.Statements.Try) || (arguments[3] instanceof Carbonite.Statements.Throw) || (arguments[3] instanceof Carbonite.Statements.Native) || (arguments[3] instanceof Carbonite.Statements.Expression) || (arguments[3] instanceof Carbonite.Statements.Yield)) || (arguments[3] instanceof Carbonite.Statements.IfAlternative) || (arguments[3] instanceof Carbonite.Argument) || (arguments[3] instanceof Carbonite.Expression) || (arguments[3] instanceof Carbonite.Term || (arguments[3] instanceof Carbonite.Terms.Literal) || (arguments[3] instanceof Carbonite.Terms.Expression) || (arguments[3] instanceof Carbonite.Terms.Sequence) || (arguments[3] instanceof Carbonite.Terms.Prefix) || (arguments[3] instanceof Carbonite.Terms.Function)) || (arguments[3] instanceof Carbonite.Type || (arguments[3] instanceof Carbonite.ReferenceType)) || (arguments[3] instanceof Carbonite.Implements) || (arguments[3] instanceof Carbonite.Native || (arguments[3] instanceof Carbonite.Natives.Integer) || (arguments[3] instanceof Carbonite.Natives.Float) || (arguments[3] instanceof Carbonite.Natives.Boolean) || (arguments[3] instanceof Carbonite.Natives.String) || (arguments[3] instanceof Carbonite.Natives.Array)) || (arguments[3] instanceof Carbonite.Natives.ArrayItem)) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var name = arguments[0];
		var ___arguments = arguments[1];
		var context = arguments[2];
		var req = arguments[3];
		var methods = this.getMethods(name);
		for (var i = 0; i < methods.length; i++) {
			var method = methods[i];
			if (method.checkWithContext(___arguments, context)) {
				return method;
				}
			}
		req.source.error(req, this.makeArgumentsPretty(name, ___arguments));
		throw new Error("Build error");
	}
}

Carbonite.Class.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.route = this.raw["name"];
		this.base = this.raw["type"];
		this.flags = this.raw["flags"];
		this.startOffset = this.raw["start"];
		this.endOffset = this.raw["end"];
		this.attributes = raw["attribute"];
		if (this.attributes == null) {
			this.attributes = [];
			}
		if (this.getAttribute(this.attributes, "Primitive") != null) {
			this.primitiveValue = true;
			}
		this.doc = new Carbonite.Doc(this.raw["doc"]);
	}
}

Carbonite.Class.prototype.getAttribute = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var attrs = arguments[0];
		var name = arguments[1];
		if (attrs == null) {
			return null;
			}
		for (var i = 0; i < attrs.length; i++) {
			var a = attrs[i];
			if (a["key"] == name) {
				return a;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Class.prototype.hasFlag = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.flags.length; i++) {
			if (this.flags[i] == name) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Class.prototype.findParent = function () {
	if (arguments.length == 0) {
		var splits = this.route.split(".");
		if (splits.length > 1) {
			splits.pop();
			var parentRoute = splits.join(".");
			var parent = this.compiler.findClass(parentRoute, this);
			this.parent = parent;
			this.parent.children.push(this);
			}
	}
}

Carbonite.Class.prototype.executeInherits = function () {
	if (arguments.length == 0) {
		if (this.inherited) {

			}else{
				this.inherited = true;
				if (this.route == "primitive") {
					this.primitiveValue = true;
					}
				if (this.route != "everything") {
					this.inherits.push(this.compiler.findClass("everything", this));
					}
				for (var i = 0; i < this.inherits.length; i++) {
					var cls = this.inherits[i];
					if (cls.route == "primitive" || cls.route == "int") {
						if (this.route != "array" || this.route != "map") {
							this.primitiveValue = true;
							}
						}
					cls.executeInherits();
					this.inherit(cls);
					cls.descendants.push(this);
					}
				var arr = [];
				arr.push(VirtualClass.create(this));
				this.compiler.virtualEvents.emit("members.end", arr);
			}
	}
}

Carbonite.Class.prototype.emitMemberEnd = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Class.prototype.buildCode = function () {
	if (arguments.length == 0) {
		this.executeInherits();
		if (this.compiler.useOldTemplates == false && this.templateClass) {
			for (var i = 0; i < this.instances.length; i++) {
				this.instances[i].instance.buildCode();
				}
			}else{
				for (var i = 0; i < this.members.length; i++) {
					var member = this.members[i];
					if (member.raw == null) {
						continue;
						}
					if (member.type != "property") {
						var method = member;
						method.buildBody();
						}else{
							var property = member;
							property.buildDefault();
						}
					}
			}
	}
}

Carbonite.Class.prototype.makeMember = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var mem = arguments[0];
		return this.makeMember(this, mem);
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var cls = arguments[0];
		var mem = arguments[1];
		if (mem["attribute"] != null) {
			var cst = mem["attribute"];
			var attr = this.getAttribute(cst, "operator");
			if (attr != null) {
				var member = new Carbonite.Members.Operator(this, this, mem);
				member.loadLocation(cls, mem);
				var op = member.getAttributes("operator");
				var cAttr = op[0];
				member.operator = cAttr["value"];
				member.realName = member.name;
				member.name = member.operator;
				var order = member.getAttributes("order");
				if (order.length > 0) {
					var mainOrder = order[0];
					member.order = mainOrder["value"];
					}
				return member;
				}else{
					return Carbonite.Member.make(this, cls, mem);
				}
			}else{
				return Carbonite.Member.make(this, cls, mem);
			}
	}
}

Carbonite.Class.prototype.buildMembers = function () {
	if (arguments.length == 0) {
		var shouldDo = true;
		if (this.compiler.useOldTemplates == false && this.templateClass && this.templateInstance == false) {
			shouldDo = false;
			}
		if (shouldDo) {
			var members = this.raw["members"];
			for (var i = members.length - 1;i >= 0;i--) {
				var mem = members[i];
				if (mem["attribute"] != null) {
					var cst = mem["attribute"];
					var attr = this.getAttribute(cst, "operator");
					if (attr != null) {
						var member = new Carbonite.Members.Operator(this, this, mem);
						var op = member.getAttributes("operator");
						var cAttr = op[0];
						member.operator = cAttr["value"];
						member.realName = member.name;
						member.name = member.operator;
						var order = member.getAttributes("order");
						if (order.length > 0) {
							var mainOrder = order[0];
							member.order = mainOrder["value"];
							}
						this.compiler.operatorOrders[member.operator] = member.order;
						this.members.push(member);
						}
					}
				}
			for (var i = 0; i < members.length; i++) {
				var mem = members[i];
				var cst = mem["attribute"];
				var attr = null;
				if (cst != null) {
					attr = this.getAttribute(cst, "operator");
					}
				if (attr == null) {
					var member = Carbonite.Member.make(this, members[i]);
					this.members.push(member);
					}
				}
			}
		for (var i = 0; i < this.instances.length; i++) {
			var inst = this.instances[i];
			inst.instance.buildMembers();
			}
	}
}

Carbonite.Class.prototype.buildTemplates = function () {
	if (arguments.length == 0) {
		var temp = this.raw["templates"];
		if (temp.length != 0) {
			var templates = this.raw["templates"][0]["templates"];
			for (var i = 0; i < templates.length; i++) {
				var template = new Carbonite.Template(this);
				template.index = i;
				template.loadFromRaw(templates[i]);
				this.templates.push(template);
				}
			}
		this.templateClass = ((this.templates.length > 0) && (this.templateInstance == false));
	}
}

Carbonite.Class.prototype.buildInheritance = function () {
	if (arguments.length == 0) {
		if (this.raw["inherits"] != null) {
			var inherits = this.raw["inherits"]["types"];
			for (var i = 0; i < inherits.length; i++) {
				var inherit = inherits[i];
				var name = inherit["name"];
				var cls = this.compiler.findClass(name, this);
				this.inherits.push(cls);
				}
			}
	}
}

Carbonite.Class.prototype.destroyMembers = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = this.members.length - 1;i >= 0;i--) {
			var member = this.members[i];
			if (member.name == name) {
				this.members.splice(i, 1);
				}
			}
	}
}

Carbonite.Class.prototype.getMembers = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var members = [];
		for (var i = 0; i < this.members.length; i++) {
			var member = this.members[i];
			if (member.name == name) {
				members.push(member);
				}
			}
		return members;
	}
}

Carbonite.Class.prototype.getMember = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.members.length; i++) {
			var member = this.members[i];
			if (member.name == name) {
				return member;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Class.prototype.hasMember = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.members.length; i++) {
			if (this.members[i].name == name) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Class.prototype.inherit = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var from = arguments[0];
		if (from.isFromHeader) {
			if (from.raw == null) {
				this.buildError("Class '" + this.route + "' is not allowed to inherit a non exported header class '" + from.route + "'");
				}
			}
		if (from.hasFlag("header")) {
			this.flags.push("header");
			}
		var arr = [];
		arr.push(VirtualClass.create(from));
		arr.push(VirtualClass.create(this));
		this.compiler.virtualEvents.emit("inherits." + from.route, arr);
		for (var i = 0; i < from.members.length; i++) {
			var mem = from.members[i];
			var notImplemented = true;
			var check = this.getMember(mem.name);
			if (check != null) {
				if (check.hasFlag("override") || mem.abstract) {
					notImplemented = false;
					}
				}
			if (notImplemented) {
				if (mem.abstract) {
					this.buildError("Class '" + this.route + "' must implement the abstract member '" + mem.name + "'");
					}else{
						var member = this.makeMember(from, mem.raw);
						member.inheritedFrom = from;
						if (from.route == "everything") {
							var castMethod = member;
							castMethod.simpleNative = true;
							}
						this.members.push(member);
					}
				}else{
					if (mem.abstract) {
						if (mem.type != check.type) {
							this.buildError("Abstract " + check.type + " '" + check.name + "' must be a " + mem.type + " in class '" + this.route + "'");
							}
						if (mem.output.check(check.output) == false) {
							this.buildError("Invalid output type for abstract member '" + check.name + "' in class '" + this.route + "'");
							}
						if (mem.type == "method") {
							var memCast = mem;
							var checkCast = check;
							var checks = [];
							for (var c = 0; c < checkCast.arguments.length; c++) {
								checks.push(checkCast.arguments[c].type);
								}
							if (memCast.check(checks) == false) {
								this.buildError("Invalid argument type(s) for abstract method '" + check.name + "' in class '" + this.route + "'");
								}
							}
						}
				}
			}
	}
}

Carbonite.Class.prototype.buildDefaultTemplates = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			template.build();
			}
		this.buildInheritance();
	}
}

Carbonite.Class.prototype.extend = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var from = arguments[0];
		this.inherit(from);
	}
}

Carbonite.Class.prototype.hasTemplate = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			if (template.name == name) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Class.prototype.getResolvedTemplate = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			if (template.name == name) {
				return this.resolvedTemplates[i];
				}
			}
		return null;
	}
}

Carbonite.Class.prototype.getTemplate = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			if (template.name == name) {
				return template;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Class.prototype.getChild = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var cast = this;
		for (var i = 0; i < cast.children.length; i++) {
			var child = cast.children[i];
			if (child.name == name) {
				return child;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Class.prototype.hasChild = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var cast = this;
		for (var i = 0; i < cast.children.length; i++) {
			var child = cast.children[i];
			if (child.name == name) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Class.prototype.docDynamic = function () {
	if (arguments.length == 0) {
		var inherits = [];
		for (var i = 0; i < this.inherits.length; i++) {
			inherits.push("\"" + this.inherits[i].route + "\"");
			}
		var members = [];
		for (var i = 0; i < this.members.length; i++) {
			members.push(this.members[i].docDynamic());
			}
		var output = "{\"type\": \"class\", route: \"" + this.route + "\", name: \"" + this.name + "\", \"doc\": \"" + this.doc.docDynamic() + "\", \"inherits\": [" + inherits.join(",") + "], \"members\": [" + members.join(",") + "]}";
		return output;
	}
}

Carbonite.Class.prototype.canCast = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var to = arguments[0];
		for (var i = 0; i < this.members.length; i++) {
			if (this.members[i].name == "@cast") {
				if (this.members[i].output.reference.route == to.route) {
					return true;
					}
				}
			}
		return false;
	}
}

Carbonite.Class.prototype.fillFromHeader = function () {
	if (arguments.length == 0) {
		if ("raw" in this.headerData) {
			return null;
			}
		var members = this.headerData["members"];
		var inherits = this.headerData["inherits"];
		for (var i = 0; i < members.length; i++) {
			this.members.push(Carbonite.Member.fromHeader(this, members[i]));
			}
		for (var i = 0; i < inherits.length; i++) {
			var inheritClass = this.compiler.getClass(inherits[i]);
			if (inheritClass.isFromHeader == false) {
				this.inherits.push(inheritClass);
				}else{
					inheritClass.descendants.push(this);
					this.headerInherits.push(inheritClass);
				}
			}
	}
}

Carbonite.Class.fromHeader = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var compiler = arguments[0];
		var data = arguments[1];
		var cls = new Carbonite.Class();
		var templates = data["templates"];
		cls.flags = data["flags"];
		cls.flags.push("relative");
		cls.base = data["base"];
		cls.route = data["route"];
		cls.name = data["name"];
		if ("raw" in data) {
			cls.loadFromRaw(data["raw"]);
			cls.isFromHeader = true;
			cls.headerData = data;
			cls.compiler = compiler;
			}else{
				cls.headerData = data;
				cls.compiler = compiler;
				cls.isFromHeader = true;
			}
		return cls;
	}
}

Carbonite.Class.prototype.toHeader = function () {
	if (arguments.length == 0) {
		var inherits = [];
		for (var i = 0; i < this.inherits.length; i++) {
			inherits.push("\"" + this.inherits[i].route + "\"");
			}
		var members = [];
		for (var i = 0; i < this.members.length; i++) {
			if (this.members[i].inheritedFrom != null) {
				if (this.members[i].inheritedFrom.route == "everything") {
					continue;
					}
				}
			members.push(this.members[i].toHeader());
			}
		var raw = "";
		if (this.hasFlag("header")) {
			raw = ", \"raw\": " + JSON.stringify(this.raw);
			}
		var flags = [];
		for (var i = 0; i < this.flags.length; i++) {
			flags.push("\"" + this.flags[i] + "\"");
			}
		var temps = [];
		for (var i = 0; i < this.templates.length; i++) {
			var def = "";
			if (this.templates[i].default != null) {
				var temp = this.templates[i];
				def = ", \"default\": " + temp.default.toHeader();
				}
			temps.push("{\"name\": \"" + this.templates[i].name + "\"" + def + "}");
			}
		return "{\"type\": \"class\", \"base\": \"" + this.base + "\", \"flags\": [" + flags.join(",") + "], \"templates\": [" + temps.join(",") + "], \"route\": \"" + this.route + "\", \"name\": \"" + this.name + "\", \"inherits\": [" + inherits.join(",") + "], \"members\": [" + members.join(",") + "]" + raw + "}";
	}
}

Carbonite.Class.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Class.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Class.prototype.toCarbideValue = function () {
	if (arguments.length == 0) {
		return carbide_proxy_Carbonite_Class.create(this);
		return carbide_proxy_Carbonite_Class.create(this);
	}
}

Carbonite.OverloadInfo = function () {
	this.method = null;

	this.casts = [];

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var method = arguments[0];
		this.method = method;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var method = arguments[0];
		var casts = arguments[1];
		this.method = method;
		this.casts = casts;
	}

}

Carbonite.OverloadCast = function () {
	this.index = 0;

	this.cast = null;

	if (arguments.length == 2 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var index = arguments[0];
		var cast = arguments[1];
		this.index = index;
		this.cast = cast;
	}

}

Carbonite.Doc = function () {
	this.raw = [];

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (raw != null) {
			for (var i = 0; i < raw.length; i++) {
				this.raw.push(raw[i]);
				}
			}
	}

}

Carbonite.Doc.prototype.docDynamic = function () {
	if (arguments.length == 0) {
		var output = "";
		for (var i = 0; i < this.raw.length; i++) {
			output += this.raw[i].replace(/(["\n\r])/g,function (char) {if (char == '"') return '\\"'; else return "\\n";});
			}
		return output;
	}
}

Carbonite.Doc.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Doc.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.NamedHack = function () {
	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;


}

Carbonite.NamedHack.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.NamedHack.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Named = function () {
	this.route = "";

	this.name = "";

	this.leveled = false;

	this.compiler = null;

	this.children = [];

	this.parent = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;


}

Carbonite.Named.prototype.getChild = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var cast = this;
		for (var i = 0; i < cast.children.length; i++) {
			var child = cast.children[i];
			if (child.name == name) {
				return child;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Named.prototype.hasChild = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var cast = this;
		for (var i = 0; i < cast.children.length; i++) {
			var child = cast.children[i];
			if (child.name == name) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Named.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Named.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Member = function () {
	this.binding = "bound";

	this.visibility = "public";

	this.inheritedFrom = null;

	this.doc = null;

	this.name = "";

	this.output = null;

	this.flags = [];

	this.attributes = null;

	this.parent = null;

	this.abstract = false;

	this.type = "";

	this.raw = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		this.parent = parent;
		if (raw == null) {

			}else{
				this.raw = raw;
				this.doc = new Carbonite.Doc(this.raw["doc"]);
				this.attributes = raw["attribute"];
				if (this.attributes == null) {
					this.attributes = [];
					}
				this.loadLocation(location, this.raw);
				this.name = this.raw["name"];
				this.output = new Carbonite.Type(parent.compiler, parent);
				var rawOutput = this.raw["output"];
				if (rawOutput["name"] == "function") {
					if (raw["type"] == "method") {
						rawOutput = rawOutput["template"][0];
						}
					}else if (rawOutput["name"] == null) {
					this.buildError("No output type provided for member '" + raw["flags"][0] + "' in class '" + parent.route + "'");
					}
				this.output.loadFromRaw(rawOutput);
				var flags = raw["flags"];
				for (var i = flags.length - 1;i >= 0;i--) {
					var flag = flags[i];
					if (flag == "fixed") {
						this.binding = "fixed";
						}else if (flag == "private") {
						this.visibility = "private";
						}else if (flag == "protected") {
						this.visibility = "protected";
						}else if ((flag != "bound") && (flag != "public")) {
						this.flags.push(flag);
						}
					}
				this.build(location);
			}
	}

}

Carbonite.Member.prototype.getAttributes = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var key = arguments[0];
		var found = [];
		for (var i = 0; i < this.attributes.length; i++) {
			var a = this.attributes[i];
			if (a["key"] == key) {
				found.push(a);
				}
			}
		return found;
	}
}

Carbonite.Member.makeReference = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Member || (arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || (arguments[1] instanceof Carbonite.Members.Property)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Type || (arguments[2] instanceof Carbonite.ReferenceType)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var mem = arguments[1];
		var ctx = arguments[2];
		var rtn = null;
		if (mem.type == "property") {
			rtn = new Carbonite.Members.ReferenceProperty(mem, ctx);
			}else{
				rtn = new Carbonite.Members.ReferenceMethod(mem, ctx);
			}
		return rtn;
	}
}

Carbonite.Member.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		return Carbonite.Member.make(parent, parent, raw);
	}
else 	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "method") {
			rtn = new Carbonite.Members.Method(parent, location, raw);
			rtn.type = "method";
			}else if (type == "property") {
			rtn = new Carbonite.Members.Property(parent, location, raw);
			rtn.type = "property";
			}else if (type == "operator") {
			rtn = new Carbonite.Members.Operator(parent, location, raw);
			rtn.type = "operator";
			var cast = rtn;
			parent.compiler.operatorOrders[cast.operator] = cast.order;
			}
		return rtn;
	}
}

Carbonite.Member.prototype.build = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];

	}
}

Carbonite.Member.prototype.checkName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return this.name == name;
	}
}

Carbonite.Member.prototype.hasFlag = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var flag = arguments[0];
		for (var i = 0; i < this.flags.length; i++) {
			var cur = this.flags[i];
			if (cur == flag) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Member.prototype.extraDocDynamic = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Member.prototype.docDynamic = function () {
	if (arguments.length == 0) {
		var extra = this.extraDocDynamic();
		if (extra != null) {
			extra = ", " + extra;
			}else{
				extra = "";
			}
		return "{\"type\": \"" + this.type + "\", \"name\": \"" + this.name + "\", \"doc\": \"" + this.doc.docDynamic() + "\", \"output\": \"" + this.output.lookPretty() + "\"" + extra + "}";
	}
}

Carbonite.Member.fromHeader = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var type = data["type"];
		if (type == "method") {
			return Carbonite.Members.Method.fromHeader(parent, data);
			}else if (type == "property") {
			return Carbonite.Members.Property.fromHeader(parent, data);
			}
	}
}

Carbonite.Member.prototype.getHeaderFlags = function () {
	if (arguments.length == 0) {
		var flags = "";
		if (this.flags.length > 0) {
			var flgs = [];
			for (var i = 0; i < this.flags.length; i++) {
				flgs.push("\"" + this.flags[i] + "\"");
				}
			flags = "\"flags\": [" + flgs.join(", ") + "], ";
			}
		return flags;
	}
}

Carbonite.Member.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Member.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.ReferenceMember = function () {
	this.type = "";

	this.output = null;


}

Carbonite.Members.Method = function () {
	this.body = null;

	this.arguments = [];

	this.variadic = false;

	this.simpleNative = false;

	this.nativeBlock = null;

	this.binding = "bound";

	this.visibility = "public";

	this.inheritedFrom = null;

	this.doc = null;

	this.name = "";

	this.output = null;

	this.flags = [];

	this.attributes = null;

	this.parent = null;

	this.abstract = false;

	this.type = "";

	this.raw = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		this.parent = parent;
		if (raw == null) {

			}else{
				this.raw = raw;
				this.doc = new Carbonite.Doc(this.raw["doc"]);
				this.attributes = raw["attribute"];
				if (this.attributes == null) {
					this.attributes = [];
					}
				this.loadLocation(location, this.raw);
				this.name = this.raw["name"];
				this.output = new Carbonite.Type(parent.compiler, parent);
				var rawOutput = this.raw["output"];
				if (rawOutput["name"] == "function") {
					if (raw["type"] == "method") {
						rawOutput = rawOutput["template"][0];
						}
					}else if (rawOutput["name"] == null) {
					this.buildError("No output type provided for member '" + raw["flags"][0] + "' in class '" + parent.route + "'");
					}
				this.output.loadFromRaw(rawOutput);
				var flags = raw["flags"];
				for (var i = flags.length - 1;i >= 0;i--) {
					var flag = flags[i];
					if (flag == "fixed") {
						this.binding = "fixed";
						}else if (flag == "private") {
						this.visibility = "private";
						}else if (flag == "protected") {
						this.visibility = "protected";
						}else if ((flag != "bound") && (flag != "public")) {
						this.flags.push(flag);
						}
					}
				this.build(location);
			}
	}

}

Carbonite.Members.Method.prototype.getReference = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbonite.Members.Method.prototype.hasOverload = function () {
	if (arguments.length == 0) {
		return this.parent.getMethods(this.name).length > 1;
	}
}

Carbonite.Members.Method.evaluate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var parent = arguments[1];
		var output = CarboniteCarbonParser.parse("Any_Member", raw);
		if (output.hadError) {
			parent.compiler.status.give(Carbonite.Notice.fromParser(parent.source, output));
			}else{
				var method = Carbonite.Member.make(parent, output.data["data"]);
				if (method.hasFlag("destroy")) {
					parent.destroyMembers(method.name);
					}
				parent.members.push(method);
				if (parent.compiler.currentLevel >= 3) {
					var cast = method;
					cast.buildBody();
					}
				return method;
			}
	}
}

Carbonite.Members.Method.prototype.checkExpressions = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parameters = arguments[0];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return false;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.check(parameter.output) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Members.Method.prototype.check = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parameters = arguments[0];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return false;
				}
			if (this.arguments.length > parameters.length) {
				return false;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.checkCast(parameter) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Members.Method.prototype.checkWithCast = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parameters = arguments[0];
		var output = [];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return output;
				}
			if (this.arguments.length > parameters.length) {
				return output;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.checkCast(parameter) == false) {
				var found = parameter.reference.findCastFor(argument.type);
				if (found != null) {
					output.push(new Carbonite.OverloadCast(i, found));
					}
				}
			}
		return output;
	}
}

Carbonite.Members.Method.prototype.checkWithContext = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parameters = arguments[0];
		var context = arguments[1];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return false;
				}
			if (this.arguments.length > parameters.length) {
				return false;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.checkWithContext(context, parameter) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Members.Method.prototype.buildBody = function () {
	if (arguments.length == 0) {
		if (this.abstract) {
			return null;
			}
		if (this.body != null) {
			this.body.build();
			if (this.hasFlag("native")) {
				if (this.body.statements.length == 1) {
					var state = this.body.statements[0];
					if (state.type == "return") {
						this.simpleNative = true;
						}
					}
				}
			}
	}
}

Carbonite.Members.Method.prototype.build = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
		var type = this.raw["value"]["body"]["type"];
		if (type == "interface") {
			this.abstract = true;
			}else{
				var states = this.raw["value"]["body"]["code"];
				if (this.hasFlag("native") && states.length > 0 && states[0]["type"] != "return") {

					}else{
						this.body = new Carbonite.Body(this, location, this.raw["value"]["body"]);
						var ownType = new Carbonite.Type(this.parent.compiler, this.parent);
						ownType.loadFromName(this.parent.route, this.raw);
						ownType.reference = this.parent;
						ownType.containsReference = true;
						var thisName = "this";
						var defThis = new Carbonite.Define(thisName, ownType);
						defThis.isLocal = false;
						if ((this.binding == "fixed") && (this.name != "@construct")) {
							defThis.isConstantReference = true;
							}
						this.body.scope.add(defThis);
						if (this.hasFlag("native")) {
							var cc = new Carbonite.Type(this.parent.compiler, this.parent);
							cc.loadFromName("Carbon.Context", this.raw);
							var cStr = "context";
							var context = new Carbonite.Define(cStr, cc);
							this.body.scope.add(context);
							}
					}
				if (this.name == "@index") {
					var attrs = this.getAttributes("name");
					if (attrs.length == 0) {
						var nameAttr = {};
						nameAttr["key"] = "name";
						nameAttr["value"] = "atIndex";
						this.attributes.push(nameAttr);
						}
					}
			}
		var ___arguments = this.raw["value"]["parameters"];
		for (var i = 0; i < ___arguments.length; i++) {
			var argument = ___arguments[i];
			this.arguments.push(new Carbonite.Argument(this.parent.compiler, this.parent, this.body, argument));
			}
	}
}

Carbonite.Members.Method.prototype.stringify = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var ctx = arguments[0];
		var term = arguments[1];
		if (term.type == "expression") {
			var exp = term;
			return this.concat(ctx, exp.expression.first, exp.expression.last);
			}else if (term.type == "literal") {
			var lit = term;
			var native = lit.native;
			return native.value;
			}else if (term.type == "sequence") {
			var seq = term;
			var level = 0;
			for (var i = 0; i < seq.parts.length; i++) {
				var part = seq.parts[i];
				if (part.type == "reference") {
					var c = part;
					if (c.reference.name == "context") {
						level = 1;
						}
					}else if (part.type == "dot") {
					var dot = part;
					if (level == 1) {
						if (dot.text == "instance") {
							return ctx.instance;
							}else if (dot.text == "type") {
							return ctx.type;
							}else if (dot.text == "arguments") {
							level = 2;
							}else if (dot.text == "templates") {
							level = 3;
							}
						}
					}else if (part.type == "index") {
					if (level == 3) {
						var idx = part;
						var lit = idx.argument.first;
						var it = lit.native;
						var str = ctx.templates[it.value];
						return str;
						}else{
							var idx = part;
							var lit = idx.argument.first;
							var it = lit.native;
							var str = ctx.arguments[it.value];
							return str;
						}
					}
				}
			}
	}
}

Carbonite.Members.Method.prototype.concat = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Term || (arguments[2] instanceof Carbonite.Terms.Literal) || (arguments[2] instanceof Carbonite.Terms.Expression) || (arguments[2] instanceof Carbonite.Terms.Sequence) || (arguments[2] instanceof Carbonite.Terms.Prefix) || (arguments[2] instanceof Carbonite.Terms.Function)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var ctx = arguments[0];
		var head = arguments[1];
		var tail = arguments[2];
		var last = "";
		if (tail != null) {
			last = this.stringify(ctx, tail);
			}
		return this.stringify(ctx, head) + last;
	}
}

Carbonite.Members.Method.prototype.generate = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var ctx = arguments[0];
		if (this.simpleNative) {
			var ret = this.body.statements[0];
			return this.concat(ctx, ret.expression.first, ret.expression.last);
			}else{
				if (this.nativeBlock == null) {
					var blockMap = this.raw["value"]["body"]["code"];
					this.nativeBlock = Carbide.Languages.Carbon.virtualizeIntoProcessor(this.parent.source.file + " native carbon script", JSON.parse(JSON.stringify(blockMap)), this.parent.source.parent.buildScript);
					}
				ctx.reference = this.output.reference;
				var proc = this.parent.source.parent.buildScript;
				var scope = new Carbide.Virtual.Scope(proc);
				scope.setParentScope(proc.scope);
				scope.addVariable(new Carbide.Virtual.Variable("context", ctx.toCarbideValue()));
				try {
					this.nativeBlock.run(scope);
				} catch (_carb_catch_var) {
					if (_carb_catch_var instanceof Error || typeof _carb_catch_var == 'undefined' || _carb_catch_var === null) {
						var e = _carb_catch_var;

					}
				}
				if (proc.hadError) {
					var baseNotice = proc.notices[0];
					var notice = new Carbonite.Notice(baseNotice.message);
					notice.start = new Carbonite.Location(0, 0, baseNotice.start);
					notice.end = new Carbonite.Location(0, 0, baseNotice.end);
					notice.module = "Script";
					notice.type = "Runtime";
					notice.source = this.parent.source;
					this.parent.source.parent.status.give(notice);
					throw new Error("Execution error");
					}else{
						var str = scope.search("functionReturn");
						if (str == null) {
							this.buildError("Expected string output from native method");
							}else{
								var cast = str.value;
								return cast.value;
							}
					}
			}
	}
}

Carbonite.Members.Method.prototype.getCastName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prefix = arguments[0];
		var nme = "to" + this.output.reference.route.replace(new RegExp(".".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "");
		if (this.parent.hasMember(nme)) {
			return this.getCastName("_" + prefix);
			}
		return nme;
	}
}

Carbonite.Members.Method.prototype.getRealName = function () {
	if (arguments.length == 0) {
		if (this.name == "@index") {
			var attrs = this.getAttributes("name");
			var key = attrs[0];
			var attr = key["value"];
			return attr;
			}else if (this.name == "@cast") {
			return this.getCastName("");
			}
		return this.name;
	}
}

Carbonite.Members.Method.prototype.docDynamic = function () {
	if (arguments.length == 0) {
		var args = [];
		for (var i = 0; i < this.arguments.length; i++) {
			var arg = this.arguments[i];
			args.push(arg.docDynamic());
			}
		return "{\"type\": \"method\", \"name\": \"" + this.name + "\", \"doc\": \"" + this.doc.docDynamic() + "\", \"output\": \"" + this.output.lookPretty() + "\", \"arguments\": [" + args.join(",") + "]}";
	}
}

Carbonite.Members.Method.fromHeader = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var method = new Carbonite.Members.Method(parent, parent, null);
		method.type = "method";
		method.name = data["name"];
		method.binding = data["binding"];
		if ("flags" in data) {
			var flags = data["flags"];
			for (var i = 0; i < flags.length; i++) {
				method.flags.push(flags[i]);
				}
			}
		method.output = new Carbonite.Type(parent.compiler, parent);
		method.output.loadFromRaw(data["output"]);
		var args = data["arguments"];
		for (var i = 0; i < args.length; i++) {
			method.arguments.push(Carbonite.Argument.fromHeader(parent, args[i]));
			}
		return method;
	}
}

Carbonite.Members.Method.prototype.toHeader = function () {
	if (arguments.length == 0) {
		var args = [];
		for (var i = 0; i < this.arguments.length; i++) {
			var arg = this.arguments[i];
			args.push(arg.toHeader());
			}
		return "{\"type\": \"method\", \"binding\": \"" + this.binding + "\", \"name\": \"" + this.name + "\", " + this.getHeaderFlags() + " \"output\": " + this.output.toHeader() + ", \"arguments\": [" + args.join(",") + "]}";
	}
}

Carbonite.Members.Method.prototype.getAttributes = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var key = arguments[0];
		var found = [];
		for (var i = 0; i < this.attributes.length; i++) {
			var a = this.attributes[i];
			if (a["key"] == key) {
				found.push(a);
				}
			}
		return found;
	}
}

Carbonite.Members.Method.makeReference = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Member || (arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || (arguments[1] instanceof Carbonite.Members.Property)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Type || (arguments[2] instanceof Carbonite.ReferenceType)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var mem = arguments[1];
		var ctx = arguments[2];
		var rtn = null;
		if (mem.type == "property") {
			rtn = new Carbonite.Members.ReferenceProperty(mem, ctx);
			}else{
				rtn = new Carbonite.Members.ReferenceMethod(mem, ctx);
			}
		return rtn;
	}
}

Carbonite.Members.Method.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		return Carbonite.Member.make(parent, parent, raw);
	}
else 	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "method") {
			rtn = new Carbonite.Members.Method(parent, location, raw);
			rtn.type = "method";
			}else if (type == "property") {
			rtn = new Carbonite.Members.Property(parent, location, raw);
			rtn.type = "property";
			}else if (type == "operator") {
			rtn = new Carbonite.Members.Operator(parent, location, raw);
			rtn.type = "operator";
			var cast = rtn;
			parent.compiler.operatorOrders[cast.operator] = cast.order;
			}
		return rtn;
	}
}

Carbonite.Members.Method.prototype.checkName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return this.name == name;
	}
}

Carbonite.Members.Method.prototype.hasFlag = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var flag = arguments[0];
		for (var i = 0; i < this.flags.length; i++) {
			var cur = this.flags[i];
			if (cur == flag) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Members.Method.prototype.extraDocDynamic = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Members.Method.prototype.getHeaderFlags = function () {
	if (arguments.length == 0) {
		var flags = "";
		if (this.flags.length > 0) {
			var flgs = [];
			for (var i = 0; i < this.flags.length; i++) {
				flgs.push("\"" + this.flags[i] + "\"");
				}
			flags = "\"flags\": [" + flgs.join(", ") + "], ";
			}
		return flags;
	}
}

Carbonite.Members.Method.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Members.Method.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Members.ReferenceMethod = function () {
	this.reference = null;

	this.context = null;

	this.type = "";

	this.output = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var reference = arguments[0];
		var context = arguments[1];
		this.reference = reference;
		this.output = this.reference.output.getWithContext(context);
		this.context = context;
		this.type = reference.type;
	}

}

Carbonite.Members.ReferenceMethod.prototype.getReference = function () {
	if (arguments.length == 0) {
		return this.reference;
	}
}

Carbonite.Members.ReferenceMethod.prototype.check = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parameters = arguments[0];
		if (this.reference.variadic == false) {
			if (parameters.length > this.reference.arguments.length) {
				return false;
				}
			}
		for (var i = 0; i < this.reference.arguments.length; i++) {
			var argument = this.reference.arguments[i];
			var parameter = parameters[i];
			if (argument.type.checkWithContext(this.context, parameter) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Members.Property = function () {
	this.default = null;

	this.reference = false;

	this.binding = "bound";

	this.visibility = "public";

	this.inheritedFrom = null;

	this.doc = null;

	this.name = "";

	this.output = null;

	this.flags = [];

	this.attributes = null;

	this.parent = null;

	this.abstract = false;

	this.type = "";

	this.raw = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		this.parent = parent;
		if (raw == null) {

			}else{
				this.raw = raw;
				this.doc = new Carbonite.Doc(this.raw["doc"]);
				this.attributes = raw["attribute"];
				if (this.attributes == null) {
					this.attributes = [];
					}
				this.loadLocation(location, this.raw);
				this.name = this.raw["name"];
				this.output = new Carbonite.Type(parent.compiler, parent);
				var rawOutput = this.raw["output"];
				if (rawOutput["name"] == "function") {
					if (raw["type"] == "method") {
						rawOutput = rawOutput["template"][0];
						}
					}else if (rawOutput["name"] == null) {
					this.buildError("No output type provided for member '" + raw["flags"][0] + "' in class '" + parent.route + "'");
					}
				this.output.loadFromRaw(rawOutput);
				var flags = raw["flags"];
				for (var i = flags.length - 1;i >= 0;i--) {
					var flag = flags[i];
					if (flag == "fixed") {
						this.binding = "fixed";
						}else if (flag == "private") {
						this.visibility = "private";
						}else if (flag == "protected") {
						this.visibility = "protected";
						}else if ((flag != "bound") && (flag != "public")) {
						this.flags.push(flag);
						}
					}
				this.build(location);
			}
	}

}

Carbonite.Members.Property.evaluate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var parent = arguments[1];
		var output = CarboniteCarbonParser.parse("Any_Member", raw);
		if (output.hadError) {
			parent.compiler.status.give(Carbonite.Notice.fromParser(parent.source, output));
			}else{
				var property = Carbonite.Member.make(parent, output.data["data"]);
				if (property.hasFlag("destroy")) {
					parent.destroyMembers(property.name);
					}
				parent.members.push(property);
				if (parent.compiler.currentLevel >= 3) {
					var cast = property;
					cast.buildDefault();
					}
				return property;
			}
	}
}

Carbonite.Members.Property.prototype.buildDefault = function () {
	if (arguments.length == 0) {
		var type = this.raw["value"]["type"];
		if (type == "interface") {
			this.abstract = true;
			}else{
				if (this.parent.propertyContext == null) {
					this.parent.setupPropertyContext();
					}
				this.default = new Carbonite.Expression(this.parent, this.parent.propertyContext);
				this.default.loadFromRaw(this.raw["value"]["value"]);
			}
	}
}

Carbonite.Members.Property.prototype.build = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];

	}
}

Carbonite.Members.Property.prototype.docDynamic = function () {
	if (arguments.length == 0) {
		return "{\"type\": \"property\", \"name\": \"" + this.name + "\", \"doc\": \"" + this.doc.docDynamic() + "\", \"output\": \"" + this.output.lookPretty() + "\"}";
	}
}

Carbonite.Members.Property.prototype.toHeader = function () {
	if (arguments.length == 0) {
		return "{\"type\": \"property\", \"binding\": \"" + this.binding + "\", \"name\": \"" + this.name + "\", " + this.getHeaderFlags() + " \"output\": " + this.output.toHeader() + "}";
	}
}

Carbonite.Members.Property.fromHeader = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var property = new Carbonite.Members.Property(parent, parent, null);
		property.type = "property";
		property.name = data["name"];
		property.binding = data["binding"];
		if ("flags" in data) {
			var flags = data["flags"];
			for (var i = 0; i < flags.length; i++) {
				property.flags.push(flags[i]);
				}
			}
		property.output = new Carbonite.Type(parent.compiler, parent);
		property.output.loadFromRaw(data["output"]);
		return property;
	}
}

Carbonite.Members.Property.prototype.getAttributes = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var key = arguments[0];
		var found = [];
		for (var i = 0; i < this.attributes.length; i++) {
			var a = this.attributes[i];
			if (a["key"] == key) {
				found.push(a);
				}
			}
		return found;
	}
}

Carbonite.Members.Property.makeReference = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Member || (arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || (arguments[1] instanceof Carbonite.Members.Property)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Type || (arguments[2] instanceof Carbonite.ReferenceType)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var mem = arguments[1];
		var ctx = arguments[2];
		var rtn = null;
		if (mem.type == "property") {
			rtn = new Carbonite.Members.ReferenceProperty(mem, ctx);
			}else{
				rtn = new Carbonite.Members.ReferenceMethod(mem, ctx);
			}
		return rtn;
	}
}

Carbonite.Members.Property.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		return Carbonite.Member.make(parent, parent, raw);
	}
else 	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "method") {
			rtn = new Carbonite.Members.Method(parent, location, raw);
			rtn.type = "method";
			}else if (type == "property") {
			rtn = new Carbonite.Members.Property(parent, location, raw);
			rtn.type = "property";
			}else if (type == "operator") {
			rtn = new Carbonite.Members.Operator(parent, location, raw);
			rtn.type = "operator";
			var cast = rtn;
			parent.compiler.operatorOrders[cast.operator] = cast.order;
			}
		return rtn;
	}
}

Carbonite.Members.Property.prototype.checkName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return this.name == name;
	}
}

Carbonite.Members.Property.prototype.hasFlag = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var flag = arguments[0];
		for (var i = 0; i < this.flags.length; i++) {
			var cur = this.flags[i];
			if (cur == flag) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Members.Property.prototype.extraDocDynamic = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Members.Property.prototype.getHeaderFlags = function () {
	if (arguments.length == 0) {
		var flags = "";
		if (this.flags.length > 0) {
			var flgs = [];
			for (var i = 0; i < this.flags.length; i++) {
				flgs.push("\"" + this.flags[i] + "\"");
				}
			flags = "\"flags\": [" + flgs.join(", ") + "], ";
			}
		return flags;
	}
}

Carbonite.Members.Property.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Members.Property.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Members.ReferenceProperty = function () {
	this.reference = null;

	this.context = null;

	this.type = "";

	this.output = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Members.Property) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var reference = arguments[0];
		var context = arguments[1];
		this.reference = reference;
		this.context = context;
		this.output = this.reference.output.getWithContext(context);
		this.type = reference.type;
	}

}

Carbonite.Members.Operator = function () {
	this.prefix = false;

	this.operator = "";

	this.order = 0;

	this.realName = "";

	this.body = null;

	this.arguments = [];

	this.variadic = false;

	this.simpleNative = false;

	this.nativeBlock = null;

	this.binding = "bound";

	this.visibility = "public";

	this.inheritedFrom = null;

	this.doc = null;

	this.name = "";

	this.output = null;

	this.flags = [];

	this.attributes = null;

	this.parent = null;

	this.abstract = false;

	this.type = "";

	this.raw = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		this.parent = parent;
		if (raw == null) {

			}else{
				this.raw = raw;
				this.doc = new Carbonite.Doc(this.raw["doc"]);
				this.attributes = raw["attribute"];
				if (this.attributes == null) {
					this.attributes = [];
					}
				this.loadLocation(location, this.raw);
				this.name = this.raw["name"];
				this.output = new Carbonite.Type(parent.compiler, parent);
				var rawOutput = this.raw["output"];
				if (rawOutput["name"] == "function") {
					if (raw["type"] == "method") {
						rawOutput = rawOutput["template"][0];
						}
					}else if (rawOutput["name"] == null) {
					this.buildError("No output type provided for member '" + raw["flags"][0] + "' in class '" + parent.route + "'");
					}
				this.output.loadFromRaw(rawOutput);
				var flags = raw["flags"];
				for (var i = flags.length - 1;i >= 0;i--) {
					var flag = flags[i];
					if (flag == "fixed") {
						this.binding = "fixed";
						}else if (flag == "private") {
						this.visibility = "private";
						}else if (flag == "protected") {
						this.visibility = "protected";
						}else if ((flag != "bound") && (flag != "public")) {
						this.flags.push(flag);
						}
					}
				this.build(location);
			}
	}

}

Carbonite.Members.Operator.prototype.getRealName = function () {
	if (arguments.length == 0) {
		return this.realName;
	}
}

Carbonite.Members.Operator.prototype.checkName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return this.name == name || this.realName == name;
	}
}

Carbonite.Members.Operator.prototype.getReference = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbonite.Members.Operator.prototype.hasOverload = function () {
	if (arguments.length == 0) {
		return this.parent.getMethods(this.name).length > 1;
	}
}

Carbonite.Members.Operator.evaluate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var parent = arguments[1];
		var output = CarboniteCarbonParser.parse("Any_Member", raw);
		if (output.hadError) {
			parent.compiler.status.give(Carbonite.Notice.fromParser(parent.source, output));
			}else{
				var method = Carbonite.Member.make(parent, output.data["data"]);
				if (method.hasFlag("destroy")) {
					parent.destroyMembers(method.name);
					}
				parent.members.push(method);
				if (parent.compiler.currentLevel >= 3) {
					var cast = method;
					cast.buildBody();
					}
				return method;
			}
	}
}

Carbonite.Members.Operator.prototype.checkExpressions = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parameters = arguments[0];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return false;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.check(parameter.output) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Members.Operator.prototype.check = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parameters = arguments[0];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return false;
				}
			if (this.arguments.length > parameters.length) {
				return false;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.checkCast(parameter) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Members.Operator.prototype.checkWithCast = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parameters = arguments[0];
		var output = [];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return output;
				}
			if (this.arguments.length > parameters.length) {
				return output;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.checkCast(parameter) == false) {
				var found = parameter.reference.findCastFor(argument.type);
				if (found != null) {
					output.push(new Carbonite.OverloadCast(i, found));
					}
				}
			}
		return output;
	}
}

Carbonite.Members.Operator.prototype.checkWithContext = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parameters = arguments[0];
		var context = arguments[1];
		if (this.variadic == false) {
			if (parameters.length > this.arguments.length) {
				return false;
				}
			if (this.arguments.length > parameters.length) {
				return false;
				}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var argument = this.arguments[i];
			var parameter = parameters[i];
			if (argument.type.checkWithContext(context, parameter) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Members.Operator.prototype.buildBody = function () {
	if (arguments.length == 0) {
		if (this.abstract) {
			return null;
			}
		if (this.body != null) {
			this.body.build();
			if (this.hasFlag("native")) {
				if (this.body.statements.length == 1) {
					var state = this.body.statements[0];
					if (state.type == "return") {
						this.simpleNative = true;
						}
					}
				}
			}
	}
}

Carbonite.Members.Operator.prototype.build = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
		var type = this.raw["value"]["body"]["type"];
		if (type == "interface") {
			this.abstract = true;
			}else{
				var states = this.raw["value"]["body"]["code"];
				if (this.hasFlag("native") && states.length > 0 && states[0]["type"] != "return") {

					}else{
						this.body = new Carbonite.Body(this, location, this.raw["value"]["body"]);
						var ownType = new Carbonite.Type(this.parent.compiler, this.parent);
						ownType.loadFromName(this.parent.route, this.raw);
						ownType.reference = this.parent;
						ownType.containsReference = true;
						var thisName = "this";
						var defThis = new Carbonite.Define(thisName, ownType);
						defThis.isLocal = false;
						if ((this.binding == "fixed") && (this.name != "@construct")) {
							defThis.isConstantReference = true;
							}
						this.body.scope.add(defThis);
						if (this.hasFlag("native")) {
							var cc = new Carbonite.Type(this.parent.compiler, this.parent);
							cc.loadFromName("Carbon.Context", this.raw);
							var cStr = "context";
							var context = new Carbonite.Define(cStr, cc);
							this.body.scope.add(context);
							}
					}
				if (this.name == "@index") {
					var attrs = this.getAttributes("name");
					if (attrs.length == 0) {
						var nameAttr = {};
						nameAttr["key"] = "name";
						nameAttr["value"] = "atIndex";
						this.attributes.push(nameAttr);
						}
					}
			}
		var ___arguments = this.raw["value"]["parameters"];
		for (var i = 0; i < ___arguments.length; i++) {
			var argument = ___arguments[i];
			this.arguments.push(new Carbonite.Argument(this.parent.compiler, this.parent, this.body, argument));
			}
	}
}

Carbonite.Members.Operator.prototype.stringify = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var ctx = arguments[0];
		var term = arguments[1];
		if (term.type == "expression") {
			var exp = term;
			return this.concat(ctx, exp.expression.first, exp.expression.last);
			}else if (term.type == "literal") {
			var lit = term;
			var native = lit.native;
			return native.value;
			}else if (term.type == "sequence") {
			var seq = term;
			var level = 0;
			for (var i = 0; i < seq.parts.length; i++) {
				var part = seq.parts[i];
				if (part.type == "reference") {
					var c = part;
					if (c.reference.name == "context") {
						level = 1;
						}
					}else if (part.type == "dot") {
					var dot = part;
					if (level == 1) {
						if (dot.text == "instance") {
							return ctx.instance;
							}else if (dot.text == "type") {
							return ctx.type;
							}else if (dot.text == "arguments") {
							level = 2;
							}else if (dot.text == "templates") {
							level = 3;
							}
						}
					}else if (part.type == "index") {
					if (level == 3) {
						var idx = part;
						var lit = idx.argument.first;
						var it = lit.native;
						var str = ctx.templates[it.value];
						return str;
						}else{
							var idx = part;
							var lit = idx.argument.first;
							var it = lit.native;
							var str = ctx.arguments[it.value];
							return str;
						}
					}
				}
			}
	}
}

Carbonite.Members.Operator.prototype.concat = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Term || (arguments[2] instanceof Carbonite.Terms.Literal) || (arguments[2] instanceof Carbonite.Terms.Expression) || (arguments[2] instanceof Carbonite.Terms.Sequence) || (arguments[2] instanceof Carbonite.Terms.Prefix) || (arguments[2] instanceof Carbonite.Terms.Function)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var ctx = arguments[0];
		var head = arguments[1];
		var tail = arguments[2];
		var last = "";
		if (tail != null) {
			last = this.stringify(ctx, tail);
			}
		return this.stringify(ctx, head) + last;
	}
}

Carbonite.Members.Operator.prototype.generate = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var ctx = arguments[0];
		if (this.simpleNative) {
			var ret = this.body.statements[0];
			return this.concat(ctx, ret.expression.first, ret.expression.last);
			}else{
				if (this.nativeBlock == null) {
					var blockMap = this.raw["value"]["body"]["code"];
					this.nativeBlock = Carbide.Languages.Carbon.virtualizeIntoProcessor(this.parent.source.file + " native carbon script", JSON.parse(JSON.stringify(blockMap)), this.parent.source.parent.buildScript);
					}
				ctx.reference = this.output.reference;
				var proc = this.parent.source.parent.buildScript;
				var scope = new Carbide.Virtual.Scope(proc);
				scope.setParentScope(proc.scope);
				scope.addVariable(new Carbide.Virtual.Variable("context", ctx.toCarbideValue()));
				try {
					this.nativeBlock.run(scope);
				} catch (_carb_catch_var) {
					if (_carb_catch_var instanceof Error || typeof _carb_catch_var == 'undefined' || _carb_catch_var === null) {
						var e = _carb_catch_var;

					}
				}
				if (proc.hadError) {
					var baseNotice = proc.notices[0];
					var notice = new Carbonite.Notice(baseNotice.message);
					notice.start = new Carbonite.Location(0, 0, baseNotice.start);
					notice.end = new Carbonite.Location(0, 0, baseNotice.end);
					notice.module = "Script";
					notice.type = "Runtime";
					notice.source = this.parent.source;
					this.parent.source.parent.status.give(notice);
					throw new Error("Execution error");
					}else{
						var str = scope.search("functionReturn");
						if (str == null) {
							this.buildError("Expected string output from native method");
							}else{
								var cast = str.value;
								return cast.value;
							}
					}
			}
	}
}

Carbonite.Members.Operator.prototype.getCastName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prefix = arguments[0];
		var nme = "to" + this.output.reference.route.replace(new RegExp(".".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "");
		if (this.parent.hasMember(nme)) {
			return this.getCastName("_" + prefix);
			}
		return nme;
	}
}

Carbonite.Members.Operator.prototype.docDynamic = function () {
	if (arguments.length == 0) {
		var args = [];
		for (var i = 0; i < this.arguments.length; i++) {
			var arg = this.arguments[i];
			args.push(arg.docDynamic());
			}
		return "{\"type\": \"method\", \"name\": \"" + this.name + "\", \"doc\": \"" + this.doc.docDynamic() + "\", \"output\": \"" + this.output.lookPretty() + "\", \"arguments\": [" + args.join(",") + "]}";
	}
}

Carbonite.Members.Operator.fromHeader = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var method = new Carbonite.Members.Method(parent, parent, null);
		method.type = "method";
		method.name = data["name"];
		method.binding = data["binding"];
		if ("flags" in data) {
			var flags = data["flags"];
			for (var i = 0; i < flags.length; i++) {
				method.flags.push(flags[i]);
				}
			}
		method.output = new Carbonite.Type(parent.compiler, parent);
		method.output.loadFromRaw(data["output"]);
		var args = data["arguments"];
		for (var i = 0; i < args.length; i++) {
			method.arguments.push(Carbonite.Argument.fromHeader(parent, args[i]));
			}
		return method;
	}
}

Carbonite.Members.Operator.prototype.toHeader = function () {
	if (arguments.length == 0) {
		var args = [];
		for (var i = 0; i < this.arguments.length; i++) {
			var arg = this.arguments[i];
			args.push(arg.toHeader());
			}
		return "{\"type\": \"method\", \"binding\": \"" + this.binding + "\", \"name\": \"" + this.name + "\", " + this.getHeaderFlags() + " \"output\": " + this.output.toHeader() + ", \"arguments\": [" + args.join(",") + "]}";
	}
}

Carbonite.Members.Operator.prototype.getAttributes = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var key = arguments[0];
		var found = [];
		for (var i = 0; i < this.attributes.length; i++) {
			var a = this.attributes[i];
			if (a["key"] == key) {
				found.push(a);
				}
			}
		return found;
	}
}

Carbonite.Members.Operator.makeReference = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Member || (arguments[1] instanceof Carbonite.Members.Method || (arguments[1] instanceof Carbonite.Members.Operator)) || (arguments[1] instanceof Carbonite.Members.Property)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Type || (arguments[2] instanceof Carbonite.ReferenceType)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var mem = arguments[1];
		var ctx = arguments[2];
		var rtn = null;
		if (mem.type == "property") {
			rtn = new Carbonite.Members.ReferenceProperty(mem, ctx);
			}else{
				rtn = new Carbonite.Members.ReferenceMethod(mem, ctx);
			}
		return rtn;
	}
}

Carbonite.Members.Operator.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		return Carbonite.Member.make(parent, parent, raw);
	}
else 	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "method") {
			rtn = new Carbonite.Members.Method(parent, location, raw);
			rtn.type = "method";
			}else if (type == "property") {
			rtn = new Carbonite.Members.Property(parent, location, raw);
			rtn.type = "property";
			}else if (type == "operator") {
			rtn = new Carbonite.Members.Operator(parent, location, raw);
			rtn.type = "operator";
			var cast = rtn;
			parent.compiler.operatorOrders[cast.operator] = cast.order;
			}
		return rtn;
	}
}

Carbonite.Members.Operator.prototype.hasFlag = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var flag = arguments[0];
		for (var i = 0; i < this.flags.length; i++) {
			var cur = this.flags[i];
			if (cur == flag) {
				return true;
				}
			}
		return false;
	}
}

Carbonite.Members.Operator.prototype.extraDocDynamic = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Members.Operator.prototype.getHeaderFlags = function () {
	if (arguments.length == 0) {
		var flags = "";
		if (this.flags.length > 0) {
			var flgs = [];
			for (var i = 0; i < this.flags.length; i++) {
				flgs.push("\"" + this.flags[i] + "\"");
				}
			flags = "\"flags\": [" + flgs.join(", ") + "], ";
			}
		return flags;
	}
}

Carbonite.Members.Operator.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Members.Operator.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Template = function () {
	this.name = "";

	this.default = null;

	this.optional = false;

	this.type = "class";

	this.parent = null;

	this.raw = null;

	this.index = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Template.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.name = raw["name"];
		if ("default" in raw) {
			this.optional = true;
			}
		this.loadLocation(this.parent, raw);
	}
}

Carbonite.Template.prototype.build = function () {
	if (arguments.length == 0) {
		if (this.optional) {
			this.default = new Carbonite.Type(this.parent.compiler, this.parent);
			this.default.loadFromRaw(this.raw["default"]);
			}
	}
}

Carbonite.Template.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Template.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Template.prototype.toCarbideValue = function () {
	if (arguments.length == 0) {
		return carbide_proxy_Carbonite_Template.create(this);
		return carbide_proxy_Carbonite_Template.create(this);
	}
}

Carbonite.TemplateInstance = function () {
	this.instance = null;

	this.base = null;

	this.templates = [];

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var instance = arguments[0];
		var base = arguments[1];
		this.instance = instance;
		this.base = base;
	}

}

Carbonite.TemplateInstance.prototype.compare = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var type = arguments[0];
		if (type.templates.length != this.templates.length) {
			type.buildError("Illegal template comparison");
			}
		for (var i = 0; i < this.templates.length; i++) {
			var tmp = this.templates[i];
			if (type.late == false && tmp.late == false) {
				if (tmp.reference.route == type.templates[i].reference.route) {
					if (tmp.reference.templates.length > 0) {
						for (var r = 0; r < tmp.reference.instances.length; r++) {
							var inst = tmp.reference.instances[r];
							if (inst.compare(type.templates[i]) == false) {
								return false;
								}
							}
						}
					}else{
						return false;
					}
				}
			}
		return true;
	}
}

Carbonite.Scope = function () {
	this.parent = null;

	this.container = null;

	this.scope = [];

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var parent = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Scope.prototype.add = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Define) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var def = arguments[0];
		this.scope.push(def);
	}
}

Carbonite.Scope.prototype.search = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.scope.length; i++) {
			var ref = this.scope[i];
			if (ref.name == name) {
				return ref;
				}
			}
		if (this.parent != null) {
			return this.parent.search(name);
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Define = function () {
	this.name = "";

	this.output = null;

	this.initializer = null;

	this.container = null;

	this.isConstantReference = false;

	this.blockIndex = 0;

	this.isLocal = true;

	this.outOfScope = true;

	this.reference = false;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var output = arguments[1];
		this.name = name;
		this.output = output;
	}

}

Carbonite.Define.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		var name = raw["name"];
		var initializer = new Carbonite.Expression(container.parent.parent, container);
		initializer.blockIndex = this.blockIndex;
		if ("value" in raw) {
			initializer.loadFromRaw(raw["value"]);
			}else{
				initializer = null;
			}
		var type = new Carbonite.Type(container.parent.parent.compiler, container.parent.parent);
		var auto = raw["auto"];
		if (auto) {
			type = initializer.output;
			}else{
				type.loadFromRaw(raw["valueType"]);
			}
		var rtn = new Carbonite.Define(name, type);
		rtn.initializer = initializer;
		rtn.container = container;
		rtn.loadLocation(container.parent.parent, raw);
		if (container.scope.search(rtn.name) != null) {
			rtn.buildError("'" + rtn.name + "' already defined");
			}
		container.scope.add(rtn);
		rtn.output.ownerDefine = rtn;
		return rtn;
	}
}

Carbonite.Define.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Define.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Function = function () {
	this.parent = null;

	this.output = null;

	this.body = null;

	this.blockIndex = 0;

	this.raw = null;

	this.arguments = [];

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.raw = raw;
		this.parent = parent;
		this.blockIndex = this.parent.relativeParent.blockIndex;
		this.body = new Carbonite.Body(this.parent.container.parent, this.raw["body"]);
		this.body.scope.parent = this.parent.container.scope;
		this.output = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		this.output.loadFromRaw(this.raw["output"]);
		this.body.relativeOutput = this.output;
		var ___arguments = this.raw["parameters"];
		for (var i = 0; i < ___arguments.length; i++) {
			var argument = ___arguments[i];
			this.arguments.push(new Carbonite.Argument(this.parent.parent.compiler, this.parent.parent, this.body, argument));
			}
		this.body.build();
		this.parent.output = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		this.parent.output.loadFromName("function", this.raw);
		this.parent.output.templates.push(this.output);
		for (var i = 0; i < this.arguments.length; i++) {
			this.parent.output.templates.push(this.arguments[i].type);
			}
	}

}

Carbonite.Attribute = function () {
	this.key = "";


}

Carbonite.Body = function () {
	this.scope = null;

	this.blockIndex = 0;

	this.statements = [];

	this.raw = null;

	this.parent = null;

	this.relativeOutput = null;

	this.parentBody = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Member || (arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || (arguments[0] instanceof Carbonite.Members.Property)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.parent = parent;
		this.raw = raw;
		this.loadLocation(parent.parent, raw);
		var emp = null;
		this.scope = new Carbonite.Scope(this, emp);
	}
else 	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Member || (arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || (arguments[0] instanceof Carbonite.Members.Property)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		this.parent = parent;
		this.raw = raw;
		this.loadLocation(location, raw);
		var emp = null;
		this.scope = new Carbonite.Scope(this, emp);
	}
else 	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Member || (arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || (arguments[0] instanceof Carbonite.Members.Property)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Source) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var location = arguments[1];
		var raw = arguments[2];
		this.parent = parent;
		this.raw = raw;
		this.loadLocation(location, raw);
		var emp = null;
		this.scope = new Carbonite.Scope(this, emp);
	}

}

Carbonite.Body.prototype.build = function () {
	if (arguments.length == 0) {
		var statements = this.raw["code"];
		for (var i = 0; i < statements.length; i++) {
			var statement = statements[i];
			var state = Carbonite.Statement.make(this, statement);
			state.loadFromRaw(statement);
			state.blockIndex = i;
			this.statements.push(state);
			}
	}
}

Carbonite.Body.prototype.inherit = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.scope.parent = parent.scope;
		this.relativeOutput = parent.relativeOutput;
		this.parentBody = parent;
	}
}

Carbonite.Body.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Body.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Body.prototype.toCarbideValue = function () {
	if (arguments.length == 0) {
		return carbide_proxy_Carbonite_Body.create(this);
		return carbide_proxy_Carbonite_Body.create(this);
	}
}

Carbonite.Statement = function () {
	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statement.prototype.type = "";

Carbonite.Statement.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statement.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statement.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];

	}
}

Carbonite.Statement.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statement.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statement.prototype.toCarbideValue = function () {
	if (arguments.length == 0) {
		return carbide_proxy_Carbonite_Statement.create(this);
		return carbide_proxy_Carbonite_Statement.create(this);
	}
}

Carbonite.Statements.If = function () {
	this.check = null;

	this.body = null;

	this.alternatives = [];

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.If.prototype.type = "if";

Carbonite.Statements.If.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.check = new Carbonite.Expression(container.parent.parent, container);
		this.check.loadFromRaw(raw["check"]["expression"]);
		this.body = new Carbonite.Body(container.parent, container.source, raw["body"]);
		this.body.inherit(container);
		this.body.build();
		var alternatives = raw["alternatives"];
		for (var i = 0; i < alternatives.length; i++) {
			this.alternatives.push(new Carbonite.Statements.IfAlternative(this, alternatives[i]));
			}
	}
}

Carbonite.Statements.If.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.If.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.If.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.If.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.IfAlternative = function () {
	this.body = null;

	this.check = null;

	this.parent = null;

	this.doCheck = false;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Statements.If) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		this.parent = parent;
		if (type == "elseif") {
			this.doCheck = true;
			this.check = new Carbonite.Expression(parent.container.parent.parent, parent.container);
			this.check.loadFromRaw(raw["check"]["expression"]);
			}
		this.body = new Carbonite.Body(parent.container.parent, raw["body"]);
		this.body.inherit(parent.container);
		this.body.build();
	}

}

Carbonite.Statements.IfAlternative.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.IfAlternative.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Return = function () {
	this.expression = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Return.prototype.type = "return";

Carbonite.Statements.Return.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.expression = new Carbonite.Expression(container.parent.parent, container);
		this.expression.loadFromRaw(raw["expression"]);
		if (container.parent != null) {
			if (container.parent.hasFlag("native") == false) {
				if (container.parent.output.late == false) {
					var check = container.parent.output;
					if (container.relativeOutput != null) {
						check = container.relativeOutput;
						}
					if (check.check(this.expression.output) == false) {
						this.buildError("Invalid return type '" + this.expression.output.reference.name + "' in statement");
						}
					}
				}
			}
	}
}

Carbonite.Statements.Return.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Return.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Return.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Return.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Define = function () {
	this.define = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Define.prototype.type = "define";

Carbonite.Statements.Define.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.define = Carbonite.Define.make(raw, container);
		this.define.blockIndex = this.blockIndex;
	}
}

Carbonite.Statements.Define.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Define.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Define.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Define.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.For = function () {
	this.check = null;

	this.iterate = null;

	this.define = null;

	this.body = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.For.prototype.type = "for";

Carbonite.Statements.For.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.body = new Carbonite.Body(container.parent, container.source, raw["body"]);
		this.body.inherit(container);
		this.define = Carbonite.Define.make(raw["define"], this.body);
		this.define.output.isPure = true;
		this.check = new Carbonite.Expression(container.parent.parent, this.body);
		this.check.loadFromRaw(raw["check"]);
		this.iterate = new Carbonite.Expression(container.parent.parent, this.body);
		this.iterate.loadFromRaw(raw["iterate"]);
		this.body.build();
	}
}

Carbonite.Statements.For.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.For.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.For.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.For.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.ForIn = function () {
	this.iterate = null;

	this.define = null;

	this.body = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.ForIn.prototype.type = "forin";

Carbonite.Statements.ForIn.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.body = new Carbonite.Body(container.parent, raw["body"]);
		this.body.inherit(container);
		this.define = Carbonite.Define.make(raw["define"], this.body);
		this.define.output.isPure = true;
		this.iterate = new Carbonite.Expression(container.parent.parent, this.body);
		this.iterate.loadFromRaw(raw["iterate"]);
		this.body.build();
	}
}

Carbonite.Statements.ForIn.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.ForIn.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.ForIn.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.ForIn.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.While = function () {
	this.check = null;

	this.body = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.While.prototype.type = "while";

Carbonite.Statements.While.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.body = new Carbonite.Body(container.parent, container.source, raw["body"]);
		this.body.inherit(container);
		this.check = new Carbonite.Expression(container.parent.parent, this.body);
		this.check.loadFromRaw(raw["check"]["expression"]);
		this.body.build();
	}
}

Carbonite.Statements.While.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.While.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.While.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.While.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Continue = function () {
	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Continue.prototype.type = "continue";

Carbonite.Statements.Continue.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Continue.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Continue.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];

	}
}

Carbonite.Statements.Continue.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Continue.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Break = function () {
	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Break.prototype.type = "break";

Carbonite.Statements.Break.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Break.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Break.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];

	}
}

Carbonite.Statements.Break.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Break.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Try = function () {
	this.body = null;

	this.catches = [];

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Try.prototype.type = "try";

Carbonite.Statements.Try.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.body = new Carbonite.Body(container.parent, container.source, raw["body"]);
		this.body.inherit(container);
		var catches = raw["catch"];
		for (var i = 0; i < catches.length; i++) {
			var cat = new Carbonite.Catch(container, catches[i]);
			this.catches.push(cat);
			}
		this.body.build();
	}
}

Carbonite.Statements.Try.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Try.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Try.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Try.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Catch = function () {
	this.body = null;

	this.overload = null;

	this.name = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		this.name = raw["input"]["name"];
		this.overload = new Carbonite.Type(container.parent.parent.compiler, container.parent.parent);
		this.overload.loadFromRaw(raw["input"]["type"]);
		this.body = new Carbonite.Body(container.parent, container.source, raw["body"]);
		this.body.inherit(container);
		this.body.build();
	}

}

Carbonite.Statements.Throw = function () {
	this.expression = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Throw.prototype.type = "throw";

Carbonite.Statements.Throw.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.expression = new Carbonite.Expression(container.parent.parent, container);
		this.expression.loadFromRaw(raw["expression"]);
	}
}

Carbonite.Statements.Throw.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Throw.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Throw.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Throw.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Native = function () {
	this.platform = "";

	this.content = "";

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Native.prototype.type = "native";

Carbonite.Statements.Native.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.platform = raw["platform"];
		this.content = raw["content"];
	}
}

Carbonite.Statements.Native.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Native.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Native.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Native.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Expression = function () {
	this.expression = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Expression.prototype.type = "expression";

Carbonite.Statements.Expression.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.expression = new Carbonite.Expression(container.parent.parent, container);
		this.expression.blockIndex = this.blockIndex;
		this.expression.loadFromRaw(raw);
	}
}

Carbonite.Statements.Expression.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Expression.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Expression.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Expression.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Statements.Yield = function () {
	this.expression = null;

	this.container = null;

	this.raw = null;

	this.blockIndex = 0;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var container = arguments[0];
		this.container = container;
	}

}
Carbonite.Statements.Yield.prototype.type = "yield";

Carbonite.Statements.Yield.prototype.build = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var raw = arguments[0];
		var container = arguments[1];
		this.expression = new Carbonite.Expression(container.parent.parent, container);
		this.expression.loadFromRaw(raw["expression"]);
		if (container.parent != null) {
			var check = container.parent.output;
			if (container.relativeOutput != null) {
				check = container.relativeOutput;
				}
			if (check.check(this.expression.output) == false) {
				this.buildError("Invalid yield type '" + this.expression.output.reference.name + "' in statement");
				}
			}
	}
}

Carbonite.Statements.Yield.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.loadLocation(this.container.parent.parent, raw);
		this.build(raw, this.container);
	}
}

Carbonite.Statements.Yield.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var container = arguments[0];
		var raw = arguments[1];
		var type = raw["type"];
		var rtn = null;
		if (type == "if") {
			rtn = new Carbonite.Statements.If(container);
			}else if (type == "define") {
			rtn = new Carbonite.Statements.Define(container);
			}else if (type == "return") {
			rtn = new Carbonite.Statements.Return(container);
			}else if (type == "for") {
			var forIn = raw["in"];
			if (forIn) {
				rtn = new Carbonite.Statements.ForIn(container);
				}else{
					rtn = new Carbonite.Statements.For(container);
				}
			}else if (type == "while") {
			rtn = new Carbonite.Statements.While(container);
			}else if (type == "expression") {
			rtn = new Carbonite.Statements.Expression(container);
			}else if (type == "continue") {
			rtn = new Carbonite.Statements.Continue(container);
			}else if (type == "break") {
			rtn = new Carbonite.Statements.Break(container);
			}else if (type == "native") {
			rtn = new Carbonite.Statements.Native(container);
			}else if (type == "throw") {
			rtn = new Carbonite.Statements.Throw(container);
			}else if (type == "try") {
			rtn = new Carbonite.Statements.Try(container);
			}else if (type == "yield") {
			rtn = new Carbonite.Statements.Yield(container);
			}
		return rtn;
	}
}

Carbonite.Statements.Yield.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Statements.Yield.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Argument = function () {
	this.name = "";

	this.type = null;

	this.compiler = null;

	this.parent = null;

	this.optional = false;

	this.default = null;

	this.container = null;

	this.define = null;

	this.raw = null;

	this.doc = null;

	this.reference = false;

	this.byValue = false;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var name = arguments[1];
		var type = arguments[2];
		this.name = name;
		this.type = new Carbonite.Type(parent.compiler, parent);
		this.type.loadFromRaw(type);
		this.parent = parent;
		this.compiler = parent.compiler;
	}
else 	if (arguments.length == 4 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Body) || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'object' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var compiler = arguments[0];
		var parent = arguments[1];
		var container = arguments[2];
		var raw = arguments[3];
		this.raw = raw;
		this.doc = new Carbonite.Doc(this.raw["doc"]);
		this.container = container;
		this.name = raw["name"];
		var optional = raw["optional"];
		this.define = new Carbonite.Define(this.name, this.type);
		if (optional.length > 0) {
			this.default = new Carbonite.Expression(parent, container);
			this.default.loadFromRaw(optional[0]);
			this.optional = true;
			this.define.initializer = this.default;
			}
		this.type = new Carbonite.Type(compiler, parent);
		this.type.loadFromRaw(raw["type"]);
		this.reference = this.type.containsReference;
		this.define.output = this.type;
		this.loadLocation(parent, raw);
		if (this.container != null) {
			this.container.scope.add(this.define);
			}
	}

}

Carbonite.Argument.prototype.isByValue = function () {
	if (arguments.length == 0) {
		return this.type.isPrimitiveValue();
	}
}

Carbonite.Argument.prototype.docDynamic = function () {
	if (arguments.length == 0) {
		var opt = "false";
		if (this.optional) {
			opt = "true";
			}
		return "{\"optional\": \"" + opt + "\", \"name\": \"" + this.name + "\", \"doc\": \"" + this.doc.docDynamic() + "\", \"type\": \"" + this.type.lookPretty() + "\"}";
	}
}

Carbonite.Argument.prototype.toHeader = function () {
	if (arguments.length == 0) {
		var opt = "false";
		if (this.optional) {
			opt = "true";
			}
		return "{\"optional\": \"" + opt + "\", \"name\": \"" + this.name + "\", \"type\": " + this.type.toHeader() + "}";
	}
}

Carbonite.Argument.fromHeader = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var argument = new Carbonite.Argument(parent, raw["name"], raw["type"]);
		return argument;
	}
}

Carbonite.Argument.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Argument.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Expression = function () {
	this.output = null;

	this.parent = null;

	this.container = null;

	this.compiler = null;

	this.grouped = false;

	this.blockIndex = 0;

	this.relativeParent = null;

	this.terms = [];

	this.first = null;

	this.last = null;

	this.raw = null;

	this.orders = [];

	this.operator = "";

	this.reference = null;

	this.function = null;

	this.doesCast = false;

	this.castMethod = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Expression.prototype.spawnChild = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var terms = arguments[0];
		var exp = new Carbonite.Terms.Expression(this, this.container);
		exp.loadFromRaw(this.raw, this.terms, this.terms.length);
		exp.expression.loadLocation(this.container.source, this.raw);
		exp.expression.relativeParent = this.relativeParent;
		exp.expression.raw = this.raw;
		exp.expression.loadTerms(terms);
		exp.output = exp.expression.output;
		return exp;
	}
}

Carbonite.Expression.prototype.reOrder = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var terms = arguments[0];
		var diff = 0;
		var needsReOrder = false;
		for (var i = 0; i < this.orders.length; i++) {
			var order = this.orders[i];
			if (diff != order) {
				if (i == 0) {
					diff = order;
					}else{
						needsReOrder = true;
					}
				}
			}
		if (needsReOrder) {
			var orders = this.orders;
			var sorted = orders.sort(function (a, b) {return b-a;});
			var first = null;
			var last = null;
			var len = sorted.length;
			var high = sorted[0];
			for (var i = 0; i < terms.length; i++) {
				var term = terms[i];
				if (first == null) {
					first = Carbonite.Term.make(this, this.container, this.getRawTerm(terms[i]));
					first.loadFromRaw(this.getRawTerm(terms[i]), this.terms, this.terms.length);
					}else{
						last = Carbonite.Term.make(this, this.container, this.getRawTerm(terms[i]));
						last.loadFromRaw(this.getRawTerm(terms[i]), this.terms, this.terms.length);
						var arg = [];
						arg.push(last.output);
						var temp = terms[i - 1];
						var literalOperator = temp["operator"];
						var op = first.output.reference.overload(literalOperator, arg, this);
						if (op.order == high) {
							this.operator = literalOperator;
							this.reference = op;
							var splitTerms = terms.slice().splice(0, i);
							if (splitTerms.length == 1) {
								var firstTerm = splitTerms[0];
								var castParam = [firstTerm["term"]];
								this.first = this.spawnChild(castParam);
								}else{
									this.first = this.spawnChild(splitTerms);
								}
							this.last = this.spawnChild(terms.slice().splice(i));
							}else{
								first = last;
							}
					}
				}
			}
	}
}

Carbonite.Expression.prototype.getOutput = function () {
	if (arguments.length == 0) {
		if (this.doesCast) {
			return this.castMethod.output;
			}
		return this.output;
	}
}

Carbonite.Expression.prototype.loadTerms = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var realTerms = arguments[0];
		var thisIsRelativeParent = false;
		if (this.relativeParent == null) {
			this.relativeParent = this;
			thisIsRelativeParent = true;
			}
		var terms = JSON.parse(JSON.stringify(realTerms));
		var term = terms[0];
		var t = Carbonite.Term.make(this, this.container, this.getRawTerm(term));
		t.loadFromRaw(this.getRawTerm(term), this.terms, this.terms.length);
		this.first = t;
		if (terms.length > 2) {
			this.operator = term["operator"];
			var exp = new Carbonite.Terms.Expression(this, this.container);
			exp.loadFromRaw(this.raw, this.terms, this.terms.length);
			exp.expression.loadLocation(this.container.source, this.raw);
			exp.expression.relativeParent = this.relativeParent;
			exp.expression.raw = this.raw;
			exp.expression.loadTerms(terms.slice().splice(1));
			exp.output = exp.expression.output;
			this.last = exp;
			}else if (terms.length > 1) {
			this.operator = term["operator"];
			var term2 = terms[1];
			var t2 = Carbonite.Term.make(this, this.container, this.getRawTerm(term2));
			t2.loadFromRaw(this.getRawTerm(term2), this.terms, this.terms.length);
			this.last = t2;
			}
		if (this.last == null) {
			this.output = this.first.output;
			if ("operator" in term) {
				var arg = [];
				var literalOperator = term["operator"];
				var op = this.first.output.reference.overload(literalOperator, arg, this);
				this.operator = literalOperator;
				this.reference = op;
				}
			}else{
				var normal = true;
				var castOutput = null;
				if (this.operator == "=>") {
					if (this.first.type == "sequence") {
						var seq = this.first;
						var reference = seq.parts[0];
						if (reference.isConstant) {
							this.last.output = seq.output;
							castOutput = seq.output;
							}
						}
					}else if (this.operator == "=") {
					if (this.first.type == "sequence") {
						var seq = this.first;
						var lastPart = seq.parts[seq.parts.length - 1];
						var prev = seq.parts[seq.parts.length - 2];
						if (lastPart.type == "index") {
							var list = prev.output.reference.getMethods("@setIndex");
							if (list.length > 0) {
								var setIndex = list[0];
								var last = this.last;
								var setExp = new Carbonite.Expression(this.parent, this.container);
								setExp.output = last.output;
								setExp.first = last;
								this.last = null;
								var castLast = lastPart;
								var index = castLast.argument;
								seq.parts.pop();
								var callSetIndex = new Carbonite.Parts.Call(prev, this.first);
								callSetIndex.reference = new Carbonite.Members.ReferenceMethod(setIndex, prev.context);
								callSetIndex.arguments.push(index);
								callSetIndex.arguments.push(setExp);
								seq.parts.push(callSetIndex);
								this.output = callSetIndex.reference.output;
								this.reference = null;
								return null;
								}
							}
						}
					}
				var arg = [];
				arg.push(this.last.output);
				var info = this.first.output.reference.overloadWithCast(this.operator, arg, this);
				if (info.casts.length > 0) {
					this.last.doesCast = true;
					this.last.castMethod = info.casts[0].cast;
					}
				this.reference = info.method;
				this.output = this.reference.output;
				if (normal == false) {
					this.output = castOutput;
					}
				if (this.reference.hasFlag("set")) {
					if (this.first.type == "sequence") {
						var seq = this.first;
						var lastPart = seq.parts[seq.parts.length - 1];
						var prev = seq.parts[seq.parts.length - 2];
						if (lastPart.type == "index") {
							var list = prev.output.reference.getMethods("@actIndex");
							if (list.length > 0) {
								var setIndex = list[0];
								var castLast = lastPart;
								var index = castLast.argument;
								seq.parts.pop();
								var callSetIndex = new Carbonite.Parts.Call(prev, this.first);
								callSetIndex.reference = new Carbonite.Members.ReferenceMethod(setIndex, prev.context);
								callSetIndex.arguments.push(index);
								seq.parts.push(callSetIndex);
								}
							}
						}
					}
				this.relativeParent.orders.push(this.reference.order);
				if (thisIsRelativeParent) {
					this.reOrder(realTerms);
					}
			}
	}
}

Carbonite.Expression.prototype.getRawTerm = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var term = arguments[0];
		if ("operator" in term) {
			return term["term"];
			}else{
				return term;
			}
	}
}

Carbonite.Expression.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		var terms = raw["terms"];
		this.loadLocation(this.container.source, raw);
		this.relativeParent = this;
		Carbonite.Expression.buildTermsIntoExpression(this, terms, 0, terms.length - 1);
	}
}

Carbonite.Expression.prototype.operate = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var operator = arguments[0];
		var arg = [];
		arg.push(this.last.output);
		var info = this.first.output.reference.overloadWithCast(operator, arg, this);
		var op = info.method;
		if (info.casts.length > 0) {
			this.last.doesCast = true;
			this.last.castMethod = info.casts[0].cast;
			}
		this.operator = operator;
		this.reference = op;
		this.output = this.reference.output;
	}
}

Carbonite.Expression.buildTermsIntoExpression = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'number' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var exp = arguments[0];
		var terms = arguments[1];
		var start = arguments[2];
		var end = arguments[3];
		var allSame = true;
		var diff = "";
		var high = 0 - 1;
		var index = 0 - 1;
		if (terms.length == 1) {
			exp.first = Carbonite.Term.make(exp, exp.container, exp.getRawTerm(terms[0]));
			exp.first.loadFromRaw(exp.getRawTerm(terms[0]), exp.terms, 0);
			exp.output = exp.first.output;
			if (terms[0]["operator"] != null) {
				var operator = terms[0]["operator"];
				var arg = [];
				var op = exp.first.output.reference.overload(operator, arg, exp);
				exp.operator = operator;
				exp.reference = op;
				exp.output = exp.reference.output;
				}
			return null;
			}
		for (var i = start;i <= end;i++) {
			var term = terms[i];
			if (("operator" in term) && (i != end)) {
				var operator = term["operator"];
				var order = exp.parent.compiler.operatorOrders[operator];
				if (order == null) {
					exp.buildError("Unkown operator '" + operator + "'");
					}else{
						if (diff == "") {
							diff = operator;
							}else if (diff != operator) {
							allSame = false;
							}
						if (high < order) {
							high = order;
							index = i;
							}
					}
				}
			}
		if (allSame && ((end - start) == 1)) {
			var first = Carbonite.Term.make(exp, exp.container, exp.getRawTerm(terms[start]));
			first.loadFromRaw(exp.getRawTerm(terms[start]), exp.terms, 0);
			exp.first = first;
			var last = Carbonite.Term.make(exp, exp.container, exp.getRawTerm(terms[end]));
			last.loadFromRaw(exp.getRawTerm(terms[end]), exp.terms, 0);
			exp.last = last;
			exp.operate(terms[start]["operator"]);
			}else{
				var len1 = (index - start) + 1;
				var len2 = end - index;
				if (len1 == 1) {
					var first = Carbonite.Term.make(exp, exp.container, exp.getRawTerm(terms[start]));
					first.loadFromRaw(exp.getRawTerm(terms[start]), exp.terms, 0);
					exp.first = first;
					}else{
						var firstExpression = new Carbonite.Terms.Expression(exp, exp.container);
						firstExpression.build(exp, exp.container);
						Carbonite.Expression.buildTermsIntoExpression(firstExpression.expression, terms, start, index);
						firstExpression.output = firstExpression.expression.output;
						exp.first = firstExpression;
					}
				if (len2 == 1) {
					var last = Carbonite.Term.make(exp, exp.container, exp.getRawTerm(terms[end]));
					last.loadFromRaw(exp.getRawTerm(terms[end]), exp.terms, 0);
					exp.last = last;
					}else{
						var lastExpression = new Carbonite.Terms.Expression(exp, exp.container);
						lastExpression.build(exp, exp.container);
						Carbonite.Expression.buildTermsIntoExpression(lastExpression.expression, terms, index + 1, end);
						lastExpression.output = lastExpression.expression.output;
						exp.last = lastExpression;
					}
			}
		if (exp.operator == "=") {
			if (exp.first.type == "sequence") {
				var seq = exp.first;
				var lastPart = seq.parts[seq.parts.length - 1];
				var prev = seq.parts[seq.parts.length - 2];
				if (lastPart.type == "index") {
					var list = prev.output.reference.getMethods("@setIndex");
					if (list.length > 0) {
						var setIndex = list[0];
						var last = exp.last;
						var setExp = new Carbonite.Expression(exp.parent, exp.container);
						setExp.output = last.output;
						setExp.first = last;
						exp.last = null;
						var castLast = lastPart;
						var argIndex = castLast.argument;
						seq.parts.pop();
						var callSetIndex = new Carbonite.Parts.Call(prev, exp.first);
						callSetIndex.reference = new Carbonite.Members.ReferenceMethod(setIndex, prev.context);
						callSetIndex.arguments.push(argIndex);
						callSetIndex.arguments.push(setExp);
						seq.parts.push(callSetIndex);
						exp.output = callSetIndex.reference.output;
						exp.reference = null;
						return null;
						}
					}
				}
			}
		exp.operate(terms[index]["operator"]);
		if (exp.reference.hasFlag("set")) {
			if (exp.first.type == "sequence") {
				var seq = exp.first;
				var lastPart = seq.parts[seq.parts.length - 1];
				var prev = seq.parts[seq.parts.length - 2];
				if (lastPart.type == "index") {
					var list = prev.output.reference.getMethods("@actIndex");
					if (list.length > 0) {
						var setIndex = list[0];
						var castLast = lastPart;
						var argIndex = castLast.argument;
						seq.parts.pop();
						var callSetIndex = new Carbonite.Parts.Call(prev, exp.first);
						callSetIndex.reference = new Carbonite.Members.ReferenceMethod(setIndex, prev.context);
						callSetIndex.arguments.push(argIndex);
						seq.parts.push(callSetIndex);
						}
					}
				}
			}
	}
}

Carbonite.Expression.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Expression.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Term = function () {
	this.output = null;

	this.parent = null;

	this.container = null;

	this.context = null;

	this.index = 0;

	this.raw = null;

	this.type = "";

	this.doesCast = false;

	this.castMethod = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Term.prototype.loadFromRaw = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var raw = arguments[0];
		var context = arguments[1];
		var index = arguments[2];
		this.raw = raw;
		this.context = context;
		this.index = index;
		this.loadLocation(this.container.source, raw);
		this.build(this.parent, this.container);
	}
}

Carbonite.Term.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "literal") {
			rtn = new Carbonite.Terms.Literal(parent, container);
			}else if (type == "constant") {
			rtn = new Carbonite.Terms.Sequence(parent, container);
			}else if (type == "function") {
			rtn = new Carbonite.Terms.Function(parent, container);
			}else if (type == "group") {
			var exp = new Carbonite.Terms.Expression(parent, container);
			exp.expression = new Carbonite.Expression(parent.parent, container);
			exp.expression.grouped = true;
			exp.expression.loadLocation(container.source, raw);
			exp.expression.relativeParent = parent.relativeParent;
			exp.expression.raw = raw["expression"];
			var cast = raw["expression"]["terms"];
			exp.expression.loadTerms(cast);
			exp.output = exp.expression.output;
			rtn = exp;
			}else if (type == "prefix") {
			rtn = new Carbonite.Terms.Prefix(parent, container);
			}
		return rtn;
	}
}

Carbonite.Term.prototype.getOutput = function () {
	if (arguments.length == 0) {
		if (this.doesCast) {
			return this.castMethod.output;
			}
		return this.output;
	}
}

Carbonite.Term.prototype.build = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];

	}
}

Carbonite.Term.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Term.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Terms.Literal = function () {
	this.native = null;

	this.type = "literal";

	this.output = null;

	this.parent = null;

	this.container = null;

	this.context = null;

	this.index = 0;

	this.raw = null;

	this.doesCast = false;

	this.castMethod = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Terms.Literal.prototype.build = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.native = Carbonite.Native.make(parent, this.raw);
		this.output = this.native.output;
	}
}

Carbonite.Terms.Literal.prototype.loadFromRaw = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var raw = arguments[0];
		var context = arguments[1];
		var index = arguments[2];
		this.raw = raw;
		this.context = context;
		this.index = index;
		this.loadLocation(this.container.source, raw);
		this.build(this.parent, this.container);
	}
}

Carbonite.Terms.Literal.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "literal") {
			rtn = new Carbonite.Terms.Literal(parent, container);
			}else if (type == "constant") {
			rtn = new Carbonite.Terms.Sequence(parent, container);
			}else if (type == "function") {
			rtn = new Carbonite.Terms.Function(parent, container);
			}else if (type == "group") {
			var exp = new Carbonite.Terms.Expression(parent, container);
			exp.expression = new Carbonite.Expression(parent.parent, container);
			exp.expression.grouped = true;
			exp.expression.loadLocation(container.source, raw);
			exp.expression.relativeParent = parent.relativeParent;
			exp.expression.raw = raw["expression"];
			var cast = raw["expression"]["terms"];
			exp.expression.loadTerms(cast);
			exp.output = exp.expression.output;
			rtn = exp;
			}else if (type == "prefix") {
			rtn = new Carbonite.Terms.Prefix(parent, container);
			}
		return rtn;
	}
}

Carbonite.Terms.Literal.prototype.getOutput = function () {
	if (arguments.length == 0) {
		if (this.doesCast) {
			return this.castMethod.output;
			}
		return this.output;
	}
}

Carbonite.Terms.Literal.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Terms.Literal.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Terms.Expression = function () {
	this.expression = null;

	this.parentExpression = null;

	this.type = "expression";

	this.output = null;

	this.parent = null;

	this.container = null;

	this.context = null;

	this.index = 0;

	this.raw = null;

	this.doesCast = false;

	this.castMethod = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Terms.Expression.prototype.build = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		if (this.expression == null) {
			this.expression = new Carbonite.Expression(parent.parent, container);
			}
		this.parentExpression = parent;
	}
}

Carbonite.Terms.Expression.prototype.loadFromRaw = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var raw = arguments[0];
		var context = arguments[1];
		var index = arguments[2];
		this.raw = raw;
		this.context = context;
		this.index = index;
		this.loadLocation(this.container.source, raw);
		this.build(this.parent, this.container);
	}
}

Carbonite.Terms.Expression.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "literal") {
			rtn = new Carbonite.Terms.Literal(parent, container);
			}else if (type == "constant") {
			rtn = new Carbonite.Terms.Sequence(parent, container);
			}else if (type == "function") {
			rtn = new Carbonite.Terms.Function(parent, container);
			}else if (type == "group") {
			var exp = new Carbonite.Terms.Expression(parent, container);
			exp.expression = new Carbonite.Expression(parent.parent, container);
			exp.expression.grouped = true;
			exp.expression.loadLocation(container.source, raw);
			exp.expression.relativeParent = parent.relativeParent;
			exp.expression.raw = raw["expression"];
			var cast = raw["expression"]["terms"];
			exp.expression.loadTerms(cast);
			exp.output = exp.expression.output;
			rtn = exp;
			}else if (type == "prefix") {
			rtn = new Carbonite.Terms.Prefix(parent, container);
			}
		return rtn;
	}
}

Carbonite.Terms.Expression.prototype.getOutput = function () {
	if (arguments.length == 0) {
		if (this.doesCast) {
			return this.castMethod.output;
			}
		return this.output;
	}
}

Carbonite.Terms.Expression.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Terms.Expression.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Terms.Sequence = function () {
	this.name = null;

	this.parts = [];

	this.templates = [];

	this.type = "sequence";

	this.output = null;

	this.parent = null;

	this.container = null;

	this.context = null;

	this.index = 0;

	this.raw = null;

	this.doesCast = false;

	this.castMethod = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Terms.Sequence.prototype.split = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var isConstructor = false;
		var splits = name.split(".");
		for (var i = 0; i < splits.length; i++) {
			if (isConstructor == false) {
				var p = splits[i];
				if (this.parts.length == 0) {
					var ref = new Carbonite.Parts.Reference(p, this);
					this.parts.push(ref);
					this.output = ref.output;
					isConstructor = ref.isConstructor;
					}else{
						var last = this.parts[this.parts.length - 1];
						var dot = new Carbonite.Parts.Dot(last, p, this);
						this.parts.push(dot);
						this.output = dot.output;
					}
				}
			}
	}
}

Carbonite.Terms.Sequence.prototype.build = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.container = container;
		var name = this.raw["name"];
		if ("template" in this.raw) {
			var templates = this.raw["template"];
			for (var i = 0; i < templates.length; i++) {
				var type = new Carbonite.Type(parent.parent.compiler, parent.parent);
				type.loadFromRaw(templates[i]);
				this.templates.push(type);
				}
			}
		this.split(name);
		var appendix = this.raw["appendix"];
		for (var i = 0; i < appendix.length; i++) {
			var p = appendix[i];
			var type = p["type"];
			var last = this.parts[this.parts.length - 1];
			var part = null;
			if (type == "call") {
				var args = p["expression"];
				part = new Carbonite.Parts.Call(last, args, this);
				this.parts.push(part);
				this.output = part.output;
				}else if (type == "dot") {
				this.split(p["name"]);
				}else if (type == "index") {
				part = new Carbonite.Parts.Index(last, p["expression"], this);
				this.parts.push(part);
				this.output = part.output;
				}
			}
	}
}

Carbonite.Terms.Sequence.prototype.loadFromRaw = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var raw = arguments[0];
		var context = arguments[1];
		var index = arguments[2];
		this.raw = raw;
		this.context = context;
		this.index = index;
		this.loadLocation(this.container.source, raw);
		this.build(this.parent, this.container);
	}
}

Carbonite.Terms.Sequence.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "literal") {
			rtn = new Carbonite.Terms.Literal(parent, container);
			}else if (type == "constant") {
			rtn = new Carbonite.Terms.Sequence(parent, container);
			}else if (type == "function") {
			rtn = new Carbonite.Terms.Function(parent, container);
			}else if (type == "group") {
			var exp = new Carbonite.Terms.Expression(parent, container);
			exp.expression = new Carbonite.Expression(parent.parent, container);
			exp.expression.grouped = true;
			exp.expression.loadLocation(container.source, raw);
			exp.expression.relativeParent = parent.relativeParent;
			exp.expression.raw = raw["expression"];
			var cast = raw["expression"]["terms"];
			exp.expression.loadTerms(cast);
			exp.output = exp.expression.output;
			rtn = exp;
			}else if (type == "prefix") {
			rtn = new Carbonite.Terms.Prefix(parent, container);
			}
		return rtn;
	}
}

Carbonite.Terms.Sequence.prototype.getOutput = function () {
	if (arguments.length == 0) {
		if (this.doesCast) {
			return this.castMethod.output;
			}
		return this.output;
	}
}

Carbonite.Terms.Sequence.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Terms.Sequence.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Terms.Prefix = function () {
	this.expression = null;

	this.parentExpression = null;

	this.prefix = "";

	this.type = "prefix";

	this.output = null;

	this.parent = null;

	this.container = null;

	this.context = null;

	this.index = 0;

	this.raw = null;

	this.doesCast = false;

	this.castMethod = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Terms.Prefix.prototype.build = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.expression = new Carbonite.Expression(parent.parent, container);
		this.expression.loadFromRaw(this.raw["expression"]);
		this.output = this.expression.output;
		this.parentExpression = parent;
		this.prefix = this.raw["prefix"];
		if (this.prefix == "new") {
			this.output.owned = true;
			}
	}
}

Carbonite.Terms.Prefix.prototype.loadFromRaw = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var raw = arguments[0];
		var context = arguments[1];
		var index = arguments[2];
		this.raw = raw;
		this.context = context;
		this.index = index;
		this.loadLocation(this.container.source, raw);
		this.build(this.parent, this.container);
	}
}

Carbonite.Terms.Prefix.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "literal") {
			rtn = new Carbonite.Terms.Literal(parent, container);
			}else if (type == "constant") {
			rtn = new Carbonite.Terms.Sequence(parent, container);
			}else if (type == "function") {
			rtn = new Carbonite.Terms.Function(parent, container);
			}else if (type == "group") {
			var exp = new Carbonite.Terms.Expression(parent, container);
			exp.expression = new Carbonite.Expression(parent.parent, container);
			exp.expression.grouped = true;
			exp.expression.loadLocation(container.source, raw);
			exp.expression.relativeParent = parent.relativeParent;
			exp.expression.raw = raw["expression"];
			var cast = raw["expression"]["terms"];
			exp.expression.loadTerms(cast);
			exp.output = exp.expression.output;
			rtn = exp;
			}else if (type == "prefix") {
			rtn = new Carbonite.Terms.Prefix(parent, container);
			}
		return rtn;
	}
}

Carbonite.Terms.Prefix.prototype.getOutput = function () {
	if (arguments.length == 0) {
		if (this.doesCast) {
			return this.castMethod.output;
			}
		return this.output;
	}
}

Carbonite.Terms.Prefix.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Terms.Prefix.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Terms.Function = function () {
	this.function = null;

	this.parentExpression = null;

	this.type = "function";

	this.output = null;

	this.parent = null;

	this.container = null;

	this.context = null;

	this.index = 0;

	this.raw = null;

	this.doesCast = false;

	this.castMethod = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.parent = parent;
		this.container = container;
	}

}

Carbonite.Terms.Function.prototype.build = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		this.function = new Carbonite.Function(parent, this.raw);
		this.parentExpression = parent;
		this.output = parent.output;
	}
}

Carbonite.Terms.Function.prototype.loadFromRaw = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var raw = arguments[0];
		var context = arguments[1];
		var index = arguments[2];
		this.raw = raw;
		this.context = context;
		this.index = index;
		this.loadLocation(this.container.source, raw);
		this.build(this.parent, this.container);
	}
}

Carbonite.Terms.Function.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Body) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var container = arguments[1];
		var raw = arguments[2];
		var type = raw["type"];
		var rtn = null;
		if (type == "literal") {
			rtn = new Carbonite.Terms.Literal(parent, container);
			}else if (type == "constant") {
			rtn = new Carbonite.Terms.Sequence(parent, container);
			}else if (type == "function") {
			rtn = new Carbonite.Terms.Function(parent, container);
			}else if (type == "group") {
			var exp = new Carbonite.Terms.Expression(parent, container);
			exp.expression = new Carbonite.Expression(parent.parent, container);
			exp.expression.grouped = true;
			exp.expression.loadLocation(container.source, raw);
			exp.expression.relativeParent = parent.relativeParent;
			exp.expression.raw = raw["expression"];
			var cast = raw["expression"]["terms"];
			exp.expression.loadTerms(cast);
			exp.output = exp.expression.output;
			rtn = exp;
			}else if (type == "prefix") {
			rtn = new Carbonite.Terms.Prefix(parent, container);
			}
		return rtn;
	}
}

Carbonite.Terms.Function.prototype.getOutput = function () {
	if (arguments.length == 0) {
		if (this.doesCast) {
			return this.castMethod.output;
			}
		return this.output;
	}
}

Carbonite.Terms.Function.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Terms.Function.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Type = function () {
	this.reference = null;

	this.targetRoute = "";

	this.late = false;

	this.lateReference = null;

	this.magic = false;

	this.magicType = 0;

	this.isPure = false;

	this.nullable = true;

	this.autoCast = false;

	this.castTo = null;

	this.templateInstance = null;

	this.templates = [];

	this.compiler = null;

	this.parent = null;

	this.raw = null;

	this.ownerDefine = null;

	this.ownerFunction = null;

	this.ownerMethod = null;

	this.owned = false;

	this.ownedUntil = -1;

	this.containsReference = false;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var compiler = arguments[0];
		var parent = arguments[1];
		this.compiler = compiler;
		this.parent = parent;
		this.source = this.parent.source;
	}

}

Carbonite.Type.prototype.setReference = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		this.reference = reference;
		if (this.reference.link != null) {
			this.setReference(this.reference.link);
			}
	}
}

Carbonite.Type.prototype.isPrimitiveValue = function () {
	if (arguments.length == 0) {
		if (this.reference != null) {
			return this.reference.primitiveValue;
			}else{
				return false;
			}
	}
}

Carbonite.Type.prototype.loadFromName = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var className = arguments[0];
		var raw = arguments[1];
		this.raw = raw;
		this.startOffset = this.raw["start"];
		this.endOffset = this.raw["end"];
		this.targetRoute = className;
		this.setReference(this.compiler.findClass(className, this));
		for (var i = 0; i < this.reference.templates.length; i++) {
			var template = this.reference.templates[i];
			if (i >= this.templates.length) {
				if (template.optional) {
					this.templates.push(template.default);
					}else{

					}
				}
			}
	}
}

Carbonite.Type.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		if ("start" in raw) {
			this.loadLocation(this.parent, raw);
			}
		var name = this.raw["name"];
		this.targetRoute = name;
		if (name == "this") {
			name = this.parent.route;
			}
		if ("reference" in this.raw && this.raw["reference"] == 1) {
			this.containsReference = true;
			}
		if (name[0] == "@") {
			this.magic = true;
			if (name == "@self") {
				this.magicType = 1;
				this.setReference(this.parent);
				}else{
					this.buildError("Illegal magic type " + name);
				}
			}else if (this.parent.hasTemplate(name)) {
			this.late = true;
			this.lateReference = this.parent.getTemplate(name);
			}else{
				this.setReference(this.compiler.findClass(this.raw["name"], this));
			}
		if (this.compiler.useOldTemplates == false && this.late) {
			this.late = false;
			this.reference = this.parent.getResolvedTemplate(name).reference;
			}
		if (this.compiler.useOldTemplates == false) {
			if (("template" in this.raw) == false && this.reference.templates.length > 0) {
				for (var i = 0; i < this.reference.templates.length; i++) {
					var tmp = this.reference.templates[i];
					var type = new Carbonite.Type(this.compiler, this.parent);
					type.loadFromRaw(tmp.raw["default"]);
					this.templates.push(type);
					this.instanceTemplates();
					}
				}
			}
		if ("template" in this.raw && this.late == false) {
			var pTemp = this.raw["template"];
			if ((typeof pTemp == 'object' ? (Array.isArray(pTemp) ? 'array' : 'map') : (typeof pTemp == 'number' ? 'float' : typeof pTemp)) != "boolean") {
				var templates = pTemp;
				if (this.compiler.useOldTemplates) {
					for (var i = 0; i < templates.length; i++) {
						var type = new Carbonite.Type(this.compiler, this.parent);
						type.loadFromRaw(templates[i]);
						this.templates.push(type);
						}
					}else if (templates.length > 0) {
					for (var i = 0; i < templates.length; i++) {
						var type = new Carbonite.Type(this.compiler, this.parent);
						type.loadFromRaw(templates[i]);
						this.templates.push(type);
						}
					this.instanceTemplates();
					}
				}
			}
		if ((this.late == false) && (this.reference.route != "function") && (this.magicType != 1)) {
			this.finishTemplates();
			}
		this.startOffset = this.raw["start"];
		this.endOffset = this.raw["end"];
	}
}

Carbonite.Type.prototype.instanceTemplates = function () {
	if (arguments.length == 0) {
		if ((this.reference.route != "function") && (this.magicType != 1)) {
			var inst = this.reference.findInstance(this);
			if (inst != null) {
				this.reference = inst.instance;
				}else{
					var nInstance = this.reference.createInstance(this);
					this.reference = nInstance.instance;
				}
			}
	}
}

Carbonite.Type.prototype.finishTemplates = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.reference.templates.length; i++) {
			var template = this.reference.templates[i];
			if (i >= this.templates.length) {
				if (template.optional) {
					this.templates.push(template.default);
					}else{
						this.buildError("Type '" + this.reference.name + "' requires " + this.reference.templates.length + " templates, " + this.templates.length + " provided");
					}
				}
			}
	}
}

Carbonite.Type.prototype.checkCast = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.reference.route == "null" || this.reference.route == "null") {
			return true;
			}
		if (what.reference.route == "empty") {
			return true;
			}
		if (what.reference.descendantOf(this.reference)) {
			return true;
			}
		if (this.reference.descendantOf(what.reference)) {
			if (what.reference.findCastFor(this)) {
				return false;
				}
			return true;
			}
		if (this.reference.route != what.reference.route) {
			return false;
			}
		if (this.templates.length > what.templates.length) {
			return false;
			}
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			var whatTemplate = what.templates[i];
			if (whatTemplate.late) {

				}else{
					if (template.check(whatTemplate) == false) {
						return false;
						}
				}
			}
		return true;
	}
}

Carbonite.Type.prototype.polymorph = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.reference.route == "null" || this.reference.route == "null" || what.reference.route == "empty") {
			return false;
			}
		if (what.reference.descendantOf(this.reference)) {
			return true;
			}
		if (this.reference.descendantOf(what.reference)) {
			return true;
			}
		return false;
	}
}

Carbonite.Type.prototype.check = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.reference.route == "null" || this.reference.route == "null") {
			return true;
			}
		if (what.reference.route == "empty") {
			return true;
			}
		if (what.reference.descendantOf(this.reference)) {
			return true;
			}
		if (this.reference.descendantOf(what.reference)) {
			return true;
			}
		if (this.reference.route != what.reference.route) {
			return false;
			}
		if (this.templates.length > what.templates.length) {
			return false;
			}
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			var whatTemplate = what.templates[i];
			if (whatTemplate.late) {

				}else{
					if (template.check(whatTemplate) == false) {
						return false;
						}
				}
			}
		return true;
	}
}

Carbonite.Type.prototype.getClassParent = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var cls = arguments[0];
		if (cls.inherits.length > 0) {
			var cast = cls.inherits[0];
			return cast;
			}else{
				return cls;
			}
	}
}

Carbonite.Type.prototype.lookPretty = function () {
	if (arguments.length == 0) {
		var beg = "";
		if (this.templates.length > 0) {
			var temps = [];
			for (var i = 0; i < this.templates.length; i++) {
				var cast = this.templates[i];
				temps.push(cast.lookPretty());
				}
			beg = "<" + temps.join(", ") + ">";
			}
		var route = "";
		if (this.late) {
			route = this.raw["name"];
			}else{
				route = this.reference.route;
			}
		return beg + route;
	}
}

Carbonite.Type.prototype.checkAsSibling = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.reference.name == "null") {
			return true;
			}
		var first = this.getClassParent(this.reference);
		var against = this.getClassParent(what.reference);
		if (first.route != against.route) {
			return false;
			}
		if (this.templates.length > what.templates.length) {
			return false;
			}
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			var whatTemplate = what.templates[i];
			if (template.check(whatTemplate) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Type.prototype.getWithContext = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var context = arguments[0];
		var rtn = new Carbonite.ReferenceType(this, context);
		rtn.loadLocation(this.parent, this.raw);
		return rtn;
	}
}

Carbonite.Type.prototype.checkWithContext = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var context = arguments[0];
		var what = arguments[1];
		if (what.reference.name == "null") {
			return true;
			}
		if (this.late == false) {
			return this.check(what);
			}
		var realReference = context.templates[this.lateReference.index];
		if (what.reference.descendantOf(realReference.reference)) {
			return true;
			}
		if (realReference.reference.descendantOf(what.reference)) {
			return true;
			}
		if (realReference.reference.route != what.reference.route) {
			return false;
			}
		if (realReference.templates.length > what.templates.length) {
			return false;
			}
		for (var i = 0; i < realReference.templates.length; i++) {
			var template = realReference.templates[i];
			var whatTemplate = what.templates[i];
			if (template.checkWithContext(context, whatTemplate) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.Type.prototype.toHeader = function () {
	if (arguments.length == 0) {
		var templates = [];
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			templates.push(template.toHeader());
			}
		return "{\"name\": \"" + this.reference.route + "\", \"template\": [" + templates.join(", ") + "]}";
	}
}

Carbonite.Type.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Type.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Type.prototype.toCarbideValue = function () {
	if (arguments.length == 0) {
		return carbide_proxy_Carbonite_Type.create(this);
		return carbide_proxy_Carbonite_Type.create(this);
	}
}

Carbonite.ReferenceType = function () {
	this.context = null;

	this.typeReference = null;

	this.reference = null;

	this.targetRoute = "";

	this.late = false;

	this.lateReference = null;

	this.magic = false;

	this.magicType = 0;

	this.isPure = false;

	this.nullable = true;

	this.autoCast = false;

	this.castTo = null;

	this.templateInstance = null;

	this.templates = [];

	this.compiler = null;

	this.parent = null;

	this.raw = null;

	this.ownerDefine = null;

	this.ownerFunction = null;

	this.ownerMethod = null;

	this.owned = false;

	this.ownedUntil = -1;

	this.containsReference = false;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var type = arguments[0];
		var context = arguments[1];
		this.context = context;
		this.typeReference = type;
		this.containsReference = type.containsReference;
		if (type.late == true) {
			var cast = context.templates[type.lateReference.index];
			this.setReference(cast.reference);
			this.templates = cast.templates;
			}else{
				this.setReference(type.reference);
				this.templates = type.templates;
			}
	}

}

Carbonite.ReferenceType.prototype.check = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var against = arguments[0];
		this.typeReference.checkWithContext(this.context, against);
	}
}

Carbonite.ReferenceType.prototype.setReference = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		this.reference = reference;
		if (this.reference.link != null) {
			this.setReference(this.reference.link);
			}
	}
}

Carbonite.ReferenceType.prototype.isPrimitiveValue = function () {
	if (arguments.length == 0) {
		if (this.reference != null) {
			return this.reference.primitiveValue;
			}else{
				return false;
			}
	}
}

Carbonite.ReferenceType.prototype.loadFromName = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var className = arguments[0];
		var raw = arguments[1];
		this.raw = raw;
		this.startOffset = this.raw["start"];
		this.endOffset = this.raw["end"];
		this.targetRoute = className;
		this.setReference(this.compiler.findClass(className, this));
		for (var i = 0; i < this.reference.templates.length; i++) {
			var template = this.reference.templates[i];
			if (i >= this.templates.length) {
				if (template.optional) {
					this.templates.push(template.default);
					}else{

					}
				}
			}
	}
}

Carbonite.ReferenceType.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		if ("start" in raw) {
			this.loadLocation(this.parent, raw);
			}
		var name = this.raw["name"];
		this.targetRoute = name;
		if (name == "this") {
			name = this.parent.route;
			}
		if ("reference" in this.raw && this.raw["reference"] == 1) {
			this.containsReference = true;
			}
		if (name[0] == "@") {
			this.magic = true;
			if (name == "@self") {
				this.magicType = 1;
				this.setReference(this.parent);
				}else{
					this.buildError("Illegal magic type " + name);
				}
			}else if (this.parent.hasTemplate(name)) {
			this.late = true;
			this.lateReference = this.parent.getTemplate(name);
			}else{
				this.setReference(this.compiler.findClass(this.raw["name"], this));
			}
		if (this.compiler.useOldTemplates == false && this.late) {
			this.late = false;
			this.reference = this.parent.getResolvedTemplate(name).reference;
			}
		if (this.compiler.useOldTemplates == false) {
			if (("template" in this.raw) == false && this.reference.templates.length > 0) {
				for (var i = 0; i < this.reference.templates.length; i++) {
					var tmp = this.reference.templates[i];
					var type = new Carbonite.Type(this.compiler, this.parent);
					type.loadFromRaw(tmp.raw["default"]);
					this.templates.push(type);
					this.instanceTemplates();
					}
				}
			}
		if ("template" in this.raw && this.late == false) {
			var pTemp = this.raw["template"];
			if ((typeof pTemp == 'object' ? (Array.isArray(pTemp) ? 'array' : 'map') : (typeof pTemp == 'number' ? 'float' : typeof pTemp)) != "boolean") {
				var templates = pTemp;
				if (this.compiler.useOldTemplates) {
					for (var i = 0; i < templates.length; i++) {
						var type = new Carbonite.Type(this.compiler, this.parent);
						type.loadFromRaw(templates[i]);
						this.templates.push(type);
						}
					}else if (templates.length > 0) {
					for (var i = 0; i < templates.length; i++) {
						var type = new Carbonite.Type(this.compiler, this.parent);
						type.loadFromRaw(templates[i]);
						this.templates.push(type);
						}
					this.instanceTemplates();
					}
				}
			}
		if ((this.late == false) && (this.reference.route != "function") && (this.magicType != 1)) {
			this.finishTemplates();
			}
		this.startOffset = this.raw["start"];
		this.endOffset = this.raw["end"];
	}
}

Carbonite.ReferenceType.prototype.instanceTemplates = function () {
	if (arguments.length == 0) {
		if ((this.reference.route != "function") && (this.magicType != 1)) {
			var inst = this.reference.findInstance(this);
			if (inst != null) {
				this.reference = inst.instance;
				}else{
					var nInstance = this.reference.createInstance(this);
					this.reference = nInstance.instance;
				}
			}
	}
}

Carbonite.ReferenceType.prototype.finishTemplates = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.reference.templates.length; i++) {
			var template = this.reference.templates[i];
			if (i >= this.templates.length) {
				if (template.optional) {
					this.templates.push(template.default);
					}else{
						this.buildError("Type '" + this.reference.name + "' requires " + this.reference.templates.length + " templates, " + this.templates.length + " provided");
					}
				}
			}
	}
}

Carbonite.ReferenceType.prototype.checkCast = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.reference.route == "null" || this.reference.route == "null") {
			return true;
			}
		if (what.reference.route == "empty") {
			return true;
			}
		if (what.reference.descendantOf(this.reference)) {
			return true;
			}
		if (this.reference.descendantOf(what.reference)) {
			if (what.reference.findCastFor(this)) {
				return false;
				}
			return true;
			}
		if (this.reference.route != what.reference.route) {
			return false;
			}
		if (this.templates.length > what.templates.length) {
			return false;
			}
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			var whatTemplate = what.templates[i];
			if (whatTemplate.late) {

				}else{
					if (template.check(whatTemplate) == false) {
						return false;
						}
				}
			}
		return true;
	}
}

Carbonite.ReferenceType.prototype.polymorph = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.reference.route == "null" || this.reference.route == "null" || what.reference.route == "empty") {
			return false;
			}
		if (what.reference.descendantOf(this.reference)) {
			return true;
			}
		if (this.reference.descendantOf(what.reference)) {
			return true;
			}
		return false;
	}
}

Carbonite.ReferenceType.prototype.getClassParent = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var cls = arguments[0];
		if (cls.inherits.length > 0) {
			var cast = cls.inherits[0];
			return cast;
			}else{
				return cls;
			}
	}
}

Carbonite.ReferenceType.prototype.lookPretty = function () {
	if (arguments.length == 0) {
		var beg = "";
		if (this.templates.length > 0) {
			var temps = [];
			for (var i = 0; i < this.templates.length; i++) {
				var cast = this.templates[i];
				temps.push(cast.lookPretty());
				}
			beg = "<" + temps.join(", ") + ">";
			}
		var route = "";
		if (this.late) {
			route = this.raw["name"];
			}else{
				route = this.reference.route;
			}
		return beg + route;
	}
}

Carbonite.ReferenceType.prototype.checkAsSibling = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.reference.name == "null") {
			return true;
			}
		var first = this.getClassParent(this.reference);
		var against = this.getClassParent(what.reference);
		if (first.route != against.route) {
			return false;
			}
		if (this.templates.length > what.templates.length) {
			return false;
			}
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			var whatTemplate = what.templates[i];
			if (template.check(whatTemplate) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.ReferenceType.prototype.getWithContext = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var context = arguments[0];
		var rtn = new Carbonite.ReferenceType(this, context);
		rtn.loadLocation(this.parent, this.raw);
		return rtn;
	}
}

Carbonite.ReferenceType.prototype.checkWithContext = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var context = arguments[0];
		var what = arguments[1];
		if (what.reference.name == "null") {
			return true;
			}
		if (this.late == false) {
			return this.check(what);
			}
		var realReference = context.templates[this.lateReference.index];
		if (what.reference.descendantOf(realReference.reference)) {
			return true;
			}
		if (realReference.reference.descendantOf(what.reference)) {
			return true;
			}
		if (realReference.reference.route != what.reference.route) {
			return false;
			}
		if (realReference.templates.length > what.templates.length) {
			return false;
			}
		for (var i = 0; i < realReference.templates.length; i++) {
			var template = realReference.templates[i];
			var whatTemplate = what.templates[i];
			if (template.checkWithContext(context, whatTemplate) == false) {
				return false;
				}
			}
		return true;
	}
}

Carbonite.ReferenceType.prototype.toHeader = function () {
	if (arguments.length == 0) {
		var templates = [];
		for (var i = 0; i < this.templates.length; i++) {
			var template = this.templates[i];
			templates.push(template.toHeader());
			}
		return "{\"name\": \"" + this.reference.route + "\", \"template\": [" + templates.join(", ") + "]}";
	}
}

Carbonite.ReferenceType.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.ReferenceType.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Implements = function () {
	this.implementer = "";

	this.implements = "";

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		this.implementer = data["implementer"];
		this.implements = data["implements"];
	}

}

Carbonite.Implements.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Implements.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Part = function () {
	this.output = null;

	this.parent = null;

	this.context = null;

	this.root = null;

	this.type = "";

	this.raw = null;


}

Carbonite.Parts.Reference = function () {
	this.reference = null;

	this.constantReference = null;

	this.isConstant = false;

	this.isConstructor = false;

	this.type = "reference";

	this.output = null;

	this.parent = null;

	this.context = null;

	this.root = null;

	this.raw = null;

	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var parent = arguments[1];
		this.parent = parent;
		if (parent.container == null) {
			this.constantReference = new Carbonite.Type(parent.parent.parent.compiler, parent.parent.parent);
			if ("template" in parent.raw) {
				var template = parent.raw["template"];
				if ("types" in template) {
					parent.raw["template"] = parent.raw["template"]["types"];
					}
				this.isConstructor = true;
				}
			var rawName = parent.raw["name"];
			if (parent.parent.parent.compiler.getClass(rawName) != null || parent.parent.parent.hasTemplate(rawName)) {
				this.isConstructor = true;
				}
			if (this.isConstructor) {
				this.constantReference.loadFromRaw(parent.raw);
				}else{
					this.constantReference.loadFromName(name, parent.raw);
				}
			this.output = this.constantReference;
			this.root = null;
			this.context = this.constantReference;
			this.isConstant = true;
			}else{
				this.reference = parent.container.scope.search(name);
				if (this.reference == null) {
					this.constantReference = new Carbonite.Type(parent.parent.parent.compiler, parent.parent.parent);
					if ("template" in parent.raw) {
						var template = parent.raw["template"];
						if ("types" in template) {
							parent.raw["template"] = parent.raw["template"]["types"];
							}
						this.isConstructor = true;
						}
					var rawName = parent.raw["name"];
					if (parent.parent.parent.compiler.getClass(rawName) != null || parent.parent.parent.hasTemplate(rawName)) {
						this.isConstructor = true;
						}
					if (this.isConstructor) {
						this.constantReference.loadFromRaw(parent.raw);
						}else{
							this.constantReference.loadFromName(name, parent.raw);
						}
					this.output = this.constantReference;
					this.root = null;
					this.context = this.constantReference;
					this.isConstant = true;
					}else{
						this.output = this.reference.output;
						this.root = this.reference;
						this.context = this.reference.output;
					}
			}
	}

}

Carbonite.Parts.Dot = function () {
	this.reference = null;

	this.previous = null;

	this.text = "";

	this.type = "dot";

	this.output = null;

	this.parent = null;

	this.context = null;

	this.root = null;

	this.raw = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Part || (arguments[0] instanceof Carbonite.Parts.Reference) || (arguments[0] instanceof Carbonite.Parts.Dot) || (arguments[0] instanceof Carbonite.Parts.Call) || (arguments[0] instanceof Carbonite.Parts.Index)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Term || (arguments[2] instanceof Carbonite.Terms.Literal) || (arguments[2] instanceof Carbonite.Terms.Expression) || (arguments[2] instanceof Carbonite.Terms.Sequence) || (arguments[2] instanceof Carbonite.Terms.Prefix) || (arguments[2] instanceof Carbonite.Terms.Function)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prev = arguments[0];
		var text = arguments[1];
		var parent = arguments[2];
		this.parent = parent;
		this.previous = prev;
		this.text = text;
		if (prev.output.reference.hasChild(text)) {
			this.output = new Carbonite.Type(parent.parent.parent.compiler, parent.parent.parent);
			var found = prev.output.reference.getChild(text);
			this.output.loadFromName(found.route, parent.raw);
			}else{
				this.reference = Carbonite.Member.makeReference(prev.output.reference, prev.output.reference.dotMember(text, parent), prev.context);
				this.output = this.reference.output;
				if (this.reference.type == "property") {
					var cast = this.reference;
					this.context = cast.reference.output;
					}else{
						this.context = prev.context;
					}
			}
		this.root = prev.root;
	}

}

Carbonite.Parts.Call = function () {
	this.previous = null;

	this.reference = null;

	this.arguments = [];

	this.type = "call";

	this.output = null;

	this.parent = null;

	this.context = null;

	this.root = null;

	this.raw = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Part || (arguments[0] instanceof Carbonite.Parts.Reference) || (arguments[0] instanceof Carbonite.Parts.Dot) || (arguments[0] instanceof Carbonite.Parts.Call) || (arguments[0] instanceof Carbonite.Parts.Index)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Term || (arguments[1] instanceof Carbonite.Terms.Literal) || (arguments[1] instanceof Carbonite.Terms.Expression) || (arguments[1] instanceof Carbonite.Terms.Sequence) || (arguments[1] instanceof Carbonite.Terms.Prefix) || (arguments[1] instanceof Carbonite.Terms.Function)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var prev = arguments[0];
		var parent = arguments[1];
		this.previous = prev;
		this.parent = parent;
		this.root = prev.root;
	}
else 	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Part || (arguments[0] instanceof Carbonite.Parts.Reference) || (arguments[0] instanceof Carbonite.Parts.Dot) || (arguments[0] instanceof Carbonite.Parts.Call) || (arguments[0] instanceof Carbonite.Parts.Index)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Term || (arguments[2] instanceof Carbonite.Terms.Literal) || (arguments[2] instanceof Carbonite.Terms.Expression) || (arguments[2] instanceof Carbonite.Terms.Sequence) || (arguments[2] instanceof Carbonite.Terms.Prefix) || (arguments[2] instanceof Carbonite.Terms.Function)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prev = arguments[0];
		var args = arguments[1];
		var parent = arguments[2];
		this.parent = parent;
		this.previous = prev;
		this.root = prev.root;
		for (var i = 0; i < args.length; i++) {
			var arg = args[i];
			var exp = new Carbonite.Expression(parent.container.parent.parent, parent.container);
			exp.loadFromRaw(arg);
			this.arguments.push(exp);
			}
		if (this.previous.type == "dot") {
			var cast = this.previous;
			if (cast.reference.type == "property") {
				var refProp = cast.reference;
				if (cast.reference.output.reference.route == "function") {
					this.functionCheck(cast.reference.output);
					}else{
						parent.source.error(parent, "Cannot call non function property '" + refProp.reference.name + "' on type '" + refProp.output.reference.name + "'");
						throw new Error("Build error");
					}
				}else{
					var refMeth = cast.reference;
					if (refMeth.reference.name == "@dot") {
						parent.source.error(parent, "TODO: Add function casting");
						throw new Error("Build error");
						}else{
							var types = [];
							for (var i = 0; i < this.arguments.length; i++) {
								var arg = this.arguments[i];
								types.push(arg.output);
								}
							if (this.root == null) {
								var info = refMeth.reference.parent.overloadWithCast(cast.text, types, parent);
								var method = info.method;
								for (var i = 0; i < info.casts.length; i++) {
									var arg = this.arguments[info.casts[i].index];
									arg.doesCast = true;
									arg.castMethod = info.casts[i].cast;
									}
								this.reference = new Carbonite.Members.ReferenceMethod(method, this.previous.context);
								this.output = method.output;
								if (method.binding == "bound") {
									parent.source.error(parent, "Cannot call bounded method on a fixed reference in type '" + refMeth.reference.parent.name + "'");
									throw new Error("Build error");
									}
								}else{
									if (this.parent.parent.parent.compiler.useOldTemplates) {
										var method = refMeth.reference.parent.overloadWithContext(cast.text, types, prev.context, parent);
										this.reference = Carbonite.Member.makeReference(prev.output.reference, method, prev.context);
										this.output = method.output.getWithContext(prev.context);
										}else{
											var info = refMeth.reference.parent.overloadWithCast(cast.text, types, parent);
											var method = info.method;
											for (var i = 0; i < info.casts.length; i++) {
												var arg = this.arguments[info.casts[i].index];
												arg.doesCast = true;
												arg.castMethod = info.casts[i].cast;
												}
											this.reference = new Carbonite.Members.ReferenceMethod(method, this.previous.context);
											this.output = method.output;
										}
								}
						}
				}
			}else{
				var cast = this.previous;
				if (cast.isConstant) {
					var types = [];
					for (var i = 0; i < this.arguments.length; i++) {
						var arg = this.arguments[i];
						types.push(arg.output);
						}
					this.reference = new Carbonite.Members.ReferenceMethod(cast.output.reference.overload("@construct", types, parent), prev.context);
					this.output = cast.output;
					}else{
						this.functionCheck(cast.output);
					}
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var arg = this.arguments[i];
			if (arg.output.owned && (arg.output.ownedUntil < this.parent.endOffset)) {
				arg.output.ownedUntil = this.parent.endOffset;
				arg.output.owned = false;
				}
			}
	}

}

Carbonite.Parts.Call.prototype.functionCheck = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var func = arguments[0];
		if (func.templates.length == 0) {
			func.buildError("Function type must have at least one template");
			}
		this.output = func.templates[0];
		if ((func.templates.length - 1) != this.arguments.length) {
			this.parent.buildError("Invalid argument count " + this.arguments.length + " for function " + func.lookPretty());
			}
		for (var i = 0; i < this.arguments.length; i++) {
			var arg = this.arguments[i];
			var check = func.templates[i + 1];
			if (arg.output.check(check) == false) {
				arg.output.buildError("Expression does not match argument " + check.lookPretty());
				}
			}
	}
}

Carbonite.Parts.Index = function () {
	this.previous = null;

	this.argument = null;

	this.reference = null;

	this.type = "index";

	this.output = null;

	this.parent = null;

	this.context = null;

	this.root = null;

	this.raw = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Part || (arguments[0] instanceof Carbonite.Parts.Reference) || (arguments[0] instanceof Carbonite.Parts.Dot) || (arguments[0] instanceof Carbonite.Parts.Call) || (arguments[0] instanceof Carbonite.Parts.Index)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Term || (arguments[2] instanceof Carbonite.Terms.Literal) || (arguments[2] instanceof Carbonite.Terms.Expression) || (arguments[2] instanceof Carbonite.Terms.Sequence) || (arguments[2] instanceof Carbonite.Terms.Prefix) || (arguments[2] instanceof Carbonite.Terms.Function)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prev = arguments[0];
		var arg = arguments[1];
		var parent = arguments[2];
		this.parent = parent;
		this.previous = prev;
		this.root = prev.root;
		var exp = new Carbonite.Expression(parent.container.parent.parent, parent.container);
		exp.loadFromRaw(arg);
		this.argument = exp;
		var castParam = [];
		castParam.push(exp.output);
		var index = prev.output.reference.overloadWithContext("@index", castParam, prev.context, parent);
		this.reference = Carbonite.Member.makeReference(prev.output.reference, index, prev.context);
		this.output = index.output.getWithContext(prev.output);
		this.context = this.output;
	}

}

Carbonite.Native = function () {
	this.parent = null;

	this.raw = null;

	this.type = "";

	this.output = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Native.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.type = raw["literalType"];
		this.loadLocation(this.parent.parent, raw);
		this.build();
	}
}

Carbonite.Native.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var type = raw["literalType"];
		var rtn = null;
		if (type == "number") {
			var isInt = raw["integer"];
			if (isInt) {
				rtn = new Carbonite.Natives.Integer(parent);
				}else{
					rtn = new Carbonite.Natives.Float(parent);
				}
			rtn.loadFromRaw(raw);
			}else if (type == "boolean") {
			rtn = new Carbonite.Natives.Boolean(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "string") {
			rtn = new Carbonite.Natives.String(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "array") {
			rtn = new Carbonite.Natives.Array(parent);
			rtn.loadFromRaw(raw);
			}
		return rtn;
	}
}

Carbonite.Native.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Native.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Native.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Natives.Integer = function () {
	this.value = 0;

	this.type = "integer";

	this.parent = null;

	this.raw = null;

	this.output = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Natives.Integer.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = this.raw["value"];
		if ("prefix" in this.raw && this.raw["prefix"] == "-") {
			this.value = 0 - this.value;
			}
		this.output = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		this.output.loadFromName("int", this.raw);
	}
}

Carbonite.Natives.Integer.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.type = raw["literalType"];
		this.loadLocation(this.parent.parent, raw);
		this.build();
	}
}

Carbonite.Natives.Integer.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var type = raw["literalType"];
		var rtn = null;
		if (type == "number") {
			var isInt = raw["integer"];
			if (isInt) {
				rtn = new Carbonite.Natives.Integer(parent);
				}else{
					rtn = new Carbonite.Natives.Float(parent);
				}
			rtn.loadFromRaw(raw);
			}else if (type == "boolean") {
			rtn = new Carbonite.Natives.Boolean(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "string") {
			rtn = new Carbonite.Natives.String(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "array") {
			rtn = new Carbonite.Natives.Array(parent);
			rtn.loadFromRaw(raw);
			}
		return rtn;
	}
}

Carbonite.Natives.Integer.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Natives.Integer.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Natives.Float = function () {
	this.value = 0;

	this.type = "float";

	this.parent = null;

	this.raw = null;

	this.output = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Natives.Float.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = this.raw["value"];
		if ("prefix" in this.raw && this.raw["prefix"] == "-") {
			var zero = 0;
			this.value = zero - this.value;
			}
		this.output = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		this.output.loadFromName("float", this.raw);
	}
}

Carbonite.Natives.Float.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.type = raw["literalType"];
		this.loadLocation(this.parent.parent, raw);
		this.build();
	}
}

Carbonite.Natives.Float.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var type = raw["literalType"];
		var rtn = null;
		if (type == "number") {
			var isInt = raw["integer"];
			if (isInt) {
				rtn = new Carbonite.Natives.Integer(parent);
				}else{
					rtn = new Carbonite.Natives.Float(parent);
				}
			rtn.loadFromRaw(raw);
			}else if (type == "boolean") {
			rtn = new Carbonite.Natives.Boolean(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "string") {
			rtn = new Carbonite.Natives.String(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "array") {
			rtn = new Carbonite.Natives.Array(parent);
			rtn.loadFromRaw(raw);
			}
		return rtn;
	}
}

Carbonite.Natives.Float.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Natives.Float.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Natives.Boolean = function () {
	this.value = false;

	this.type = "boolean";

	this.parent = null;

	this.raw = null;

	this.output = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Natives.Boolean.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = this.raw["value"];
		this.output = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		this.output.loadFromName("bool", this.raw);
	}
}

Carbonite.Natives.Boolean.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.type = raw["literalType"];
		this.loadLocation(this.parent.parent, raw);
		this.build();
	}
}

Carbonite.Natives.Boolean.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var type = raw["literalType"];
		var rtn = null;
		if (type == "number") {
			var isInt = raw["integer"];
			if (isInt) {
				rtn = new Carbonite.Natives.Integer(parent);
				}else{
					rtn = new Carbonite.Natives.Float(parent);
				}
			rtn.loadFromRaw(raw);
			}else if (type == "boolean") {
			rtn = new Carbonite.Natives.Boolean(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "string") {
			rtn = new Carbonite.Natives.String(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "array") {
			rtn = new Carbonite.Natives.Array(parent);
			rtn.loadFromRaw(raw);
			}
		return rtn;
	}
}

Carbonite.Natives.Boolean.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Natives.Boolean.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Natives.String = function () {
	this.value = "";

	this.type = "string";

	this.parent = null;

	this.raw = null;

	this.output = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Natives.String.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = this.raw["value"];
		this.output = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		this.output.loadFromName("string", this.raw);
	}
}

Carbonite.Natives.String.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.type = raw["literalType"];
		this.loadLocation(this.parent.parent, raw);
		this.build();
	}
}

Carbonite.Natives.String.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var type = raw["literalType"];
		var rtn = null;
		if (type == "number") {
			var isInt = raw["integer"];
			if (isInt) {
				rtn = new Carbonite.Natives.Integer(parent);
				}else{
					rtn = new Carbonite.Natives.Float(parent);
				}
			rtn.loadFromRaw(raw);
			}else if (type == "boolean") {
			rtn = new Carbonite.Natives.Boolean(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "string") {
			rtn = new Carbonite.Natives.String(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "array") {
			rtn = new Carbonite.Natives.Array(parent);
			rtn.loadFromRaw(raw);
			}
		return rtn;
	}
}

Carbonite.Natives.String.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Natives.String.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Natives.Array = function () {
	this.value = [];

	this.type = "array";

	this.parent = null;

	this.raw = null;

	this.output = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Natives.Array.prototype.build = function () {
	if (arguments.length == 0) {
		var arr = this.raw["value"];
		var arrayType = null;
		for (var i = 0; i < arr.length; i++) {
			var rawItem = arr[i];
			var item = new Carbonite.Expression(this.parent.parent, this.parent.container);
			item.loadFromRaw(rawItem);
			var aItem = new Carbonite.Natives.ArrayItem(i, item);
			this.value.push(aItem);
			if (arrayType == null) {
				arrayType = item.output;
				}else{
					if (arrayType.checkAsSibling(item.output) == false) {
						this.buildError("Illegal mixed type array, mixing '" + arrayType.reference.name + "' with '" + item.output.reference.name + "'");
						}
				}
			}
		this.output = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		this.output.loadFromName("array", this.raw);
		var tempType = new Carbonite.Type(this.parent.parent.compiler, this.parent.parent);
		var nme = "";
		if (arrayType != null) {
			nme = arrayType.getClassParent(arrayType.reference).name;
			}else{
				nme = "primitive";
			}
		tempType.loadFromName(nme, this.raw);
		this.output.templates.push(tempType);
	}
}

Carbonite.Natives.Array.prototype.loadFromRaw = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
		this.type = raw["literalType"];
		this.loadLocation(this.parent.parent, raw);
		this.build();
	}
}

Carbonite.Natives.Array.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		var type = raw["literalType"];
		var rtn = null;
		if (type == "number") {
			var isInt = raw["integer"];
			if (isInt) {
				rtn = new Carbonite.Natives.Integer(parent);
				}else{
					rtn = new Carbonite.Natives.Float(parent);
				}
			rtn.loadFromRaw(raw);
			}else if (type == "boolean") {
			rtn = new Carbonite.Natives.Boolean(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "string") {
			rtn = new Carbonite.Natives.String(parent);
			rtn.loadFromRaw(raw);
			}else if (type == "array") {
			rtn = new Carbonite.Natives.Array(parent);
			rtn.loadFromRaw(raw);
			}
		return rtn;
	}
}

Carbonite.Natives.Array.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Natives.Array.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Natives.ArrayItem = function () {
	this.index = 0;

	this.value = null;

	this.startOffset = 0;

	this.endOffset = 0;

	this.source = null;

	if (arguments.length == 2 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Expression) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var index = arguments[0];
		var value = arguments[1];
		this.index = index;
		this.value = value;
	}

}

Carbonite.Natives.ArrayItem.prototype.loadLocation = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent.source;
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.startOffset = raw["start"];
		this.endOffset = raw["end"];
		this.source = parent;
	}
}

Carbonite.Natives.ArrayItem.prototype.buildError = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var msg = arguments[0];
		this.source.error(this, msg);
		throw new Error("Build error");
	}
}

Carbonite.Assembler = function () {
	this.compiler = null;

	this.options = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var compiler = arguments[0];
		var options = arguments[1];
		this.compiler = compiler;
		this.options = options;
	}

}

Carbonite.Assembler.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Assemblers.Loose = function () {
	this.compiler = null;

	this.options = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var compiler = arguments[0];
		var options = arguments[1];
		this.compiler = compiler;
		this.options = options;
	}

}

Carbonite.Assemblers.Loose.prototype.build = function () {
	if (arguments.length == 0) {
		var rtn = "";
		for (var i = 0; i < this.compiler.roots.length; i++) {
			var root = this.compiler.roots[i];
			rtn += this.root(root);
			}
		return rtn;
	}
}

Carbonite.Assemblers.Loose.prototype.root = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var root = arguments[0];

	}
}

Carbonite.Assemblers.Loose.prototype.method = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var method = arguments[0];

	}
}

Carbonite.Assemblers.Loose.prototype.property = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Property) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var property = arguments[0];

	}
}

Carbonite.Assemblers.Loose.prototype.expression = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var expression = arguments[0];

	}
}

Carbonite.Assemblers.Javascript = function () {
	this.compiler = null;

	this.options = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var compiler = arguments[0];
		var options = arguments[1];
		this.compiler = compiler;
		this.options = options;
	}

}

Carbonite.Assemblers.Javascript.prototype.indent = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var n = arguments[0];
		var str = "";
		while (str.length < n) {
			str += "	";
			}
		return str;
	}
}

Carbonite.Assemblers.Javascript.prototype.root = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var root = arguments[0];
		if (this.compiler.doExport(root.route) == false) {
			return "";
			}
		if (root.doExport() == false) {
			return "";
			}
		if ((root.base == "relative") || (root.base == "interface")) {
			return "/" + "/Relative " + root.name + "\n";
			}else if (root.isFromHeader) {
			return "";
			}
		if (this.compiler.useOldTemplates == false) {
			if (root.templateClass) {
				if (root.instances.length > 0) {
					return this.root(root.instances[0].instance);
					}
				}
			}
		var props = [];
		var fixedProps = [];
		for (var i = 0; i < root.members.length; i++) {
			var member = root.members[i];
			if (member.type == "property") {
				var property = member;
				if ((property.binding != "fixed") && (property.abstract == false)) {
					props.push("	this." + property.name + " = " + this.expression(property.default, 0) + ";\n");
					}else{
						fixedProps.push(root.getRoute() + ".prototype." + property.name + " = " + this.expression(property.default, 0) + ";\n");
					}
				}
			}
		var cnsrs = root.getMethods("@construct");
		var args = "";
		if (cnsrs.length > 0) {
			if (cnsrs[0].hasFlag("trust")) {
				for (var i = 0; i < cnsrs[0].arguments.length; i++) {
					var arg = cnsrs[0].arguments[i];
					args += arg.name;
					if (i != cnsrs[0].arguments.length - 1) {
						args += ", ";
						}
					}
				}
			}
		var str = root.getRoute() + " = function (" + args + ") {\n" + props.join("\n") + "\n" + this.overload(cnsrs) + "\n}\n" + fixedProps.join("\n") + "\n" + this.methods(root);
		return str;
	}
}

Carbonite.Assemblers.Javascript.prototype.overload = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var methods = arguments[0];
		if (methods.length == 1) {
			var method = methods[0];
			if (method.hasFlag("trust")) {
				return this.methodStr(method);
				}
			}
		var overloads = [];
		for (var i = 0; i < methods.length; i++) {
			var method = methods[i];
			if (method.abstract == false) {
				var check = [];
				var argInit = [];
				for (var a = 0; a < method.arguments.length; a++) {
					var argument = method.arguments[a];
					check.push(" && (" + this.compareType("arguments[" + a + "]", argument.type) + " || typeof arguments[" + a + "] == 'undefined' || arguments[" + a + "] === null)");
					var defName = argument.name;
					if (argument.name == "arguments") {
						defName = "___arguments";
						}
					argInit.push("		var " + defName + " = arguments[" + a + "];\n");
					}
				overloads.push("	if (arguments.length == " + method.arguments.length + check.join("") + ") {\n" + argInit.join("") + this.methodStr(method) + "\n	}\n");
				}
			}
		return overloads.join("else ");
	}
}

Carbonite.Assemblers.Javascript.prototype.methodStr = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var method = arguments[0];
		var body = "";
		if (method.hasFlag("native")) {
			var argumentMaps = [];
			for (var i = 0;i < method.arguments.length;i++) {
				argumentMaps.push("arguments[" + i + "]");
				}
			var context = "this";
			var templates = [];
			var ctx = new Carbonite.Context(context, argumentMaps, templates);
			body = method.generate(ctx);
			}else{
				body = this.body(method.body, 2);
			}
		return body;
	}
}

Carbonite.Assemblers.Javascript.prototype.methods = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var root = arguments[0];
		var methods = new MethodMap();
		for (var i = 0; i < root.members.length; i++) {
			var member = root.members[i];
			if (member.type != "property") {
				if (member.hasFlag("inline") == false) {
					if (member.name != "@construct") {
						if ((member.hasFlag("relative") == false) && (member.abstract == false)) {
							var method = member;
							var overloads = methods.find(method.name);
							var check = [];
							var argInit = [];
							for (var a = 0; a < method.arguments.length; a++) {
								var argument = method.arguments[a];
								check.push(" && (" + this.compareType("arguments[" + a + "]", argument.type) + " || typeof arguments[" + a + "] == 'undefined' || arguments[" + a + "] === null)");
								var defName = argument.name;
								if (argument.name == "arguments") {
									defName = "___arguments";
									}
								argInit.push("		var " + defName + " = arguments[" + a + "];\n");
								}
							overloads.push("	if (arguments.length == " + method.arguments.length + check.join("") + ") {\n" + argInit.join("") + this.methodStr(method) + "\n	}\n");
							}
						}
					}
				}
			}
		var rtn = "";
		for (var i = 0; i < methods.methods.length; i++) {
			var methodOverload = methods.methods[i];
			var overloads = methodOverload.overloads;
			var gap = ".";
			var method = root.getMember(methodOverload.name);
			if (method.binding != "fixed") {
				gap = ".prototype.";
				}
			if ((overloads.length == 1) && ((method.hasFlag("trust")))) {
				var args = [];
				for (var a = 0; a < method.arguments.length; a++) {
					var argument = method.arguments[a];
					args.push(argument.name);
					}
				rtn += root.getRoute() + gap + method.getRealName() + " = function (" + args.join(", ") + ") {\n" + this.methodStr(method) + "}\n\n";
				}else{
					rtn += root.getRoute() + gap + method.getRealName() + " = function () {\n" + overloads.join("else ") + "}\n\n";
				}
			}
		return rtn;
	}
}

Carbonite.Assemblers.Javascript.prototype.compareType = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var varName = arguments[0];
		var to = arguments[1];
		if (to.late) {
			return "typeof " + varName + " != 'undefined'";
			}
		return this.compareClass(varName, to.reference);
	}
}

Carbonite.Assemblers.Javascript.prototype.compareClass = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var varName = arguments[0];
		var to = arguments[1];
		var native = "";
		if ((to.route == "int") || (to.route == "uint64") || (to.route == "int64") || (to.route == "uint32") || (to.route == "int32") || (to.route == "uint16") || (to.route == "int16") || (to.route == "uint8") || (to.route == "int8")) {
			native = "number";
			}else if (to.route == "string" || to.route == "char") {
			native = "string";
			}else if (to.route == "function") {
			native = "function";
			}else if (to.route == "bool") {
			native = "boolean";
			}else if (to.route == "float") {
			native = "number";
			}else if (to.route == "Exception") {
			return varName + " instanceof Error";
			}else if (to.route == "array") {
			return varName + " instanceof Array";
			}else if (to.route == "map") {
			native = "object";
			}
		if (native.length == 0) {
			if (to.route == "everything") {
				return "(typeof " + varName + " == 'object')";
				}else{
					var tests = [];
					if (to.route != "primitive") {
						tests.push(varName + " instanceof " + to.getRoute());
						}
					for (var i = 0; i < to.descendants.length; i++) {
						var child = to.descendants[i];
						tests.push(this.compareClass(varName, child));
						}
					return "(" + tests.join(" || ") + ")";
				}
			}else{
				return "typeof " + varName + " == '" + native + "'";
			}
	}
}

Carbonite.Assemblers.Javascript.prototype.body = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var body = arguments[0];
		var indent = arguments[1];
		var statements = [];
		for (var i = 0; i < body.statements.length; i++) {
			var statement = body.statements[i];
			statements.push(this.indent(indent) + this.statement(statement, indent + 1));
			}
		return statements.join("\n");
	}
}

Carbonite.Assemblers.Javascript.prototype.define = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Define) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var define = arguments[0];
		var indent = arguments[1];
		var set = "";
		if (define.initializer != null) {
			set = " = " + this.expression(define.initializer, indent);
			}
		var defName = define.name;
		if (defName == "arguments") {
			defName = "___" + defName;
			}
		return "var " + defName + set;
	}
}

Carbonite.Assemblers.Javascript.prototype.statement = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Statement || (arguments[0] instanceof Carbonite.Statements.If) || (arguments[0] instanceof Carbonite.Statements.Return) || (arguments[0] instanceof Carbonite.Statements.Define) || (arguments[0] instanceof Carbonite.Statements.For) || (arguments[0] instanceof Carbonite.Statements.ForIn) || (arguments[0] instanceof Carbonite.Statements.While) || (arguments[0] instanceof Carbonite.Statements.Continue) || (arguments[0] instanceof Carbonite.Statements.Break) || (arguments[0] instanceof Carbonite.Statements.Try) || (arguments[0] instanceof Carbonite.Statements.Throw) || (arguments[0] instanceof Carbonite.Statements.Native) || (arguments[0] instanceof Carbonite.Statements.Expression) || (arguments[0] instanceof Carbonite.Statements.Yield)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var statement = arguments[0];
		var indent = arguments[1];
		if (statement.type == "define") {
			var def = statement;
			return this.define(def.define, indent) + ";";
			}else if (statement.type == "expression") {
			var exp = statement;
			return this.expression(exp.expression, indent) + ";";
			}else if (statement.type == "throw") {
			var exp = statement;
			return "throw " + this.expression(exp.expression, indent) + ";";
			}else if (statement.type == "return") {
			var exp = statement;
			return "return " + this.expression(exp.expression, indent) + ";";
			}else if (statement.type == "yield") {
			var exp = statement;
			return "$_c_yield_cb(" + this.expression(exp.expression, indent) + ");";
			}else if (statement.type == "if") {
			var ifState = statement;
			var str = "";
			str = "if (" + this.expression(ifState.check, indent) + ") {\n" + this.body(ifState.body, indent) + "\n" + this.indent(indent) + "}";
			for (var i = 0; i < ifState.alternatives.length; i++) {
				var alt = ifState.alternatives[i];
				if (alt.doCheck) {
					str += "else if (" + this.expression(alt.check, indent) + ") {\n" + this.body(alt.body, indent) + "\n" + this.indent(indent) + "}";
					}else{
						str += "else{\n" + this.body(alt.body, indent + 1) + "\n" + this.indent(indent) + "}";
					}
				}
			return str;
			}else if (statement.type == "for") {
			var forState = statement;
			var str = "";
			str = "for (" + this.define(forState.define, indent) + ";" + this.expression(forState.check, indent) + ";" + this.expression(forState.iterate, indent) + ") {\n" + this.body(forState.body, indent) + "\n" + this.indent(indent) + "}";
			return str;
			}else if (statement.type == "try") {
			var tryState = statement;
			var str = "";
			var catches = [];
			for (var i = 0; i < tryState.catches.length; i++) {
				var cat = tryState.catches[i];
				catches.push(this.indent(indent) + "if (" + this.compareType("_carb_catch_var", cat.overload) + " || typeof _carb_catch_var == 'undefined' || _carb_catch_var === null) {\n" + this.indent(indent + 1) + "var " + cat.name + " = _carb_catch_var;\n" + this.body(cat.body, indent) + "\n" + this.indent(indent) + "}");
				}
			str = "try {\n" + this.body(tryState.body, indent) + "\n" + this.indent(indent - 1) + "} catch (_carb_catch_var) {\n" + catches.join("else") + "\n" + this.indent(indent - 1) + "}";
			return str;
			}else if (statement.type == "forin") {
			var forState = statement;
			var str = "";
			if (forState.iterate.output.reference.route == "array") {
				str = "for (" + this.define(forState.define, indent) + " = 0; " + forState.define.name + " < " + this.expression(forState.iterate, indent) + ".length; " + forState.define.name + "++) {\n" + this.body(forState.body, indent) + "\n" + this.indent(indent) + "}";
				}else{
					str = "for (" + this.define(forState.define, indent) + " in " + this.expression(forState.iterate, indent) + ") {\n" + this.body(forState.body, indent) + "\n" + this.indent(indent) + "}";
				}
			return str;
			}else if (statement.type == "while") {
			var whileState = statement;
			return "while (" + this.expression(whileState.check, indent) + ") {\n" + this.body(whileState.body, indent) + "\n" + this.indent(indent) + "}";
			}else if (statement.type == "continue") {
			return "continue;";
			}else if (statement.type == "break") {
			return "break;";
			}else if (statement.type == "native") {
			var nativeState = statement;
			if (nativeState.platform == "javascript") {
				return nativeState.content;
				}
			return "";
			}
	}
}

Carbonite.Assemblers.Javascript.prototype.method = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var method = arguments[0];

	}
}

Carbonite.Assemblers.Javascript.prototype.escape = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var content = arguments[0];
		var newString = "";
		for (var i = 0;i < content.length;i++) {
			var cur = content[i];
			if (cur == "\"" || cur == "\\") {
				newString += "\\" + cur;
				}else if (cur == "\n") {
				newString += "\\n";
				}else if (cur == "\r") {
				newString += "\\r";
				}else{
					newString += cur;
				}
			}
		return newString;
	}
}

Carbonite.Assemblers.Javascript.prototype.native = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Native || (arguments[0] instanceof Carbonite.Natives.Integer) || (arguments[0] instanceof Carbonite.Natives.Float) || (arguments[0] instanceof Carbonite.Natives.Boolean) || (arguments[0] instanceof Carbonite.Natives.String) || (arguments[0] instanceof Carbonite.Natives.Array)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var native = arguments[0];
		if (native.type == "integer") {
			var cast = native;
			var rtn = cast.value;
			return rtn;
			}else if (native.type == "float") {
			var cast = native;
			var rtn = cast.value;
			return rtn;
			}else if (native.type == "number") {
			var cast = native;
			var rtn = cast.value;
			return "" + rtn;
			}else if (native.type == "string" || native.type == "char") {
			var cast = native;
			return "\"" + this.escape(cast.value) + "\"";
			return "\"" + cast.value.replace(new RegExp("\\".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\\\").replace(new RegExp("\"".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\\"").replace(new RegExp("\n".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\n").replace(new RegExp("\r".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\r") + "\"";
			}else if (native.type == "array") {
			var cast = native;
			var expressions = [];
			for (var i = 0; i < cast.value.length; i++) {
				var item = cast.value[i];
				expressions.push(this.expression(item.value, 0));
				}
			return "[" + expressions.join(", ") + "]";
			}else if (native.type == "boolean") {
			var cast = native;
			if (cast.value) {
				return "true";
				}else{
					return "false";
				}
			}
	}
}

Carbonite.Assemblers.Javascript.prototype.property = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Property) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var property = arguments[0];

	}
}

Carbonite.Assemblers.Javascript.prototype.term = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Term || (arguments[0] instanceof Carbonite.Terms.Literal) || (arguments[0] instanceof Carbonite.Terms.Expression) || (arguments[0] instanceof Carbonite.Terms.Sequence) || (arguments[0] instanceof Carbonite.Terms.Prefix) || (arguments[0] instanceof Carbonite.Terms.Function)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var term = arguments[0];
		var indent = arguments[1];
		if (term.type == "expression") {
			var cast = term;
			var wrap = "(";
			var wEnd = ")";
			if (cast.expression.grouped == false) {
				wrap = "";
				wEnd = "";
				}
			return wrap + this.expression(cast.expression, indent) + wEnd;
			}else if (term.type == "literal") {
			var cast = term;
			return this.native(cast.native);
			}else if (term.type == "function") {
			var cast = term;
			return this.func(cast.function, indent);
			}else if (term.type == "prefix") {
			var cast = term;
			var doNew = "new ";
			var cstrs = cast.expression.output.reference.getMethods("@construct");
			var cnstr = cstrs[0];
			if (cnstr.hasFlag("inline")) {
				doNew = "";
				}
			if (cast.prefix == "new") {
				return doNew + this.expression(cast.expression, indent);
				}
			}else if (term.type == "sequence") {
			var cast = term;
			return this.sequence(cast, indent);
			}
	}
}

Carbonite.Assemblers.Javascript.prototype.sequence = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Terms.Sequence) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var sequence = arguments[0];
		var indent = arguments[1];
		var rtn = "";
		for (var i = 0; i < sequence.parts.length; i++) {
			var part = sequence.parts[i];
			if (part.type == "reference") {
				var cast = part;
				if (cast.isConstant) {
					if (cast.isConstructor) {
						if (cast.constantReference.reference.name == "empty") {
							rtn += "null";
							}else{
								rtn += cast.constantReference.reference.getRoute();
							}
						}else{
							rtn += cast.constantReference.reference.getRoute();
						}
					}else{
						if (cast.reference.name == "arguments") {
							rtn += "___" + cast.reference.name;
							}else{
								rtn += cast.reference.name;
							}
					}
				}else if (part.type == "dot") {
				var cast = part;
				if (cast.reference != null) {
					if (cast.reference.type == "property") {
						var refCast = cast.reference;
						if (refCast.reference.hasFlag("native")) {
							if (refCast.reference.hasFlag("inline") == false) {
								rtn += "." + refCast.reference.name;
								}
							}else{
								rtn += "." + refCast.reference.name;
							}
						}else{
							var refMeth = cast.reference;
							if (refMeth.reference.hasFlag("native") == false) {
								rtn += "." + refMeth.reference.getRealName();
								}else if (refMeth.reference.hasFlag("property")) {
								var isNotCall = true;
								var castI = i;
								var ni = parseInt(castI) + 1;
								if (ni < sequence.parts.length) {
									var next = sequence.parts[ni];
									if (next.type == "call") {
										isNotCall = false;
										}
									}
								if (isNotCall) {
									var strArr = [];
									rtn = this.callMethod(refMeth.reference, strArr, rtn, indent);
									}
								}
						}
					}else{
						rtn += "." + cast.output.reference.name;
					}
				}else if (part.type == "call") {
				var cast = part;
				if (cast.previous.type == "property") {

					}else if (cast.reference != null) {
					var normal = true;
					var callOn = cast.reference.getReference();
					var methodName = "";
					if (callOn.hasFlag("inline") == false) {
						methodName = "." + callOn.name;
						}
					if (callOn.hasFlag("native")) {
						rtn = this.callMethod(callOn, cast.arguments, rtn + methodName, indent);
						}else{
							rtn += this.callMethod(callOn, cast.arguments, "", indent);
						}
					}else{
						var args = [];
						for (var a = 0; a < cast.arguments.length; a++) {
							args.push(this.expression(cast.arguments[a], 0));
							}
						rtn += "(" + args.join(", ") + ")";
					}
				}else if (part.type == "index") {
				var cast = part;
				var callOn = cast.reference.getReference();
				var methodName = "";
				if (callOn.hasFlag("inline") == false) {
					var attrs = callOn.getAttributes("name");
					var mp = attrs[0];
					var attr = mp["value"];
					methodName = "." + attr;
					}
				var castArr = [];
				castArr.push(cast.argument);
				if (callOn.hasFlag("native")) {
					rtn = this.callMethod(callOn, castArr, rtn + methodName, indent);
					}else{
						rtn += methodName + this.callMethod(callOn, castArr, "", indent);
					}
				}
			}
		return rtn;
	}
}

Carbonite.Assemblers.Javascript.prototype.callMethodWithStrings = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'number' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var method = arguments[0];
		var ___arguments = arguments[1];
		var context = arguments[2];
		var indent = arguments[3];
		var normal = true;
		if (method.hasFlag("native")) {
			if (method.hasFlag("inline")) {
				normal = false;
				}
			}
		if (normal) {
			return context + "(" + ___arguments.join(", ") + ")";
			}else{
				var templates = [];
				var ctx = new Carbonite.Context(context, ___arguments, templates);
				return method.generate(ctx);
			}
	}
}

Carbonite.Assemblers.Javascript.prototype.callMethod = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'number' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var method = arguments[0];
		var ___arguments = arguments[1];
		var context = arguments[2];
		var indent = arguments[3];
		var args = [];
		for (var i = 0; i < ___arguments.length; i++) {
			var arg = ___arguments[i];
			args.push(this.expression(arg, indent));
			}
		return this.callMethodWithStrings(method, args, context, indent);
	}
}

Carbonite.Assemblers.Javascript.prototype.func = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Function) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var func = arguments[0];
		var indent = arguments[1];
		var args = [];
		for (var i = 0; i < func.arguments.length; i++) {
			var arg = func.arguments[i];
			args.push(arg.name);
			}
		return "function (" + args.join(", ") + ") {\n" + this.body(func.body, indent) + "\n" + this.indent(indent) + "}";
	}
}

Carbonite.Assemblers.Javascript.prototype.expression = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var expression = arguments[0];
		var indent = arguments[1];
		var rtn = "";
		var first = this.term(expression.first, indent);
		if (expression.reference != null) {
			var args = [];
			if (expression.last != null) {
				args.push(this.term(expression.last, indent));
				}
			if (expression.reference.hasFlag("native")) {
				return this.callMethodWithStrings(expression.reference, args, first, indent);
				}else{
					first += "." + expression.reference.getRealName() + this.callMethodWithStrings(expression.reference, args, "", indent);
				}
			}
		rtn = first;
		if (expression.grouped) {
			return "(" + rtn + ")";
			}else{
				return rtn;
			}
	}
}

Carbonite.Assemblers.Javascript.prototype.build = function () {
	if (arguments.length == 0) {
		var rtn = "";
		for (var i = 0; i < this.compiler.roots.length; i++) {
			var root = this.compiler.roots[i];
			rtn += this.root(root);
			}
		return rtn;
	}
}

MethodOverload = function () {
	this.name = "";

	this.overloads = [];

	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		this.name = name;
	}

}

MethodMap = function () {
	this.methods = [];

	if (arguments.length == 0) {

	}

}

MethodMap.prototype.find = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.methods.length; i++) {
			if (this.methods[i].name == name) {
				return this.methods[i].overloads;
				}
			}
		var method = new MethodOverload(name);
		this.methods.push(method);
		return method.overloads;
	}
}

Carbonite.Assemblers.Cpp = function () {
	this.compiler = null;

	this.options = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var compiler = arguments[0];
		var options = arguments[1];
		this.compiler = compiler;
		this.options = options;
	}

}

Carbonite.Assemblers.Cpp.prototype.build = function () {
	if (arguments.length == 0) {
		var rtn = "// ------- Header ------- //\n\n";
		for (var i = 0; i < this.compiler.router.levelMap.length; i++) {
			if (i != 0) {
				continue;
				}
			var level = this.compiler.router.levelMap[i];
			for (var j = 0; j < level.names.length; j++) {
				var root = level.names[j];
				if (root.base != "relative") {
					rtn += "class " + root.getRoute("::") + ";\n";
					}
				}
			}
		for (var i = 0; i < this.compiler.roots.length; i++) {
			var root = this.compiler.roots[i];
			rtn += this.root(root, false);
			}
		rtn += "\n\n// ------- Source ------- //\n\n";
		for (var i = 0; i < this.compiler.roots.length; i++) {
			var root = this.compiler.roots[i];
			rtn += this.root(root, true);
			}
		if (this.compiler.noCore == false) {
			return this.compiler.getLibraryFile("cpp/native.cpp") + "\n\n\n\n" + rtn;
			}
		return rtn;
	}
}

Carbonite.Assemblers.Cpp.prototype.root = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'boolean' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var root = arguments[0];
		var source = arguments[1];
		if (root.base == "relative") {
			return "/" + "/Relative " + root.name + "\n";
			}
		var body = "";
		if (root.base == "namespace") {
			if (source) {
				return "";
				}
			var children = [];
			for (var i = 0; i < root.children.length; i++) {
				var cls = root.children[i];
				if (cls.base != "relative") {
					children.push("class " + cls.name + ";\n");
					}
				}
			body = "{\npublic:\n" + children.join("\n") + "\n};";
			}else{
				if (source) {
					return this.methods(root, source);
					}else{
						var children = [];
						for (var i = 0; i < root.children.length; i++) {
							var cls = root.children[i];
							if (cls.base != "relative") {
								children.push("class " + cls.name + ";\n");
								}
							}
						body = "{\npublic:\n" + children.join("\n") + this.properties(root, source) + this.methods(root, source) + "\n};\n\n";
					}
			}
		var pref = "";
		if (root.parent != null) {
			var castParent = root.parent;
			pref = castParent.getRoute("::") + "::";
			}
		var inherits = [];
		var iPrefix = "";
		for (var i = 0; i < root.inherits.length; i++) {
			var inheritRoot = root.inherits[i];
			if (inheritRoot.route != "everything") {
				inherits.push("public " + inheritRoot.getRoute("::"));
				iPrefix = " : ";
				}
			}
		return "class " + pref + root.name + iPrefix + inherits.join(", ") + body;
	}
}

Carbonite.Assemblers.Cpp.prototype.properties = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'boolean' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var root = arguments[0];
		var source = arguments[1];
		var rtn = "";
		for (var i = 0; i < root.members.length; i++) {
			var member = root.members[i];
			if (member.type == "property") {
				var prop = member;
				var route = this.route(prop.output);
				var typeStr = route;
				if (prop.output.isPrimitiveValue() == false) {
					if (prop.reference == false) {
						typeStr = "" + route + "";
						}else{
							typeStr = route;
						}
					}
				var prefix = "";
				if (prop.binding == "fixed") {
					prefix = "static ";
					}
				var body = ";\n";
				if (source) {
					body = this.expression(prop.default) + ";\n";
					}
				rtn += prefix + typeStr + " " + prop.name + body;
				}
			}
		return rtn;
	}
}

Carbonite.Assemblers.Cpp.prototype.route = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		if (what.route == "array") {
			return "std::unique_ptr<std::vector<" + this.route(what.resolvedTemplates[0]) + ">>";
			}else if (what.route == "map") {
			return "std::unique_ptr<std::map<std::string, " + this.route(what.resolvedTemplates[0]) + ">>";
			}else if (what.route == "string") {
			return "std::string";
			}else if (what.route == "primitive") {
			return "_c_primitive";
			}else if (what.primitiveValue == false) {
			return "std::unique_ptr<" + what.getRoute("::") + ">";
			}
		return what.getRoute("::");
	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var what = arguments[0];
		var refFlag = "";
		if (what.containsReference) {
			refFlag = "&";
			}
		if (what.reference.route == "array") {
			return "std::unique_ptr<std::vector<" + this.route(what.templates[0]) + ">>" + refFlag;
			}else if (what.reference.route == "map") {
			return "std::unique_ptr<std::map<std::string, " + this.route(what.templates[0]) + ">>" + refFlag;
			}else if (what.reference.route == "string") {
			return "std::optional<std::string>";
			}else if (what.reference.route == "primitive") {
			return "_c_primitive";
			}else if (what.reference.route == "void") {
			return "void";
			}else if (what.reference.route == "null") {
			return "std::nullopt";
			}else if (what.reference.route == "Error") {
			return "_c_error";
			}else if (what.reference.route == "function") {
			var args = [];
			for (var i = 0; i < what.templates.length; i++) {
				if (i > 0) {
					args.push(this.route(what.templates[i]));
					}
				}
			return "std::function<" + this.route(what.templates[0]) + "(" + args.join(", ") + ")>";
			}else if (what.reference.primitiveValue == false) {
			if (what.containsReference) {
				return what.reference.getRoute("::") + "*";
				}else{
					return "std::unique_ptr<" + what.reference.getRoute("::") + ">";
				}
			}
		if (what.isPure) {
			return what.reference.getRoute("::");
			}else{
				return this.wrapIf(what.nullable, what.reference.getRoute("::"), "std::optional<", ">");
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.wrapIf = function () {
	if (arguments.length == 4 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'string' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var test = arguments[0];
		var subject = arguments[1];
		var w1 = arguments[2];
		var w2 = arguments[3];
		if (test) {
			return w1 + subject + w2;
			}else{
				return subject;
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.methods = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'boolean' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var root = arguments[0];
		var source = arguments[1];
		var methods = [];
		for (var i = 0; i < root.members.length; i++) {
			var member = root.members[i];
			if (member.type != "property") {
				if (member.hasFlag("inline") == false) {
					if (member.hasFlag("relative") == false) {
						if (member.abstract && member.name[0] == "@") {
							continue;
							}
						var method = member;
						var args = [];
						for (var a = 0; a < method.arguments.length; a++) {
							var arg = method.arguments[a];
							var typeStr = this.route(arg.type);
							if (arg.isByValue() == false) {
								if (arg.reference) {
									typeStr = typeStr;
									}else{
										typeStr = "" + typeStr + "";
									}
								}
							args.push(typeStr + " " + this.localName(arg.name));
							}
						var prefix = "";
						if (method.binding == "fixed") {
							prefix = "static ";
							}
						var rte = this.route(method.output);
						var nme = method.getRealName();
						var top = "";
						if (member.name == "@construct") {
							rte = "";
							prefix = "";
							nme = root.name;
							top = "\n";
							for (var m = 0; m < root.members.length; m++) {
								var propMember = root.members[m];
								if (propMember.type == "property") {
									var property = propMember;
									if ((property.binding != "fixed") && (property.abstract == false)) {
										top += "this->" + property.name + " = " + this.expression(property.default) + ";\n";
										}
									}
								}
							}
						if (member.name == "@cast") {
							nme = this.getCastName(member, "");
							}
						var body = ";\n";
						if (source && member.abstract == false) {
							body = "{\n" + top + this.body(method.body) + "\n}";
							nme = root.getRoute("::") + "::" + nme;
							}
						if (member.abstract && source) {
							continue;
							}else if (member.abstract) {
							body = " {}";
							}
						methods.push(prefix + rte + " " + nme + "(" + args.join(", ") + ")" + body);
						}
					}
				}
			}
		return methods.join("\n\n");
	}
}

Carbonite.Assemblers.Cpp.prototype.getCastName = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Member || (arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || (arguments[0] instanceof Carbonite.Members.Property)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var member = arguments[0];
		var prefix = arguments[1];
		var nme = "to" + member.output.reference.route.replace(new RegExp(".".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "");
		if (member.parent.hasMember(nme)) {
			return this.getCastName(member, "_" + prefix);
			}
		return nme;
	}
}

Carbonite.Assemblers.Cpp.prototype.body = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var body = arguments[0];
		var statements = [];
		for (var i = 0; i < body.statements.length; i++) {
			var statement = body.statements[i];
			statements.push(this.statement(statement));
			}
		return statements.join("\n");
	}
}

Carbonite.Assemblers.Cpp.prototype.poly = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var target = arguments[0];
		var real = arguments[1];
		var expr = arguments[2];
		if (target.polymorph(real)) {
			return "static_cast<" + this.route(target) + ">(" + expr + ")";
			}else{
				return expr;
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.define = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Define) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var define = arguments[0];
		var set = "";
		if (define.initializer != null) {
			set = this.expression(define.initializer);
			if (define.initializer.output.isPrimitiveValue() == false && define.initializer.output.reference.route != "null") {
				if (define.output.containsReference == false) {
					set = "std::move(" + set + ")";
					}else if (define.output.containsReference == true && define.initializer.output.containsReference == false) {
					set = set + ".get()";
					}
				}
			set = this.poly(define.output, define.initializer.output, set);
			set = " = " + set;
			}
		var typeStr = this.route(define.output);
		if (define.output.isPrimitiveValue() == false || define.output.reference.name == "array" || define.output.reference.name == "map") {
			typeStr = "" + typeStr + "";
			}
		return typeStr + " " + this.localName(define.name) + set;
	}
}

Carbonite.Assemblers.Cpp.prototype.localName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return "_L" + name;
	}
}

Carbonite.Assemblers.Cpp.prototype.statement = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Statement || (arguments[0] instanceof Carbonite.Statements.If) || (arguments[0] instanceof Carbonite.Statements.Return) || (arguments[0] instanceof Carbonite.Statements.Define) || (arguments[0] instanceof Carbonite.Statements.For) || (arguments[0] instanceof Carbonite.Statements.ForIn) || (arguments[0] instanceof Carbonite.Statements.While) || (arguments[0] instanceof Carbonite.Statements.Continue) || (arguments[0] instanceof Carbonite.Statements.Break) || (arguments[0] instanceof Carbonite.Statements.Try) || (arguments[0] instanceof Carbonite.Statements.Throw) || (arguments[0] instanceof Carbonite.Statements.Native) || (arguments[0] instanceof Carbonite.Statements.Expression) || (arguments[0] instanceof Carbonite.Statements.Yield)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var statement = arguments[0];
		if (statement.type == "define") {
			var def = statement;
			return this.define(def.define) + ";";
			}else if (statement.type == "expression") {
			var exp = statement;
			return this.expression(exp.expression) + ";";
			}else if (statement.type == "return") {
			var exp = statement;
			if (statement.container.parent.output.containsReference && exp.expression.output.containsReference == false) {
				exp.buildError("Illegal return by reference.");
				}
			var expStr = this.expression(exp.expression);
			if (exp.expression.output.isPrimitiveValue() == false && exp.expression.output.reference.route != "null" && statement.container.parent.output.containsReference == false && exp.expression.output.containsReference == false) {
				expStr = "std::move(" + expStr + ")";
				}
			return "return " + expStr + ";";
			}else if (statement.type == "yield") {
			var exp = statement;
			if (statement.container.parent.output.containsReference && exp.expression.output.containsReference == false) {
				exp.buildError("Illegal yield by reference.");
				}
			var expStr = this.expression(exp.expression);
			if (exp.expression.output.isPrimitiveValue() == false && exp.expression.output.reference.route != "null" && statement.container.parent.output.containsReference == false && exp.expression.output.containsReference == false) {
				expStr = "std::move(" + expStr + ")";
				}
			return "return " + expStr + ";";
			}else if (statement.type == "if") {
			var ifState = statement;
			var str = "";
			str = "if (" + this.expression(ifState.check) + ") {\n" + this.body(ifState.body) + "}";
			for (var i = 0; i < ifState.alternatives.length; i++) {
				var alt = ifState.alternatives[i];
				if (alt.doCheck) {
					str += "else if (" + this.expression(alt.check) + ") {\n" + this.body(alt.body) + "}";
					}else{
						str += "else{\n" + this.body(alt.body) + "}";
					}
				}
			return str;
			}else if (statement.type == "for") {
			var forState = statement;
			var str = "";
			str = "for (" + this.define(forState.define) + ";" + this.expression(forState.check) + ";" + this.expression(forState.iterate) + ") {\n" + this.body(forState.body) + "}";
			return str;
			}else if (statement.type == "forin") {
			var forState = statement;
			var str = "";
			if (forState.iterate.output.reference.route == "array") {
				str = "for (" + this.define(forState.define) + " = 0; " + this.localName(forState.define.name) + " < " + this.expression(forState.iterate) + "->size(); " + this.localName(forState.define.name) + "++) {\n" + this.body(forState.body) + "}";
				}else{
					str = "for (" + this.define(forState.define) + " in " + this.expression(forState.iterate) + ") {\n" + this.body(forState.body) + "}";
				}
			return str;
			}else if (statement.type == "while") {
			var whileState = statement;
			return "while (" + this.expression(whileState.check) + ") {\n" + this.body(whileState.body) + "}";
			}else if (statement.type == "continue") {
			return "continue;";
			}else if (statement.type == "break") {
			return "break;";
			}else if (statement.type == "native") {
			var nativeState = statement;
			if (nativeState.platform == "cpp") {
				return nativeState.content;
				}
			return "";
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.native = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Native || (arguments[0] instanceof Carbonite.Natives.Integer) || (arguments[0] instanceof Carbonite.Natives.Float) || (arguments[0] instanceof Carbonite.Natives.Boolean) || (arguments[0] instanceof Carbonite.Natives.String) || (arguments[0] instanceof Carbonite.Natives.Array)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var native = arguments[0];
		if (native.type == "integer") {
			var cast = native;
			var rtn = cast.value.toString();
			return rtn;
			}else if (native.type == "float") {
			var cast = native;
			var rtn = cast.value.toString();
			return rtn;
			}else if (native.type == "number") {
			var cast = native;
			var rtn = cast.value.toString();
			return rtn;
			}else if (native.type == "string") {
			var cast = native;
			return "std::string(\"" + cast.value.replace(new RegExp("\r".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\r").replace(new RegExp("\\\\".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\\\").replace(new RegExp("\"".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\\"").replace(new RegExp("\n".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\n") + "\")";
			}else if (native.type == "array") {
			var cast = native;
			var expressions = [];
			for (var i = 0; i < cast.value.length; i++) {
				var item = cast.value[i];
				expressions.push(this.expression(item.value));
				}
			return "{" + expressions.join(", ") + "}";
			}else if (native.type == "boolean") {
			var cast = native;
			if (cast.value) {
				return "true";
				}else{
					return "false";
				}
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.cast = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var method = arguments[0];
		var src = arguments[1];
		var ctx = "(" + src + ")->" + this.getCastName(method, "");
		if (method.hasFlag("native") && method.hasFlag("inline")) {
			ctx = src;
			}
		return "(" + this.callMethod(method, [], [], ctx) + ")";
	}
}

Carbonite.Assemblers.Cpp.prototype.termCast = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Term || (arguments[0] instanceof Carbonite.Terms.Literal) || (arguments[0] instanceof Carbonite.Terms.Expression) || (arguments[0] instanceof Carbonite.Terms.Sequence) || (arguments[0] instanceof Carbonite.Terms.Prefix) || (arguments[0] instanceof Carbonite.Terms.Function)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var term = arguments[0];
		var src = arguments[1];
		if (term.doesCast) {
			return this.cast(term.castMethod, src);
			}else{
				return src;
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.term = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Term || (arguments[0] instanceof Carbonite.Terms.Literal) || (arguments[0] instanceof Carbonite.Terms.Expression) || (arguments[0] instanceof Carbonite.Terms.Sequence) || (arguments[0] instanceof Carbonite.Terms.Prefix) || (arguments[0] instanceof Carbonite.Terms.Function)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var term = arguments[0];
		if (term.type == "expression") {
			var cast = term;
			return this.termCast(term, this.expression(cast.expression));
			}else if (term.type == "literal") {
			var cast = term;
			return this.termCast(term, this.native(cast.native));
			}else if (term.type == "function") {
			var cast = term;
			return this.termCast(term, this.func(cast.function));
			}else if (term.type == "prefix") {
			var cast = term;
			var doNew = "new ";
			var cstrs = cast.expression.output.reference.getMethods("@construct");
			var cnstr = cstrs[0];
			if (cast.expression.output.reference.name != "map" && cast.expression.output.reference.name != "array") {
				if (cnstr.hasFlag("inline")) {
					doNew = "";
					}
				}
			if (cast.prefix == "new") {
				return this.termCast(term, this.route(cast.expression.output) + "(" + doNew + this.expression(cast.expression) + ")");
				}
			}else if (term.type == "sequence") {
			var cast = term;
			return this.termCast(term, this.sequence(cast));
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.sequence = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Terms.Sequence) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var sequence = arguments[0];
		var rtn = "";
		for (var i = 0; i < sequence.parts.length; i++) {
			var part = sequence.parts[i];
			if (part.type == "reference") {
				var cast = part;
				if (cast.isConstant) {
					if (cast.isConstructor) {
						if (cast.constantReference.reference.name == "empty") {
							rtn += "null";
							}else{
								rtn += cast.constantReference.reference.getRoute("::");
							}
						}else{
							rtn += cast.constantReference.reference.name;
						}
					}else{
						if (cast.reference.isLocal) {
							rtn += this.localName(cast.reference.name);
							}else{
								rtn += cast.reference.name;
							}
					}
				}else if (part.type == "dot") {
				var cast = part;
				if (cast.reference != null) {
					if (cast.reference.type == "property") {
						var refCast = cast.reference;
						var access = "->";
						if (refCast.reference.binding == "fixed") {
							access = "::";
							}
						if (refCast.reference.hasFlag("native")) {
							if (refCast.reference.hasFlag("inline") == false) {
								rtn += access + refCast.reference.name;
								}
							}else{
								rtn += access + refCast.reference.name;
							}
						}else{
							var refMeth = cast.reference;
							var access = "->";
							if (refMeth.reference.binding == "fixed") {
								access = "::";
								}
							if (refMeth.reference.hasFlag("native") == false) {
								rtn += access + refMeth.reference.getRealName();
								}else if (refMeth.reference.hasFlag("property")) {
								var isNotCall = true;
								var castI = i;
								var ni = parseInt(castI) + 1;
								if (ni < sequence.parts.length) {
									var next = sequence.parts[ni];
									if (next.type == "call") {
										isNotCall = false;
										}
									}
								if (isNotCall) {
									var strArr = [];
									rtn = this.callMethod(refMeth.reference, strArr, sequence.templates, rtn);
									}
								}
						}
					}else{
						rtn += "::" + cast.output.reference.name;
					}
				}else if (part.type == "call") {
				var cast = part;
				if (cast.previous.type == "property") {

					}else if (cast.reference != null) {
					var normal = true;
					var callOn = cast.reference.getReference();
					var methodName = "";
					if (callOn.hasFlag("inline") == false) {
						methodName = "->" + callOn.name;
						}
					if (callOn.hasFlag("native")) {
						var seqTemps = sequence.templates;
						if (sequence.templates.length == 0) {
							if (sequence.parts.length > 0) {
								var first = sequence.parts[0];
								if (first.type == "reference") {
									var castFirst = first;
									if (castFirst.isConstant && castFirst.constantReference.templates.length > 0) {
										seqTemps = castFirst.constantReference.templates;
										}
									}
								}
							}
						rtn = this.callMethod(callOn, cast.arguments, seqTemps, rtn + methodName);
						}else{
							rtn += this.callMethod(callOn, cast.arguments, sequence.templates, "");
						}
					}else{
						var args = [];
						for (var a = 0; a < cast.arguments.length; a++) {
							var arg = cast.arguments[a];
							var exp = this.expression(cast.arguments[a]);
							if (arg.getOutput().isPrimitiveValue() == false && cast.reference.reference.arguments[a].reference == false) {
								exp = "std::move(" + exp + ")";
								}
							args.push(exp);
							}
						rtn += "(" + args.join(", ") + ")";
					}
				}else if (part.type == "index") {
				var cast = part;
				var callOn = cast.reference.getReference();
				var methodName = "";
				if (callOn.hasFlag("inline") == false) {
					var attrs = callOn.getAttributes("name");
					var mp = attrs[0];
					var attr = mp["value"];
					methodName = "->" + attr;
					}
				var castArr = [];
				castArr.push(cast.argument);
				if (callOn.hasFlag("native")) {
					rtn = this.callMethod(callOn, castArr, sequence.templates, rtn + methodName);
					}else{
						rtn += methodName + this.callMethod(callOn, castArr, sequence.templates, "");
					}
				}
			}
		return rtn;
	}
}

Carbonite.Assemblers.Cpp.prototype.callMethodWithStrings = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (arguments[2] instanceof Array || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'string' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var method = arguments[0];
		var ___arguments = arguments[1];
		var templates = arguments[2];
		var context = arguments[3];
		var that = this;
		var normal = true;
		if (method.hasFlag("native")) {
			if (method.hasFlag("inline")) {
				normal = false;
				}
			}
		if (normal) {
			return context + "(" + ___arguments.join(", ") + ")";
			}else{
				var temps = [];
				for (var i = 0; i < templates.length; i++) {
					var temp = templates[i];
					temps.push(this.route(temp));
					}
				var ctx = new Carbonite.Context(context, ___arguments, temps);
				ctx.router = function (cls) {
					return that.route(cls);
					};
				ctx.parent = method.parent;
				ctx.type = this.route(method.output);
				return method.generate(ctx);
			}
	}
}

Carbonite.Assemblers.Cpp.prototype.callMethod = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (arguments[2] instanceof Array || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'string' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var method = arguments[0];
		var ___arguments = arguments[1];
		var templates = arguments[2];
		var context = arguments[3];
		var args = [];
		for (var i = 0; i < ___arguments.length; i++) {
			var arg = ___arguments[i];
			var exp = this.expression(arg);
			if (arg.getOutput().isPrimitiveValue() == false && arg.getOutput().reference.route != "null") {
				if (method.arguments[i].reference == false) {
					exp = "std::move(" + exp + ")";
					}else{
						if (arg.getOutput().containsReference == false) {
							exp = exp + ".get()";
							}
					}
				}else if (arg.getOutput().isPrimitiveValue() && arg.getOutput().isPure == false) {
				exp = exp + ".value()";
				}
			exp = this.poly(arg.getOutput(), arg.output, exp);
			args.push(exp);
			}
		return this.callMethodWithStrings(method, args, templates, context);
	}
}

Carbonite.Assemblers.Cpp.prototype.func = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Function) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var func = arguments[0];
		var args = [];
		for (var i = 0; i < func.arguments.length; i++) {
			var arg = func.arguments[i];
			args.push(this.route(arg.type) + " " + arg.name);
			}
		return "[](" + args.join(", ") + ") {\n" + this.body(func.body) + "\n}";
	}
}

Carbonite.Assemblers.Cpp.prototype.expression = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var expression = arguments[0];
		var rtn = "";
		var first = this.term(expression.first);
		if (expression.reference != null) {
			var args = [];
			if (expression.last != null) {
				var arg = expression.reference.arguments[0];
				if (expression.last.getOutput().isPrimitiveValue() == false) {
					var eType = arg.type;
					if (expression.reference.name == "=") {
						eType = expression.first.output;
						}
					var expr = "";
					if (eType.containsReference) {
						if (expression.last.output.containsReference) {
							expr = this.term(expression.last);
							}else{
								expr = this.term(expression.last) + ".get()";
							}
						}else{
							expr = "std::move(" + this.term(expression.last) + ")";
						}
					expr = this.poly(eType, expression.last.getOutput(), expr);
					args.push(expr);
					}else{
						var getValue = "";
						if (expression.last.output.isPure) {
							getValue = ".value()";
							}
						args.push(this.term(expression.last) + getValue);
					}
				}
			var temps = [];
			if (expression.reference.hasFlag("native")) {
				return this.callMethodWithStrings(expression.reference, args, temps, first);
				}else{
					first += "->" + expression.reference.getRealName() + this.callMethodWithStrings(expression.reference, args, temps, "");
				}
			}
		if (expression.doesCast) {
			rtn = this.cast(expression.castMethod, first);
			}else{
				rtn = first;
			}
		if (expression.grouped) {
			return "(" + rtn + ")";
			}else{
				return rtn;
			}
	}
}

Carbonite.Assemblers.Php = function () {
	this.classPrefix = "";

	this.compiler = null;

	this.options = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var compiler = arguments[0];
		var options = arguments[1];
		this.compiler = compiler;
		this.options = options;
	}

}

Carbonite.Assemblers.Php.prototype.root = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var root = arguments[0];
		if (this.compiler.doExport(root.route) == false) {
			return "";
			}
		if (root.doExport() == false) {
			return "";
			}
		if (this.classPrefix == "") {
			if ("namespace" in this.compiler.pipeConfig) {
				var cast = this.compiler.pipeConfig["namespace"];
				this.classPrefix = cast + "\\";
				}
			}
		if ((root.base == "relative") || (root.base == "interface")) {
			return "/" + "/Relative " + root.name + "\n";
			}else if (root.isFromHeader) {
			return "";
			}
		if (this.compiler.useOldTemplates == false) {
			if (root.templateClass) {
				if (root.instances.length > 0) {
					return this.root(root.instances[0].instance);
					}
				}
			}
		var propDefs = [];
		var props = [];
		var fixedProps = [];
		for (var i = 0; i < root.members.length; i++) {
			var member = root.members[i];
			if (member.type == "property") {
				var property = member;
				var propName = this.unReserve(property.name);
				if (property.hasFlag("force")) {
					propName = property.name;
					}
				if ((property.binding != "fixed") && (property.abstract == false)) {
					props.push("public $" + propName + ";\n");
					propDefs.push("$this->" + propName + " = " + this.expression(property.default) + ";\n");
					}else{
						fixedProps.push("public static $" + property.name + " = " + this.expression(property.default) + ";\n");
					}
				}
			}
		var cnsrs = root.getMethods("@construct");
		var args = "...$arguments";
		if (cnsrs.length > 0) {
			if (cnsrs[0].hasFlag("trust") || cnsrs.length == 1) {
				var argss = [];
				for (var a = 0; a < cnsrs[0].arguments.length; a++) {
					var argument = cnsrs[0].arguments[a];
					argss.push("$" + argument.name);
					}
				args = argss.join(", ");
				}
			}
		var implements = "";
		if (root.getAttribute(root.attributes, "phpImplements") != null) {
			var castAttr = root.getAttribute(root.attributes, "phpImplements");
			var impCast = castAttr["value"];
			implements = " implements " + impCast;
			}
		return "class " + this.doRoute(root) + implements + " {\n" + props.join("\n") + fixedProps.join("\n") + "\nfunction __construct(" + args + ") {\n" + propDefs.join("") + "\n" + this.overload(cnsrs) + "\n}\n" + this.methods(root) + "\n}";
	}
}

Carbonite.Assemblers.Php.prototype.unReserve = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var reserved = ["__halt_compiler", "abstract", "and", "array", "as", "break", "callable", "case", "catch", "class", "clone", "const", "continue", "declare", "default", "die", "do", "echo", "else", "elseif", "empty", "enddeclare", "endfor", "endforeach", "endif", "endswitch", "endwhile", "eval", "exit", "extends", "final", "for", "foreach", "function", "global", "goto", "if", "implements", "include", "include_once", "instanceof", "insteadof", "interface", "isset", "list", "namespace", "new", "or", "print", "private", "protected", "public", "require", "require_once", "return", "static", "switch", "throw", "trait", "try", "unset", "use", "var", "while", "xor"];
		for (var i = 0; i < reserved.length; i++) {
			if (reserved[i] == name.toLowerCase()) {
				return "_c__" + name;
				}
			}
		return name;
	}
}

Carbonite.Assemblers.Php.prototype.overload = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var methods = arguments[0];
		if (methods.length == 1) {
			var meth = methods[0];
			if (meth.hasFlag("raw")) {
				var ff = meth.getAttributes("rawFront");
				var bb = meth.getAttributes("rawBack");
				var front = ff[0]["value"];
				var back = bb[0]["value"];
				return front + this.methodStr(meth, true) + back;
				}else{
					return this.methodStr(meth, true);
				}
			}
		var overloads = [];
		for (var i = 0; i < methods.length; i++) {
			var method = methods[i];
			if (method.abstract == false) {
				var check = [];
				var argInit = [];
				for (var a = 0; a < method.arguments.length; a++) {
					var argument = method.arguments[a];
					check.push(" and (" + this.compareType("$arguments[" + a + "]", argument.type) + " or gettype($arguments[" + a + "]) == 'NULL')");
					var defName = argument.name;
					if (argument.name == "arguments") {
						defName = "___arguments";
						}
					argInit.push("$" + defName + " = $arguments[" + a + "];\n");
					}
				overloads.push("if (count($arguments) == " + method.arguments.length + check.join("") + ") {\n" + argInit.join("") + this.methodStr(method, false) + "\n}\n");
				}
			}
		return overloads.join("else ");
	}
}

Carbonite.Assemblers.Php.prototype.methodStr = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'boolean' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var method = arguments[0];
		var single = arguments[1];
		var body = "";
		if (method.hasFlag("native")) {
			var argumentMaps = [];
			if (single) {
				for (var i = 0;i < method.arguments.length;i++) {
					argumentMaps.push("$" + method.arguments[i].name);
					}
				}else{
					for (var i = 0;i < method.arguments.length;i++) {
						argumentMaps.push("$arguments[" + i + "]");
						}
				}
			var context = "$this";
			var templates = [];
			var ctx = new Carbonite.Context(context, argumentMaps, templates);
			body = method.generate(ctx);
			}else{
				body = this.body(method.body);
			}
		return body;
	}
}

Carbonite.Assemblers.Php.prototype.methods = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var root = arguments[0];
		var rtn = "";
		var methods = new MethodMap();
		for (var i = 0; i < root.members.length; i++) {
			var member = root.members[i];
			if (member.type != "property") {
				if (member.hasFlag("inline") == false) {
					if (member.name != "@construct") {
						if ((member.hasFlag("relative") == false) && (member.abstract == false)) {
							var method = member;
							if (method.hasFlag("raw")) {
								var ff = method.getAttributes("rawFront");
								var bb = method.getAttributes("rawBack");
								var front = ff[0]["value"];
								var back = bb[0]["value"];
								rtn += front + this.methodStr(method, method.hasOverload() == false) + back;
								continue;
								}
							var overloads = methods.find(method.name);
							var check = [];
							var argInit = [];
							for (var a = 0; a < method.arguments.length; a++) {
								var argument = method.arguments[a];
								check.push(" and (" + this.compareType("$arguments[" + a + "]", argument.type) + " or gettype($arguments[" + a + "]) == 'NULL')");
								var defName = argument.name;
								if (argument.name == "arguments") {
									defName = "___arguments";
									}
								argInit.push("$" + defName + " = $arguments[" + a + "];\n");
								}
							overloads.push("if (count($arguments) == " + method.arguments.length + check.join("") + ") {\n" + argInit.join("") + this.methodStr(method, false) + "\n}\n");
							}
						}
					}
				}
			}
		for (var i = 0; i < methods.methods.length; i++) {
			var methodOverload = methods.methods[i];
			var overloads = methodOverload.overloads;
			var gap = "function ";
			var refer = "";
			var method = root.getMember(methodOverload.name);
			if ((method.output.reference.route == "map") || (method.output.reference.route == "array")) {
				if ((method.hasFlag("phpNoRef") == false) && (method.hasFlag("value") == false)) {
					refer = "&";
					}
				}
			if (method.binding == "fixed") {
				gap = "static function ";
				}
			var realName = this.unReserve(method.getRealName());
			if (method.hasFlag("force")) {
				realName = method.getRealName();
				}
			if ((overloads.length == 1)) {
				var args = [];
				for (var a = 0; a < method.arguments.length; a++) {
					var argument = method.arguments[a];
					args.push("$" + argument.name);
					}
				rtn += gap + refer + realName + "(" + args.join(", ") + ") {\n" + this.methodStr(method, true) + "}\n\n";
				}else{
					rtn += gap + refer + realName + "(...$arguments) {\n" + overloads.join("else ") + "}\n\n";
				}
			}
		return rtn;
	}
}

Carbonite.Assemblers.Php.prototype.compareType = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Type || (arguments[1] instanceof Carbonite.ReferenceType)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var varName = arguments[0];
		var to = arguments[1];
		if (to.late) {
			return "isset(" + varName + ")";
			}
		return this.compareClass(varName, to.reference);
	}
}

Carbonite.Assemblers.Php.prototype.doRoute = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var cls = arguments[0];
		return cls.getRoute().replace(new RegExp(".".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "_");
	}
}

Carbonite.Assemblers.Php.prototype.compareClass = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Class) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var varName = arguments[0];
		var to = arguments[1];
		var native = "";
		if (to.route == "int") {
			native = "integer";
			}else if (to.route == "string" || to.route == "char") {
			native = "string";
			}else if (to.route == "function") {
			return "is_callable(" + varName + ")";
			}else if (to.route == "bool") {
			native = "boolean";
			}else if (to.route == "float") {
			native = "double";
			}else if (to.route == "array") {
			return "(gettype(" + varName + ") == 'array')";
			}else if (to.route == "map") {
			return "(gettype(" + varName + ") == 'array' ? _c_lib__mapUtils::isMap(" + varName + ") : (gettype(" + varName + ") == 'object' ? get_class(" + varName + ") == '_carb_map' : false))";
			}
		if (native.length == 0) {
			if (to.route == "everything") {
				return "(true)";
				}else{
					var tests = [];
					if (to.route != "primitive") {
						tests.push("_c_lib_run::getClass(" + varName + ") == '" + this.classPrefix + this.doRoute(to) + "'");
						}
					for (var i = 0; i < to.descendants.length; i++) {
						var child = to.descendants[i];
						tests.push(this.compareClass(varName, child));
						}
					return "(" + tests.join(" or ") + ")";
				}
			}else{
				return "gettype(" + varName + ") == '" + native + "'";
			}
	}
}

Carbonite.Assemblers.Php.prototype.body = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var body = arguments[0];
		var statements = [];
		for (var i = 0; i < body.statements.length; i++) {
			var statement = body.statements[i];
			statements.push(this.statement(statement));
			}
		return statements.join("\n");
	}
}

Carbonite.Assemblers.Php.prototype.define = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Define) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var define = arguments[0];
		var set = "";
		if (define.initializer != null) {
			var refer = "";
			if ((define.initializer.output.reference.route == "array") || (define.initializer.output.reference.route == "map")) {
				if ((define.initializer.first.type != "prefix") && (define.initializer.first.type != "literal")) {
					refer = "&";
					}
				}
			if (define.initializer.output.reference.route == "primitive") {
				if ((define.output.reference.route == "map") || (define.output.reference.route == "array")) {
					refer = "&";
					}
				}
			if (define.initializer.first.type == "sequence") {
				var cast = define.initializer.first;
				if (cast.parts[cast.parts.length - 1].type == "call") {
					var castCall = cast.parts[cast.parts.length - 1];
					if (castCall.reference != null) {
						if (castCall.reference.reference != null) {
							if (((castCall.reference.reference.hasFlag("phpNoRef"))) || ((castCall.reference.reference.hasFlag("value")))) {
								refer = "";
								}
							}
						}
					}
				}
			set = " = " + refer + this.expression(define.initializer);
			}
		var defName = define.name;
		if (defName == "arguments") {
			defName = "___" + defName;
			}
		return "$" + this.unReserve(defName) + set;
	}
}

Carbonite.Assemblers.Php.prototype.statement = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Statement || (arguments[0] instanceof Carbonite.Statements.If) || (arguments[0] instanceof Carbonite.Statements.Return) || (arguments[0] instanceof Carbonite.Statements.Define) || (arguments[0] instanceof Carbonite.Statements.For) || (arguments[0] instanceof Carbonite.Statements.ForIn) || (arguments[0] instanceof Carbonite.Statements.While) || (arguments[0] instanceof Carbonite.Statements.Continue) || (arguments[0] instanceof Carbonite.Statements.Break) || (arguments[0] instanceof Carbonite.Statements.Try) || (arguments[0] instanceof Carbonite.Statements.Throw) || (arguments[0] instanceof Carbonite.Statements.Native) || (arguments[0] instanceof Carbonite.Statements.Expression) || (arguments[0] instanceof Carbonite.Statements.Yield)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var statement = arguments[0];
		if (statement.type == "define") {
			var def = statement;
			return this.define(def.define) + ";";
			}else if (statement.type == "expression") {
			var exp = statement;
			return this.expression(exp.expression) + ";";
			}else if (statement.type == "return") {
			var exp = statement;
			return "return " + this.expression(exp.expression) + ";";
			}else if (statement.type == "yield") {
			var exp = statement;
			return "return " + this.expression(exp.expression) + ";";
			}else if (statement.type == "if") {
			var ifState = statement;
			var str = "";
			str = "if (" + this.expression(ifState.check) + ") {\n" + this.body(ifState.body) + "}";
			for (var i = 0; i < ifState.alternatives.length; i++) {
				var alt = ifState.alternatives[i];
				if (alt.doCheck) {
					str += "else if (" + this.expression(alt.check) + ") {\n" + this.body(alt.body) + "}";
					}else{
						str += "else{\n" + this.body(alt.body) + "}";
					}
				}
			return str;
			}else if (statement.type == "for") {
			var forState = statement;
			var str = "";
			str = "for (" + this.define(forState.define) + ";" + this.expression(forState.check) + ";" + this.expression(forState.iterate) + ") {\n" + this.body(forState.body) + "}";
			return str;
			}else if (statement.type == "forin") {
			var forState = statement;
			var str = "";
			if (forState.iterate.output.reference.route == "array") {
				str = "for (" + this.define(forState.define) + " = 0; $" + forState.define.name + " < count(" + this.expression(forState.iterate) + "); $" + forState.define.name + "++) {\n" + this.body(forState.body) + "}";
				}else{
					str = "foreach (" + this.expression(forState.iterate) + " as " + this.define(forState.define) + " => $_c_v__k0) {\n" + this.body(forState.body) + "}";
				}
			return str;
			}else if (statement.type == "while") {
			var whileState = statement;
			return "while (" + this.expression(whileState.check) + ") {\n" + this.body(whileState.body) + "}";
			}else if (statement.type == "continue") {
			return "continue;";
			}else if (statement.type == "break") {
			return "break;";
			}else if (statement.type == "native") {
			var nativeState = statement;
			if (nativeState.platform == "php") {
				return nativeState.content;
				}
			return "";
			}
	}
}

Carbonite.Assemblers.Php.prototype.method = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var method = arguments[0];

	}
}

Carbonite.Assemblers.Php.prototype.native = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Native || (arguments[0] instanceof Carbonite.Natives.Integer) || (arguments[0] instanceof Carbonite.Natives.Float) || (arguments[0] instanceof Carbonite.Natives.Boolean) || (arguments[0] instanceof Carbonite.Natives.String) || (arguments[0] instanceof Carbonite.Natives.Array)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var native = arguments[0];
		if (native.type == "integer") {
			var cast = native;
			var rtn = cast.value;
			return rtn;
			}else if (native.type == "float") {
			var cast = native;
			var rtn = cast.value;
			return rtn;
			}else if (native.type == "number") {
			var cast = native;
			var rtn = cast.value;
			return "" + rtn;
			}else if (native.type == "string" || native.type == "char") {
			var cast = native;
			return "\"" + cast.value.replace(new RegExp("\\".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\\\").replace(new RegExp("\"".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\\"").replace(new RegExp("$".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\$").replace(new RegExp("	".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\t").replace(new RegExp("\n".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\n").replace(new RegExp("\r".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\ r") + "\"";
			}else if (native.type == "array") {
			var cast = native;
			var expressions = [];
			for (var i = 0; i < cast.value.length; i++) {
				var item = cast.value[i];
				expressions.push(this.expression(item.value));
				}
			return "[" + expressions.join(", ") + "]";
			}else if (native.type == "boolean") {
			var cast = native;
			if (cast.value) {
				return "true";
				}else{
					return "false";
				}
			}
	}
}

Carbonite.Assemblers.Php.prototype.property = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Members.Property) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var property = arguments[0];

	}
}

Carbonite.Assemblers.Php.prototype.term = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Term || (arguments[0] instanceof Carbonite.Terms.Literal) || (arguments[0] instanceof Carbonite.Terms.Expression) || (arguments[0] instanceof Carbonite.Terms.Sequence) || (arguments[0] instanceof Carbonite.Terms.Prefix) || (arguments[0] instanceof Carbonite.Terms.Function)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var term = arguments[0];
		if (term.type == "expression") {
			var cast = term;
			return this.expression(cast.expression);
			}else if (term.type == "literal") {
			var cast = term;
			return this.native(cast.native);
			}else if (term.type == "function") {
			var cast = term;
			return this.func(cast.function);
			}else if (term.type == "prefix") {
			var cast = term;
			var doNew = "new ";
			var cstrs = cast.expression.output.reference.getMethods("@construct");
			var cnstr = cstrs[0];
			if (cnstr.hasFlag("inline")) {
				doNew = "";
				}
			if (cast.prefix == "new") {
				return doNew + this.expression(cast.expression);
				}
			}else if (term.type == "sequence") {
			var cast = term;
			return this.sequence(cast);
			}
	}
}

Carbonite.Assemblers.Php.prototype.sequence = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Terms.Sequence) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var sequence = arguments[0];
		var rtn = "";
		for (var i = 0; i < sequence.parts.length; i++) {
			var part = sequence.parts[i];
			if (part.type == "reference") {
				var cast = part;
				if (cast.isConstant) {
					if (cast.isConstructor) {
						if (cast.constantReference.reference.name == "empty") {
							rtn += "null";
							}else{
								rtn += this.doRoute(cast.constantReference.reference);
							}
						}else{
							rtn += this.doRoute(cast.constantReference.reference);
						}
					}else{
						if (cast.reference.name == "arguments") {
							rtn += "$___" + cast.reference.name;
							}else{
								rtn += "$" + this.unReserve(cast.reference.name);
							}
					}
				}else if (part.type == "dot") {
				var cast = part;
				if (cast.reference != null) {
					if (cast.reference.type == "property") {
						var refCast = cast.reference;
						var binding = "->";
						if (refCast.reference.binding == "fixed") {
							binding = "::$";
							}
						var realName = this.unReserve(refCast.reference.name);
						if (refCast.reference.hasFlag("force")) {
							realName = refCast.reference.name;
							}
						if (refCast.reference.hasFlag("native")) {
							if (refCast.reference.hasFlag("inline") == false) {
								rtn += binding + realName;
								}
							}else{
								rtn += binding + realName;
							}
						}else{
							var refMeth = cast.reference;
							var binding = "->";
							if (refMeth.reference.binding == "fixed") {
								binding = "::";
								}
							if (refMeth.reference.hasFlag("native") == false) {
								if (refMeth.reference.hasFlag("force")) {
									rtn += binding + refMeth.reference.getRealName();
									}else{
										rtn += binding + this.unReserve(refMeth.reference.getRealName());
									}
								}else if (refMeth.reference.hasFlag("property")) {
								var isNotCall = true;
								var castI = i;
								var ni = parseInt(castI) + 1;
								if (ni < sequence.parts.length) {
									var next = sequence.parts[ni];
									if (next.type == "call") {
										isNotCall = false;
										}
									}
								if (isNotCall) {
									var strArr = [];
									rtn = this.callMethod(refMeth.reference, strArr, rtn);
									}
								}
						}
					}else{
						rtn += "_" + cast.output.reference.name;
					}
				}else if (part.type == "call") {
				var cast = part;
				if (cast.previous.type == "property") {

					}else if (cast.reference != null) {
					var normal = true;
					var callOn = cast.reference.getReference();
					var methodName = "";
					if (callOn.hasFlag("inline") == false) {
						var binding = "=>";
						if (callOn.binding == "fixed") {
							binding = "::";
							}
						methodName = binding + callOn.name;
						}
					if (callOn.hasFlag("native")) {
						rtn = this.callMethod(callOn, cast.arguments, rtn + methodName);
						}else{
							rtn += this.callMethod(callOn, cast.arguments, "");
						}
					}else{
						var args = [];
						for (var a = 0; a < cast.arguments.length; a++) {
							args.push(this.expression(cast.arguments[a]));
							}
						rtn += "->__invoke(" + args.join(", ") + ")";
					}
				}else if (part.type == "index") {
				var cast = part;
				var callOn = cast.reference.getReference();
				var methodName = "";
				if (callOn.hasFlag("inline") == false) {
					var attrs = callOn.getAttributes("name");
					var mp = attrs[0];
					var attr = mp["value"];
					methodName = "->" + attr;
					}
				var castArr = [];
				castArr.push(cast.argument);
				if (callOn.hasFlag("native")) {
					rtn = this.callMethod(callOn, castArr, rtn + methodName);
					}else{
						rtn += methodName + this.callMethod(callOn, castArr, "");
					}
				}
			}
		return rtn;
	}
}

Carbonite.Assemblers.Php.prototype.callMethodWithStrings = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var method = arguments[0];
		var ___arguments = arguments[1];
		var context = arguments[2];
		var normal = true;
		if (method.hasFlag("native")) {
			if (method.hasFlag("inline")) {
				normal = false;
				}
			}
		if (normal) {
			return context + "(" + ___arguments.join(", ") + ")";
			}else{
				var templates = [];
				var ctx = new Carbonite.Context(context, ___arguments, templates);
				return method.generate(ctx);
			}
	}
}

Carbonite.Assemblers.Php.prototype.callMethod = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var method = arguments[0];
		var ___arguments = arguments[1];
		var context = arguments[2];
		var args = [];
		for (var i = 0; i < ___arguments.length; i++) {
			var arg = ___arguments[i];
			args.push(this.expression(arg));
			}
		return this.callMethodWithStrings(method, args, context);
	}
}

Carbonite.Assemblers.Php.prototype.captureScope = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var index = arguments[1];
		var rtn = "";
		for (var i = 0; i < scope.scope.length; i++) {
			var def = scope.scope[i];
			if (def.blockIndex > i) {
				break;
				}
			if (def.name == "this") {
				continue;
				}
			if (i != 0 && rtn.length > 0) {
				rtn += ", ";
				}
			rtn += "&$" + this.unReserve(def.name);
			}
		var output = "";
		if (scope.parent != null) {
			output = this.captureScope(scope.parent, 10000);
			}
		var pref = "";
		if (rtn.length > 0) {
			pref = ", ";
			}
		if (output.length > 0) {
			rtn += pref + output;
			}
		return rtn;
	}
}

Carbonite.Assemblers.Php.prototype.func = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Function) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var func = arguments[0];
		var args = [];
		for (var i = 0; i < func.arguments.length; i++) {
			var arg = func.arguments[i];
			args.push("$" + arg.name);
			}
		var capture = this.captureScope(func.body.scope.parent, func.blockIndex);
		var use = "";
		if (capture.length > 0) {
			use = "use (" + capture + ")";
			}
		return "function (" + args.join(", ") + ") " + use + " {" + this.body(func.body) + "}";
	}
}

Carbonite.Assemblers.Php.prototype.expression = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Expression) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var expression = arguments[0];
		var rtn = "";
		var first = this.term(expression.first);
		if (expression.reference != null) {
			var args = [];
			if (expression.last != null) {
				args.push(this.term(expression.last));
				}
			if (expression.reference.hasFlag("native")) {
				return this.callMethodWithStrings(expression.reference, args, first);
				}else{
					first += "." + expression.reference.getRealName() + this.callMethodWithStrings(expression.reference, args, "");
				}
			}
		rtn = first;
		if (expression.grouped) {
			return "(" + rtn + ")";
			}else{
				return rtn;
			}
	}
}

Carbonite.Assemblers.Php.prototype.build = function () {
	if (arguments.length == 0) {
		var rtn = "";
		for (var i = 0; i < this.compiler.roots.length; i++) {
			var root = this.compiler.roots[i];
			rtn += this.root(root);
			}
		return rtn;
	}
}

Carbonite.Platform = function () {
	this.compiler = null;

	this.options = null;

	this.root = "";

	this.platform = "";

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var root = arguments[1];
		var options = arguments[2];
		this.compiler = compiler;
		this.options = options;
		this.root = root;
	}

}

Carbonite.Platform.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Platform.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var platform = arguments[1];
		var options = arguments[2];
		var splits = platform.split(".");
		if (splits.length < 2) {
			var notice = new Carbonite.Notice("Invalid platform arguments '" + platform + "'");
			notice.level = 4;
			compiler.status.give(notice);
			throw new Error("Build error");
			}
		var platformName = splits[0];
		splits.shift();
		var rtn = null;
		if (platformName == "javascript") {
			rtn = new Carbonite.Platforms.Javascript(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "php") {
			rtn = new Carbonite.Platforms.Php(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "cpp") {
			rtn = new Carbonite.Platforms.Cpp(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "documentation") {
			rtn = new Carbonite.Platforms.Doc(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "header") {
			rtn = new Carbonite.Platforms.Header(compiler, splits, options);
			rtn.platform = platformName;
			}else{
				var notice = new Carbonite.Notice("Invalid platform '" + platformName + "'");
				notice.level = 4;
				compiler.status.give(notice);
				throw new Error("Build error");
			}
		return rtn;
	}
}

Carbonite.Platforms.Javascript = function () {
	this.compiler = null;

	this.options = null;

	this.root = "";

	this.platform = "";

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var root = arguments[1];
		var options = arguments[2];
		this.compiler = compiler;
		this.options = options;
		this.root = root;
	}

}

Carbonite.Platforms.Javascript.prototype.build = function () {
	if (arguments.length == 0) {
		var outputToFile = true;
		for (var i = 0; i < this.root.length; i++) {
			var r = this.root[i];
			if (r == "memory") {
				outputToFile = false;
				}
			}
		var assembler = new Carbonite.Assemblers.Javascript(this.compiler, this.options);
		var source = assembler.build();
		if (outputToFile == false) {
			this.compiler.rawOutput = source;
			}
	}
}

Carbonite.Platforms.Javascript.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var platform = arguments[1];
		var options = arguments[2];
		var splits = platform.split(".");
		if (splits.length < 2) {
			var notice = new Carbonite.Notice("Invalid platform arguments '" + platform + "'");
			notice.level = 4;
			compiler.status.give(notice);
			throw new Error("Build error");
			}
		var platformName = splits[0];
		splits.shift();
		var rtn = null;
		if (platformName == "javascript") {
			rtn = new Carbonite.Platforms.Javascript(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "php") {
			rtn = new Carbonite.Platforms.Php(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "cpp") {
			rtn = new Carbonite.Platforms.Cpp(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "documentation") {
			rtn = new Carbonite.Platforms.Doc(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "header") {
			rtn = new Carbonite.Platforms.Header(compiler, splits, options);
			rtn.platform = platformName;
			}else{
				var notice = new Carbonite.Notice("Invalid platform '" + platformName + "'");
				notice.level = 4;
				compiler.status.give(notice);
				throw new Error("Build error");
			}
		return rtn;
	}
}

Carbonite.Platforms.Cpp = function () {
	this.compiler = null;

	this.options = null;

	this.root = "";

	this.platform = "";

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var root = arguments[1];
		var options = arguments[2];
		this.compiler = compiler;
		this.options = options;
		this.root = root;
	}

}

Carbonite.Platforms.Cpp.prototype.build = function () {
	if (arguments.length == 0) {
		var outputToFile = true;
		for (var i = 0; i < this.root.length; i++) {
			var r = this.root[i];
			if (r == "memory") {
				outputToFile = false;
				}
			}
		var assembler = new Carbonite.Assemblers.Cpp(this.compiler, this.options);
		var source = assembler.build();
		if (outputToFile == false) {
			this.compiler.rawOutput = "#include <string>\n#include <vector>\n#include <map>\n#include <memory>\n#include <iostream>\n\n" + source;
			}
	}
}

Carbonite.Platforms.Cpp.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var platform = arguments[1];
		var options = arguments[2];
		var splits = platform.split(".");
		if (splits.length < 2) {
			var notice = new Carbonite.Notice("Invalid platform arguments '" + platform + "'");
			notice.level = 4;
			compiler.status.give(notice);
			throw new Error("Build error");
			}
		var platformName = splits[0];
		splits.shift();
		var rtn = null;
		if (platformName == "javascript") {
			rtn = new Carbonite.Platforms.Javascript(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "php") {
			rtn = new Carbonite.Platforms.Php(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "cpp") {
			rtn = new Carbonite.Platforms.Cpp(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "documentation") {
			rtn = new Carbonite.Platforms.Doc(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "header") {
			rtn = new Carbonite.Platforms.Header(compiler, splits, options);
			rtn.platform = platformName;
			}else{
				var notice = new Carbonite.Notice("Invalid platform '" + platformName + "'");
				notice.level = 4;
				compiler.status.give(notice);
				throw new Error("Build error");
			}
		return rtn;
	}
}

Carbonite.Platforms.Php = function () {
	this.compiler = null;

	this.options = null;

	this.root = "";

	this.platform = "";

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var root = arguments[1];
		var options = arguments[2];
		this.compiler = compiler;
		this.options = options;
		this.root = root;
	}

}

Carbonite.Platforms.Php.prototype.build = function () {
	if (arguments.length == 0) {
		var outputToFile = true;
		for (var i = 0; i < this.root.length; i++) {
			var r = this.root[i];
			if (r == "memory") {
				outputToFile = false;
				}
			}
		var php = new Carbonite.Assemblers.Php(this.compiler, this.options);
		var source = php.build();
		if (outputToFile == false) {
			if (php.classPrefix == "") {
				this.compiler.rawOutput = "<?php\n" + source + "\n?>";
				}else{
					this.compiler.rawOutput = "<?php\nnamespace " + php.classPrefix + " {\n" + source + "\n}\n?>";
				}
			}
	}
}

Carbonite.Platforms.Php.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var platform = arguments[1];
		var options = arguments[2];
		var splits = platform.split(".");
		if (splits.length < 2) {
			var notice = new Carbonite.Notice("Invalid platform arguments '" + platform + "'");
			notice.level = 4;
			compiler.status.give(notice);
			throw new Error("Build error");
			}
		var platformName = splits[0];
		splits.shift();
		var rtn = null;
		if (platformName == "javascript") {
			rtn = new Carbonite.Platforms.Javascript(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "php") {
			rtn = new Carbonite.Platforms.Php(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "cpp") {
			rtn = new Carbonite.Platforms.Cpp(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "documentation") {
			rtn = new Carbonite.Platforms.Doc(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "header") {
			rtn = new Carbonite.Platforms.Header(compiler, splits, options);
			rtn.platform = platformName;
			}else{
				var notice = new Carbonite.Notice("Invalid platform '" + platformName + "'");
				notice.level = 4;
				compiler.status.give(notice);
				throw new Error("Build error");
			}
		return rtn;
	}
}

Carbonite.Platforms.Doc = function () {
	this.compiler = null;

	this.options = null;

	this.root = "";

	this.platform = "";

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var root = arguments[1];
		var options = arguments[2];
		this.compiler = compiler;
		this.options = options;
		this.root = root;
	}

}

Carbonite.Platforms.Doc.prototype.build = function () {
	if (arguments.length == 0) {
		var outputToFile = true;
		var mode = "none";
		for (var i = 0; i < this.root.length; i++) {
			var r = this.root[i];
			if (r == "memory") {
				outputToFile = false;
				}else if (r == "dynamic") {
				mode = r;
				}
			}
		var source = "";
		if (mode == "dynamic") {
			source = this.buildDynamic();
			}
		if (outputToFile == false) {
			this.compiler.rawOutput = source;
			}
	}
}

Carbonite.Platforms.Doc.prototype.buildDynamic = function () {
	if (arguments.length == 0) {
		var articles = [];
		var items = [];
		for (var i = 0; i < this.compiler.roots.length; i++) {
			var root = this.compiler.roots[i];
			articles.push(root.docDynamic());
			}
		for (var i = 0; i < this.compiler.docs.items.length; i++) {
			var item = this.compiler.docs.items[i];
			items.push(item.serialize());
			}
		var output = "{\"version\": \"Unkown\", \"items\": [" + items.join(", ") + "], \"articles\": [" + articles.join(",") + "]}";
		return "window.__cDoc = " + output + "; CarbonDoc.load(__cDoc);";
	}
}

Carbonite.Platforms.Doc.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var platform = arguments[1];
		var options = arguments[2];
		var splits = platform.split(".");
		if (splits.length < 2) {
			var notice = new Carbonite.Notice("Invalid platform arguments '" + platform + "'");
			notice.level = 4;
			compiler.status.give(notice);
			throw new Error("Build error");
			}
		var platformName = splits[0];
		splits.shift();
		var rtn = null;
		if (platformName == "javascript") {
			rtn = new Carbonite.Platforms.Javascript(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "php") {
			rtn = new Carbonite.Platforms.Php(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "cpp") {
			rtn = new Carbonite.Platforms.Cpp(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "documentation") {
			rtn = new Carbonite.Platforms.Doc(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "header") {
			rtn = new Carbonite.Platforms.Header(compiler, splits, options);
			rtn.platform = platformName;
			}else{
				var notice = new Carbonite.Notice("Invalid platform '" + platformName + "'");
				notice.level = 4;
				compiler.status.give(notice);
				throw new Error("Build error");
			}
		return rtn;
	}
}

Carbonite.Platforms.Header = function () {
	this.exports = {};

	this.outputs = [];

	this.compiler = null;

	this.options = null;

	this.root = "";

	this.platform = "";

	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var root = arguments[1];
		var options = arguments[2];
		this.compiler = compiler;
		this.options = options;
		this.root = root;
	}

}

Carbonite.Platforms.Header.prototype.add = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var pipeline = this.compiler.getPipelineSource();
		var cls = this.compiler.getClass(name);
		if (cls == null) {
			var notice = new Carbonite.Notice("Unable to find export class '" + name + "'");
			notice.level = 4;
			notice.source = pipeline;
			this.compiler.status.give(notice);
			}else{
				var done = this.exports[name];
				if (done == null) {
					this.outputs.push(cls.toHeader());
					}
				this.exports[name] = true;
				for (var i = 0; i < cls.children.length; i++) {
					this.add(cls.children[i].route);
					}
			}
	}
}

Carbonite.Platforms.Header.prototype.build = function () {
	if (arguments.length == 0) {
		var scripts = [];
		var exports = this.compiler.pipeConfig["exports"];
		var roots = exports.split(",");
		var pipeline = this.compiler.getPipelineSource();
		if (roots == null) {
			var notice = new Carbonite.Notice("No exports header config found in pipeline. Example: exports = \"Class1,Class2,Namespace3\"");
			notice.level = 4;
			notice.source = pipeline;
			this.compiler.status.give(notice);
			}else{
				for (var i = 0; i < roots.length; i++) {
					var name = roots[i];
					this.add(name);
					}
				for (var i = 0; i < this.compiler.scripts.length; i++) {
					scripts.push(JSON.stringify(this.compiler.scripts[i]));
					}
				this.compiler.rawOutput = "{\"roots\": [" + this.outputs.join(",") + "], \"scripts\": [" + scripts.join(",") + "]}";
			}
	}
}

Carbonite.Platforms.Header.make = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Compiler) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var compiler = arguments[0];
		var platform = arguments[1];
		var options = arguments[2];
		var splits = platform.split(".");
		if (splits.length < 2) {
			var notice = new Carbonite.Notice("Invalid platform arguments '" + platform + "'");
			notice.level = 4;
			compiler.status.give(notice);
			throw new Error("Build error");
			}
		var platformName = splits[0];
		splits.shift();
		var rtn = null;
		if (platformName == "javascript") {
			rtn = new Carbonite.Platforms.Javascript(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "php") {
			rtn = new Carbonite.Platforms.Php(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "cpp") {
			rtn = new Carbonite.Platforms.Cpp(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "documentation") {
			rtn = new Carbonite.Platforms.Doc(compiler, splits, options);
			rtn.platform = platformName;
			}else if (platformName == "header") {
			rtn = new Carbonite.Platforms.Header(compiler, splits, options);
			rtn.platform = platformName;
			}else{
				var notice = new Carbonite.Notice("Invalid platform '" + platformName + "'");
				notice.level = 4;
				compiler.status.give(notice);
				throw new Error("Build error");
			}
		return rtn;
	}
}

CarboniteCarbonParserLocation = function () {
	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

CarboniteCarbonParserError = function () {
	this.code = 0;

	this.found = 0;

	this.expected = 0;

	this.vested = 0;

	this.path = [];

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

CarboniteCarbonParserError.prototype.clone = function () {
	if (arguments.length == 0) {
		var clone = new CarboniteCarbonParserError(this.offset, this.line, this.column);
		clone.code = this.code;
		clone.found = this.found;
		clone.expected = this.expected;
		clone.vested = this.vested;
		for (var i = 0; i < this.path.length; i++) {
			var current = this.path[i];
			clone.path.push(current.clone());
			}
		return clone;
	}
}

CarboniteCarbonParserOutput = function () {
	this.error = null;

	this.hadError = false;

	this.data = {};

	if (arguments.length == 3 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof CarboniteCarbonParserError) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var hadError = arguments[0];
		var error = arguments[1];
		var data = arguments[2];
		this.hadError = hadError;
		this.error = error;
		this.data = data;
	}

}

CarboniteCarbonParser = function () {
	this.lastErrors = [];

	this.hadError = false;

	this.parsedChars = 0;

	this.currentInput = "";

	this.data = {};

	this.error = new CarboniteCarbonParserError(0, 0, 0);

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 0) {

	}

}

CarboniteCarbonParser.parse = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		var parser = new CarboniteCarbonParser();
		var output = parser.start(input);
		if (parser.hadError && (parser.error.found == String.fromCharCode(1))) {
			parser.error.found = "End of input";
			}
		var rtn = new CarboniteCarbonParserOutput(parser.hadError, parser.error, parser.data["data"]);
		return rtn;
	}
else 	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var rule = arguments[0];
		var input = arguments[1];
		var parser = new CarboniteCarbonParser();
		input += String.fromCharCode(1);
		parser.currentInput = input;
		parser.data["data"] = {};
		var output = null;
		if (rule == "Document") {
			output = parser.Document(input, 0);
			}else{
				if (rule == "Safe_Name") {
					output = parser.Safe_Name(input, 0);
					}else{
						if (rule == "Safe_Name_Seg") {
							output = parser.Safe_Name_Seg(input, 0);
							}else{
								if (rule == "Template") {
									output = parser.Template(input, 0);
									}else{
										if (rule == "Template_Def") {
											output = parser.Template_Def(input, 0);
											}else{
												if (rule == "Template_Default") {
													output = parser.Template_Default(input, 0);
													}else{
														if (rule == "Template_Type") {
															output = parser.Template_Type(input, 0);
															}else{
																if (rule == "Inherit") {
																	output = parser.Inherit(input, 0);
																	}else{
																		if (rule == "Root") {
																			output = parser.Root(input, 0);
																			}else{
																				if (rule == "Implements") {
																					output = parser.Implements(input, 0);
																					}else{
																						if (rule == "Type") {
																							output = parser.Type(input, 0);
																							}else{
																								if (rule == "Flag") {
																									output = parser.Flag(input, 0);
																									}else{
																										if (rule == "Member_Flag") {
																											output = parser.Member_Flag(input, 0);
																											}else{
																												if (rule == "Optional") {
																													output = parser.Optional(input, 0);
																													}else{
																														if (rule == "Parameter") {
																															output = parser.Parameter(input, 0);
																															}else{
																																if (rule == "Method") {
																																	output = parser.Method(input, 0);
																																	}else{
																																		if (rule == "Property") {
																																			output = parser.Property(input, 0);
																																			}else{
																																				if (rule == "Attribute_Value") {
																																					output = parser.Attribute_Value(input, 0);
																																					}else{
																																						if (rule == "Attribute_Pair") {
																																							output = parser.Attribute_Pair(input, 0);
																																							}else{
																																								if (rule == "Attribute") {
																																									output = parser.Attribute(input, 0);
																																									}else{
																																										if (rule == "Interface") {
																																											output = parser.Interface(input, 0);
																																											}else{
																																												if (rule == "Member_Value") {
																																													output = parser.Member_Value(input, 0);
																																													}else{
																																														if (rule == "Member_Flagged") {
																																															output = parser.Member_Flagged(input, 0);
																																															}else{
																																																if (rule == "Member") {
																																																	output = parser.Member(input, 0);
																																																	}else{
																																																		if (rule == "Any_Member") {
																																																			output = parser.Any_Member(input, 0);
																																																			}else{
																																																				if (rule == "Group") {
																																																					output = parser.Group(input, 0);
																																																					}else{
																																																						if (rule == "Constant") {
																																																							output = parser.Constant(input, 0);
																																																							}else{
																																																								if (rule == "Literal_Number") {
																																																									output = parser.Literal_Number(input, 0);
																																																									}else{
																																																										if (rule == "Literal_Boolean") {
																																																											output = parser.Literal_Boolean(input, 0);
																																																											}else{
																																																												if (rule == "Literal_String") {
																																																													output = parser.Literal_String(input, 0);
																																																													}else{
																																																														if (rule == "Literal_Array") {
																																																															output = parser.Literal_Array(input, 0);
																																																															}else{
																																																																if (rule == "Literal_Map_Key") {
																																																																	output = parser.Literal_Map_Key(input, 0);
																																																																	}else{
																																																																		if (rule == "Literal_Map") {
																																																																			output = parser.Literal_Map(input, 0);
																																																																			}else{
																																																																				if (rule == "Literal") {
																																																																					output = parser.Literal(input, 0);
																																																																					}else{
																																																																						if (rule == "Prefix") {
																																																																							output = parser.Prefix(input, 0);
																																																																							}else{
																																																																								if (rule == "Appendix_Dot") {
																																																																									output = parser.Appendix_Dot(input, 0);
																																																																									}else{
																																																																										if (rule == "Appendix_Call") {
																																																																											output = parser.Appendix_Call(input, 0);
																																																																											}else{
																																																																												if (rule == "Appendix_Index") {
																																																																													output = parser.Appendix_Index(input, 0);
																																																																													}else{
																																																																														if (rule == "Appendix_Code") {
																																																																															output = parser.Appendix_Code(input, 0);
																																																																															}else{
																																																																																if (rule == "Appendix") {
																																																																																	output = parser.Appendix(input, 0);
																																																																																	}else{
																																																																																		if (rule == "Term") {
																																																																																			output = parser.Term(input, 0);
																																																																																			}else{
																																																																																				if (rule == "Operand_Symbolic") {
																																																																																					output = parser.Operand_Symbolic(input, 0);
																																																																																					}else{
																																																																																						if (rule == "Operand_Word") {
																																																																																							output = parser.Operand_Word(input, 0);
																																																																																							}else{
																																																																																								if (rule == "Operation") {
																																																																																									output = parser.Operation(input, 0);
																																																																																									}else{
																																																																																										if (rule == "Anonymous_Function") {
																																																																																											output = parser.Anonymous_Function(input, 0);
																																																																																											}else{
																																																																																												if (rule == "Expression") {
																																																																																													output = parser.Expression(input, 0);
																																																																																													}else{
																																																																																														if (rule == "Expression_Line") {
																																																																																															output = parser.Expression_Line(input, 0);
																																																																																															}else{
																																																																																																if (rule == "Expression_Function") {
																																																																																																	output = parser.Expression_Function(input, 0);
																																																																																																	}else{
																																																																																																		if (rule == "Expression_Operation") {
																																																																																																			output = parser.Expression_Operation(input, 0);
																																																																																																			}else{
																																																																																																				if (rule == "Expression_Operated") {
																																																																																																					output = parser.Expression_Operated(input, 0);
																																																																																																					}else{
																																																																																																						if (rule == "Block") {
																																																																																																							output = parser.Block(input, 0);
																																																																																																							}else{
																																																																																																								if (rule == "Statement") {
																																																																																																									output = parser.Statement(input, 0);
																																																																																																									}else{
																																																																																																										if (rule == "Single_Statement") {
																																																																																																											output = parser.Single_Statement(input, 0);
																																																																																																											}else{
																																																																																																												if (rule == "If") {
																																																																																																													output = parser.If(input, 0);
																																																																																																													}else{
																																																																																																														if (rule == "ElseIf") {
																																																																																																															output = parser.ElseIf(input, 0);
																																																																																																															}else{
																																																																																																																if (rule == "Else") {
																																																																																																																	output = parser.Else(input, 0);
																																																																																																																	}else{
																																																																																																																		if (rule == "For") {
																																																																																																																			output = parser.For(input, 0);
																																																																																																																			}else{
																																																																																																																				if (rule == "For_In") {
																																																																																																																					output = parser.For_In(input, 0);
																																																																																																																					}else{
																																																																																																																						if (rule == "Break") {
																																																																																																																							output = parser.Break(input, 0);
																																																																																																																							}else{
																																																																																																																								if (rule == "Continue") {
																																																																																																																									output = parser.Continue(input, 0);
																																																																																																																									}else{
																																																																																																																										if (rule == "While") {
																																																																																																																											output = parser.While(input, 0);
																																																																																																																											}else{
																																																																																																																												if (rule == "Try") {
																																																																																																																													output = parser.Try(input, 0);
																																																																																																																													}else{
																																																																																																																														if (rule == "Catch") {
																																																																																																																															output = parser.Catch(input, 0);
																																																																																																																															}else{
																																																																																																																																if (rule == "Throw") {
																																																																																																																																	output = parser.Throw(input, 0);
																																																																																																																																	}else{
																																																																																																																																		if (rule == "Return") {
																																																																																																																																			output = parser.Return(input, 0);
																																																																																																																																			}else{
																																																																																																																																				if (rule == "Yield") {
																																																																																																																																					output = parser.Yield(input, 0);
																																																																																																																																					}else{
																																																																																																																																						if (rule == "Native") {
																																																																																																																																							output = parser.Native(input, 0);
																																																																																																																																							}else{
																																																																																																																																								if (rule == "Define_Auto") {
																																																																																																																																									output = parser.Define_Auto(input, 0);
																																																																																																																																									}else{
																																																																																																																																										if (rule == "Define") {
																																																																																																																																											output = parser.Define(input, 0);
																																																																																																																																											}else{
																																																																																																																																												if (rule == "Inline_Def") {
																																																																																																																																													output = parser.Inline_Def(input, 0);
																																																																																																																																													}else{
																																																																																																																																														if (rule == "Define_List") {
																																																																																																																																															output = parser.Define_List(input, 0);
																																																																																																																																															}else{
																																																																																																																																																if (rule == "Inline_Define") {
																																																																																																																																																	output = parser.Inline_Define(input, 0);
																																																																																																																																																	}else{
																																																																																																																																																		if (rule == "Multi_Define") {
																																																																																																																																																			output = parser.Multi_Define(input, 0);
																																																																																																																																																			}else{
																																																																																																																																																				if (rule == "Inline_Define_Auto") {
																																																																																																																																																					output = parser.Inline_Define_Auto(input, 0);
																																																																																																																																																					}else{
																																																																																																																																																						if (rule == "String_Tick") {
																																																																																																																																																							output = parser.String_Tick(input, 0);
																																																																																																																																																							}else{
																																																																																																																																																								if (rule == "_") {
																																																																																																																																																									output = parser._(input, 0);
																																																																																																																																																									}else{
																																																																																																																																																										if (rule == "__") {
																																																																																																																																																											output = parser.__(input, 0);
																																																																																																																																																											}else{
																																																																																																																																																												if (rule == "String") {
																																																																																																																																																													output = parser.String(input, 0);
																																																																																																																																																													}else{
																																																																																																																																																														if (rule == "String_Double") {
																																																																																																																																																															output = parser.String_Double(input, 0);
																																																																																																																																																															}else{
																																																																																																																																																																if (rule == "String_Single") {
																																																																																																																																																																	output = parser.String_Single(input, 0);
																																																																																																																																																																	}else{
																																																																																																																																																																		if (rule == "Json") {
																																																																																																																																																																			output = parser.Json(input, 0);
																																																																																																																																																																			}else{
																																																																																																																																																																				if (rule == "Json_Array") {
																																																																																																																																																																					output = parser.Json_Array(input, 0);
																																																																																																																																																																					}else{
																																																																																																																																																																						if (rule == "Json_EmptyArray") {
																																																																																																																																																																							output = parser.Json_EmptyArray(input, 0);
																																																																																																																																																																							}else{
																																																																																																																																																																								if (rule == "Json_EmptyMap") {
																																																																																																																																																																									output = parser.Json_EmptyMap(input, 0);
																																																																																																																																																																									}else{
																																																																																																																																																																										if (rule == "Json_Value") {
																																																																																																																																																																											output = parser.Json_Value(input, 0);
																																																																																																																																																																											}else{
																																																																																																																																																																												if (rule == "Json_Number") {
																																																																																																																																																																													output = parser.Json_Number(input, 0);
																																																																																																																																																																													}
																																																																																																																																																																											}
																																																																																																																																																																									}
																																																																																																																																																																							}
																																																																																																																																																																					}
																																																																																																																																																																			}
																																																																																																																																																																	}
																																																																																																																																																															}
																																																																																																																																																													}
																																																																																																																																																											}
																																																																																																																																																									}
																																																																																																																																																							}
																																																																																																																																																					}
																																																																																																																																																			}
																																																																																																																																																	}
																																																																																																																																															}
																																																																																																																																													}
																																																																																																																																											}
																																																																																																																																									}
																																																																																																																																							}
																																																																																																																																					}
																																																																																																																																			}
																																																																																																																																	}
																																																																																																																															}
																																																																																																																													}
																																																																																																																											}
																																																																																																																									}
																																																																																																																							}
																																																																																																																					}
																																																																																																																			}
																																																																																																																	}
																																																																																																															}
																																																																																																													}
																																																																																																											}
																																																																																																									}
																																																																																																							}
																																																																																																					}
																																																																																																			}
																																																																																																	}
																																																																																															}
																																																																																													}
																																																																																											}
																																																																																									}
																																																																																							}
																																																																																					}
																																																																																			}
																																																																																	}
																																																																															}
																																																																													}
																																																																											}
																																																																									}
																																																																							}
																																																																					}
																																																																			}
																																																																	}
																																																															}
																																																													}
																																																											}
																																																									}
																																																							}
																																																					}
																																																			}
																																																	}
																																															}
																																													}
																																											}
																																									}
																																							}
																																					}
																																			}
																																	}
																															}
																													}
																											}
																									}
																							}
																					}
																			}
																	}
															}
													}
											}
									}
							}
					}
			}
		if (parser.hadError && (parser.error.found == String.fromCharCode(1))) {
			parser.error.found = "End of input";
			}
		for (var i = 0;i < parser.error.offset;i++) {
			parser.error.column++;
			if (i < parser.currentInput.length) {
				if (parser.currentInput[i] == "\n") {
					parser.error.line++;
					parser.error.column = 0;
					}
				}
			}
		var rtn = new CarboniteCarbonParserOutput(output.hadError, output.error, output.data);
		return rtn;
	}
}

CarboniteCarbonParser.prototype.assembleCodes = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var codes = arguments[0];
		var rtn = "";
		for (var i = 0; i < codes.length; i++) {
			rtn += String.fromCharCode(codes[i]);
			}
		return rtn;
	}
}

CarboniteCarbonParser.prototype.giveError = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var code = arguments[0];
		var expected = arguments[1];
		var found = arguments[2];
		this.hadError = true;
		this.error.code = code;
		this.error.expected = expected;
		this.error.found = found;
		this.error.offset = this.offset;
		this.error.line = 1;
		this.error.column = 0;
	}
}

CarboniteCarbonParser.prototype.start = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		this.currentInput = input;
		input += String.fromCharCode(1);
		this.data["data"] = {};
		var data = this.data["data"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = 0;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (c == 0 - 1) {
				if (currentChar != String.fromCharCode(1)) {
					this.giveError(2, "EOF", currentChar);
					}
				}
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Document(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Document(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["document"] = ruleOutCast0;
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (this.hadError) {
				break;
				}
			}
		for (var i = 0;i < this.error.offset;i++) {
			this.error.column++;
			if (i < this.currentInput.length) {
				if (this.currentInput[i] == "\n") {
					this.error.line++;
					this.error.column = 0;
					}
				}
			}
		if (false && this.hadError == false) {
			if (this.offset < input.length - 1) {
				this.giveError(2, "EOF", input[this.offset + 1]);
				}
			}
	}
}

CarboniteCarbonParser.prototype.Document = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["roots"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Root(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						var castroots0 = data["roots"];
						castroots0.push(ruleOutCast0);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 0;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Implements(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castroots0 = data["roots"];
						castroots0.push(ruleOutCast1);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 0;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0roots = data["roots"];
							dataStore["data"]["type"] = "document";
							dataStore["data"]["roots"] = actionCap0roots;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Safe_Name = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["after"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 95) {
					passed0 = true;
					}else if (currentCode == 64) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 97 && currentCode <= 122) {
						passed0 = true;
						}else if (currentCode >= 65 && currentCode <= 90) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["start"] = currentChar;
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "a-z, A-Z, _, @", currentChar);
					}
				}else if (c == 1) {
				var passed1 = false;
				if (currentCode == 95) {
					passed1 = true;
					}else if (currentCode == 46) {
					passed1 = true;
					}
				if (passed1 == false) {
					if (currentCode >= 97 && currentCode <= 122) {
						passed1 = true;
						}else if (currentCode >= 65 && currentCode <= 90) {
						passed1 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed1 = true;
						}
					}
				if (passed1) {
					data["after"] += currentChar;
					if (true) {
						var castacafter0 = data["after"];
						var actionCap0start = data["start"];
						var actionCap0after = data["after"];
						var name = actionCap0start + actionCap0after;
						dataStore["data"] = name;
						}
					c = 1;
					this.error.vested++;
					}else{
						if (true) {
							var castacafter0 = data["after"];
							var actionCap0start = data["start"];
							var actionCap0after = data["after"];
							var name = actionCap0start + actionCap0after;
							dataStore["data"] = name;
							}
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Safe_Name_Seg = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["after"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 44) {
					c = 1;
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var passed2 = false;
				if (currentCode == 95) {
					passed2 = true;
					}else if (currentCode == 64) {
					passed2 = true;
					}
				if (passed2 == false) {
					if (currentCode >= 97 && currentCode <= 122) {
						passed2 = true;
						}else if (currentCode >= 65 && currentCode <= 90) {
						passed2 = true;
						}
					}
				if (passed2) {
					data["start"] = currentChar;
					c = 3;
					this.error.vested++;
					}else{
						this.giveError(1, "a-z, A-Z, _, @", currentChar);
					}
				}else if (c == 3) {
				var passed3 = false;
				if (currentCode == 95) {
					passed3 = true;
					}else if (currentCode == 46) {
					passed3 = true;
					}
				if (passed3 == false) {
					if (currentCode >= 97 && currentCode <= 122) {
						passed3 = true;
						}else if (currentCode >= 65 && currentCode <= 90) {
						passed3 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed3 = true;
						}
					}
				if (passed3) {
					data["after"] += currentChar;
					if (true) {
						var castacafter0 = data["after"];
						var actionCap0start = data["start"];
						var actionCap0after = data["after"];
						var name = actionCap0start + actionCap0after;
						dataStore["data"] = name;
						}
					c = 3;
					this.error.vested++;
					}else{
						if (true) {
							var castacafter0 = data["after"];
							var actionCap0start = data["start"];
							var actionCap0after = data["after"];
							var name = actionCap0start + actionCap0after;
							dataStore["data"] = name;
							}
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Template = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["types"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 60) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "<", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Type(input, charPos);
				if (ruleOut1.hadError) {
					var casttypes1 = data["types"];
					if (casttypes1.length >= 1) {
						c = 2;
						charPos--;
						this.offset--;
						}else{
							this.giveError(1, "Type", currentChar);
						}
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var casttypes1 = data["types"];
						casttypes1.push(ruleOutCast1);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 2;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 62) {
					if (true) {
						var castac0 = data;
						var actionCap0types = data["types"];
						dataStore["data"]["types"] = actionCap0types;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ">", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Template_Def = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0name = data["name"];
							var actionCap0type = data["type"];
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["type"] = actionCap0type;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Template_Default = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 61) {
					c = 6;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Type(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "Type(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["default"] = ruleOutCast7;
						c = 8;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0name = data["name"];
							var actionCap0type = data["type"];
							var actionCap0default = data["default"];
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["type"] = actionCap0type;
							dataStore["data"]["default"] = actionCap0default;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Template_Type = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["templates"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 60) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "<", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Template_Default(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var casttemplates1 = data["templates"];
						casttemplates1.push(ruleOutCast1);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Template_Def(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var casttemplates1 = data["templates"];
						casttemplates1.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 62) {
					if (true) {
						var castac0 = data;
						var actionCap0templates = data["templates"];
						dataStore["data"]["templates"] = actionCap0templates;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ">", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Inherit = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["types"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [105, 110, 104, 101, 114, 105, 116, 115];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [101, 120, 116, 101, 110, 100, 115];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "inherits, extends", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Type(input, charPos);
				if (ruleOut3.hadError) {
					var casttypes3 = data["types"];
					if (casttypes3.length >= 1) {
						if (true) {
							var castactypes0 = data["types"];
							var actionCap0types = data["types"];
							dataStore["data"]["types"] = actionCap0types;
							}
						c = 0 - 1;
						charPos--;
						this.offset--;
						}else{
							this.giveError(1, "Type", currentChar);
						}
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						var casttypes3 = data["types"];
						casttypes3.push(ruleOutCast3);
						if (input.charCodeAt(charPos + 1) != 44) {
							if (true) {
								var castactypes0 = data["types"];
								var actionCap0types = data["types"];
								dataStore["data"]["types"] = actionCap0types;
								}
							c = 0 - 1;
							continue;
							}else{
								charPos++;
							}
						if (true) {
							var castactypes0 = data["types"];
							var actionCap0types = data["types"];
							dataStore["data"]["types"] = actionCap0types;
							}
						c = 3;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Root = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["doc"] = [];
		data["flags"] = [];
		data["templates"] = [];
		data["members"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.String_Tick(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					if (ruleOut1.error.vested > 1) {
						this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);
						}
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castdoc1 = data["doc"];
						castdoc1.push(ruleOutCast1);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Attribute(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["attr"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Flag(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					if (ruleOut5.error.vested > 1) {
						this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);
						}
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castflags5 = data["flags"];
						castflags5.push(ruleOutCast5);
						if (input.charCodeAt(charPos + 1) != 32) {
							c = 6;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 5;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var lit7 = [105, 110, 116, 101, 114, 102, 97, 99, 101];
				if (currentCode == lit7[literalChar]) {
					literalChar++;
					if (literalChar == 9) {
						data["type"] = this.assembleCodes(lit7);
						c = 12;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 8;
						charPos--;
						this.offset--;
					}
				}else if (c == 8) {
				var lit8 = [114, 101, 108, 97, 116, 105, 118, 101];
				if (currentCode == lit8[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						data["type"] = this.assembleCodes(lit8);
						c = 12;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 9;
						charPos--;
						this.offset--;
					}
				}else if (c == 9) {
				var lit9 = [99, 108, 97, 115, 115];
				if (currentCode == lit9[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						data["type"] = this.assembleCodes(lit9);
						c = 12;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 10;
						charPos--;
						this.offset--;
					}
				}else if (c == 10) {
				var lit10 = [101, 120, 116, 101, 110, 100];
				if (currentCode == lit10[literalChar]) {
					literalChar++;
					if (literalChar == 6) {
						data["type"] = this.assembleCodes(lit10);
						c = 12;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 11;
						charPos--;
						this.offset--;
					}
				}else if (c == 11) {
				var lit11 = [110, 97, 109, 101, 115, 112, 97, 99, 101];
				if (currentCode == lit11[literalChar]) {
					literalChar++;
					if (literalChar == 9) {
						data["type"] = this.assembleCodes(lit11);
						c = 12;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "interface, relative, class, extend, namespace", currentChar);
					}
				}else if (c == 12) {
				var ruleOut12 = this.__(input, charPos);
				if (ruleOut12.hadError) {
					this.giveError(ruleOut12.error.code, "White space(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
					}else{
						var ruleOutCast12 = ruleOut12.data["data"];
						charPos = this.offset;
						c = 13;
					}
				}else if (c == 13) {
				var ruleOut13 = this.Template_Type(input, charPos);
				if (ruleOut13.hadError) {
					c = 14;
					charPos--;
					this.offset--;
					if (ruleOut13.error.vested > 1) {
						this.giveError(ruleOut13.error.code, ruleOut13.error.expected, ruleOut13.error.found);
						}
					}else{
						var ruleOutCast13 = ruleOut13.data["data"];
						charPos = this.offset;
						var casttemplates13 = data["templates"];
						casttemplates13.push(ruleOutCast13);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 13;
						this.error.vested++;
					}
				}else if (c == 14) {
				var ruleOut14 = this._(input, charPos);
				if (ruleOut14.hadError) {
					this.giveError(ruleOut14.error.code, "White space(optional)(" + ruleOut14.error.expected + ")", ruleOut14.error.found);
					}else{
						var ruleOutCast14 = ruleOut14.data["data"];
						charPos = this.offset;
						c = 15;
					}
				}else if (c == 15) {
				var ruleOut15 = this.Safe_Name(input, charPos);
				if (ruleOut15.hadError) {
					this.giveError(ruleOut15.error.code, "Safe_Name(" + ruleOut15.error.expected + ")", ruleOut15.error.found);
					}else{
						var ruleOutCast15 = ruleOut15.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast15;
						c = 16;
						this.error.vested++;
					}
				}else if (c == 16) {
				var ruleOut16 = this._(input, charPos);
				if (ruleOut16.hadError) {
					this.giveError(ruleOut16.error.code, "White space(optional)(" + ruleOut16.error.expected + ")", ruleOut16.error.found);
					}else{
						var ruleOutCast16 = ruleOut16.data["data"];
						charPos = this.offset;
						c = 17;
					}
				}else if (c == 17) {
				var ruleOut17 = this.Inherit(input, charPos);
				if (ruleOut17.hadError) {
					c = 18;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast17 = ruleOut17.data["data"];
						charPos = this.offset;
						data["inherits"] = ruleOutCast17;
						c = 18;
						this.error.vested++;
					}
				}else if (c == 18) {
				var ruleOut18 = this._(input, charPos);
				if (ruleOut18.hadError) {
					this.giveError(ruleOut18.error.code, "White space(optional)(" + ruleOut18.error.expected + ")", ruleOut18.error.found);
					}else{
						var ruleOutCast18 = ruleOut18.data["data"];
						charPos = this.offset;
						c = 19;
					}
				}else if (c == 19) {
				if (currentCode == 123) {
					c = 20;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 20) {
				var ruleOut20 = this._(input, charPos);
				if (ruleOut20.hadError) {
					this.giveError(ruleOut20.error.code, "White space(optional)(" + ruleOut20.error.expected + ")", ruleOut20.error.found);
					}else{
						var ruleOutCast20 = ruleOut20.data["data"];
						charPos = this.offset;
						c = 21;
					}
				}else if (c == 21) {
				var ruleOut21 = this.Member_Flagged(input, charPos);
				if (ruleOut21.hadError) {
					c = 22;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast21 = ruleOut21.data["data"];
						charPos = this.offset;
						var castmembers21 = data["members"];
						castmembers21.push(ruleOutCast21);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 21;
						this.error.vested++;
					}
				}else if (c == 22) {
				var ruleOut22 = this.Member(input, charPos);
				if (ruleOut22.hadError) {
					c = 23;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast22 = ruleOut22.data["data"];
						charPos = this.offset;
						var castmembers21 = data["members"];
						castmembers21.push(ruleOutCast22);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 21;
						this.error.vested++;
					}
				}else if (c == 23) {
				var ruleOut23 = this._(input, charPos);
				if (ruleOut23.hadError) {
					this.giveError(ruleOut23.error.code, "White space(optional)(" + ruleOut23.error.expected + ")", ruleOut23.error.found);
					}else{
						var ruleOutCast23 = ruleOut23.data["data"];
						charPos = this.offset;
						c = 24;
					}
				}else if (c == 24) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						var actionCap0type = data["type"];
						var actionCap0attr = data["attr"];
						var actionCap0doc = data["doc"];
						var actionCap0flags = data["flags"];
						var actionCap0name = data["name"];
						var actionCap0members = data["members"];
						var actionCap0inherits = data["inherits"];
						var actionCap0templates = data["templates"];
						dataStore["data"]["type"] = actionCap0type;
						dataStore["data"]["attribute"] = actionCap0attr;
						dataStore["data"]["doc"] = actionCap0doc;
						dataStore["data"]["flags"] = actionCap0flags;
						dataStore["data"]["name"] = actionCap0name;
						dataStore["data"]["members"] = actionCap0members;
						dataStore["data"]["inherits"] = actionCap0inherits;
						dataStore["data"]["templates"] = actionCap0templates;
						dataStore["data"]["start"] = startPos;
						dataStore["data"]["end"] = charPos;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Implements = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["base"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var lit3 = [105, 109, 112, 108, 101, 109, 101, 110, 116, 115];
				if (currentCode == lit3[literalChar]) {
					literalChar++;
					if (literalChar == 10) {
						c = 4;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit3) + "", currentChar);
					}
				}else if (c == 4) {
				var ruleOut4 = this.__(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Safe_Name(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["subject"] = ruleOutCast5;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0base = data["base"];
						var actionCap0subject = data["subject"];
						dataStore["data"]["type"] = "implements";
						dataStore["data"]["implementer"] = actionCap0base;
						dataStore["data"]["implements"] = actionCap0subject;
						dataStore["data"]["start"] = startPos;
						dataStore["data"]["end"] = charPos;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Type = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["reference"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Template(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["template"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				if (currentCode == 38) {
					var castreference3 = data["reference"];
					castreference3.push("&");
					if (true) {
						var castacreference0 = data["reference"];
						var actionCap0name = data["name"];
						var actionCap0reference = data["reference"];
						var actionCap0template = data["template"];
						dataStore["data"]["name"] = actionCap0name;
						dataStore["data"]["reference"] = actionCap0reference.length;
						dataStore["data"]["start"] = startPos;
						dataStore["data"]["end"] = charPos;
						if (actionCap0template != null) {
							var tt = actionCap0template["types"];
							dataStore["data"]["template"] = tt;
							}else{
								dataStore["data"]["template"] = false;
							}
						}
					c = 3;
					this.error.vested++;
					}else{
						if (true) {
							var castacreference0 = data["reference"];
							var actionCap0name = data["name"];
							var actionCap0reference = data["reference"];
							var actionCap0template = data["template"];
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["reference"] = actionCap0reference.length;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							if (actionCap0template != null) {
								var tt = actionCap0template["types"];
								dataStore["data"]["template"] = tt;
								}else{
									dataStore["data"]["template"] = false;
								}
							}
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Flag = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast1;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							if (actionCap0str == "class") {
								this.giveError(1, "" + "" + "", "");
								}
							if (actionCap0str == "relative") {
								this.giveError(1, "" + "" + "", "");
								}
							if (actionCap0str == "extend") {
								this.giveError(1, "" + "" + "", "");
								}
							if (actionCap0str == "namespace") {
								this.giveError(1, "" + "" + "", "");
								}
							if (actionCap0str == "interface") {
								this.giveError(1, "" + "" + "", "");
								}
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Member_Flag = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Optional = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 61) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Parameter = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["op"] = [];
		data["doc"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Type(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Type(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Optional(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					if (ruleOut5.error.vested > 1) {
						this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);
						}
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castop5 = data["op"];
						castop5.push(ruleOutCast5);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 5;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.String_Tick(input, charPos);
				if (ruleOut7.hadError) {
					if (true) {
						var castacdoc0 = data["doc"];
						var actionCap0type = data["type"];
						var actionCap0doc = data["doc"];
						var actionCap0name = data["name"];
						var actionCap0op = data["op"];
						dataStore["data"]["type"] = actionCap0type;
						dataStore["data"]["doc"] = actionCap0doc;
						dataStore["data"]["name"] = actionCap0name;
						dataStore["data"]["optional"] = actionCap0op;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					if (ruleOut7.error.vested > 1) {
						this.giveError(ruleOut7.error.code, ruleOut7.error.expected, ruleOut7.error.found);
						}
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						var castdoc7 = data["doc"];
						castdoc7.push(ruleOutCast7);
						if (true) {
							var castacdoc0 = data["doc"];
							var actionCap0type = data["type"];
							var actionCap0doc = data["doc"];
							var actionCap0name = data["name"];
							var actionCap0op = data["op"];
							dataStore["data"]["type"] = actionCap0type;
							dataStore["data"]["doc"] = actionCap0doc;
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["optional"] = actionCap0op;
							}
						c = 7;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["parameters"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 40) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Parameter(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castparameters2 = data["parameters"];
						castparameters2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 41) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Block(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast6;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0parameters = data["parameters"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "method";
							dataStore["data"]["parameters"] = actionCap0parameters;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Interface(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(1, "Block, Interface", currentChar);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast7;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0parameters = data["parameters"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "method";
							dataStore["data"]["parameters"] = actionCap0parameters;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 61) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "property";
						dataStore["data"]["value"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Attribute_Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				if (currentCode == 61) {
					c = 2;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Json_Value(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Json_Value(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["val"] = ruleOutCast3;
						if (true) {
							var castacval0 = data["val"];
							var actionCap0val = data["val"];
							dataStore["data"] = actionCap0val;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Attribute_Pair = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["val"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["key"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Attribute_Value(input, charPos);
				if (ruleOut2.hadError) {
					if (true) {
						var castacval0 = data["val"];
						var actionCap0key = data["key"];
						var actionCap0val = data["val"];
						dataStore["data"]["key"] = actionCap0key;
						if (actionCap0val.length > 0) {
							dataStore["data"]["value"] = actionCap0val[0];
							}else{
								dataStore["data"]["value"] = true;
							}
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castval2 = data["val"];
						castval2.push(ruleOutCast2);
						if (true) {
							var castacval0 = data["val"];
							var actionCap0key = data["key"];
							var actionCap0val = data["val"];
							dataStore["data"]["key"] = actionCap0key;
							if (actionCap0val.length > 0) {
								dataStore["data"]["value"] = actionCap0val[0];
								}else{
									dataStore["data"]["value"] = true;
								}
							}
						c = 2;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Attribute = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["attrs"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Attribute_Pair(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castattrs2 = data["attrs"];
						castattrs2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						var actionCap0attrs = data["attrs"];
						dataStore["data"] = actionCap0attrs;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Interface = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						dataStore["data"]["type"] = "interface";
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Member_Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Method(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast0;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Property(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast1;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Interface(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Method, Property, Interface", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast2;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Member_Flagged = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["doc"] = [];
		data["flags"] = [];
		data["templates"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.String_Tick(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					if (ruleOut1.error.vested > 1) {
						this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);
						}
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castdoc1 = data["doc"];
						castdoc1.push(ruleOutCast1);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Attribute(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["attr"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Member_Flag(input, charPos);
				if (ruleOut5.hadError) {
					var castflags5 = data["flags"];
					if (castflags5.length >= 1) {
						c = 6;
						charPos--;
						this.offset--;
						}else{
							this.giveError(1, "Member_Flag", currentChar);
						}
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castflags5 = data["flags"];
						castflags5.push(ruleOutCast5);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 5;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Type(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast7;
						c = 8;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						c = 9;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Template_Type(input, charPos);
				if (ruleOut9.hadError) {
					c = 10;
					charPos--;
					this.offset--;
					if (ruleOut9.error.vested > 1) {
						this.giveError(ruleOut9.error.code, ruleOut9.error.expected, ruleOut9.error.found);
						}
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						var casttemplates9 = data["templates"];
						casttemplates9.push(ruleOutCast9);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 9;
						this.error.vested++;
					}
				}else if (c == 10) {
				var ruleOut10 = this._(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						c = 11;
					}
				}else if (c == 11) {
				var ruleOut11 = this.Safe_Name(input, charPos);
				if (ruleOut11.hadError) {
					c = 12;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast11 = ruleOut11.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast11;
						c = 12;
						this.error.vested++;
					}
				}else if (c == 12) {
				var ruleOut12 = this._(input, charPos);
				if (ruleOut12.hadError) {
					this.giveError(ruleOut12.error.code, "White space(optional)(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
					}else{
						var ruleOutCast12 = ruleOut12.data["data"];
						charPos = this.offset;
						c = 13;
					}
				}else if (c == 13) {
				var ruleOut13 = this.Member_Value(input, charPos);
				if (ruleOut13.hadError) {
					this.giveError(ruleOut13.error.code, "Member_Value(" + ruleOut13.error.expected + ")", ruleOut13.error.found);
					}else{
						var ruleOutCast13 = ruleOut13.data["data"];
						charPos = this.offset;
						data["val"] = ruleOutCast13;
						if (true) {
							var castacval0 = data["val"];
							var actionCap0val = data["val"];
							var actionCap0name = data["name"];
							var actionCap0flags = data["flags"];
							var actionCap0type = data["type"];
							var actionCap0templates = data["templates"];
							var actionCap0attr = data["attr"];
							var actionCap0doc = data["doc"];
							dataStore["data"]["type"] = actionCap0val["type"];
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["value"] = actionCap0val;
							if (actionCap0name == null) {
								dataStore["data"]["output"] = {};
								if (actionCap0flags.length == 0) {
									this.giveError(1, "" + "" + "", "");
									}else if (actionCap0type == null) {
									dataStore["data"]["name"] = actionCap0flags[actionCap0flags.length - 1];
									actionCap0flags.pop();
									dataStore["data"]["output"]["name"] = actionCap0flags[actionCap0flags.length - 1];
									actionCap0flags.pop();
									}else if (actionCap0flags.length >= 1) {
									dataStore["data"]["name"] = actionCap0type["name"];
									dataStore["data"]["output"]["name"] = actionCap0flags[actionCap0flags.length - 1];
									actionCap0flags.pop();
									}
								dataStore["data"]["output"]["template"] = [];
								dataStore["data"]["flags"] = actionCap0flags;
								}else{
									dataStore["data"]["flags"] = actionCap0flags;
									dataStore["data"]["output"] = actionCap0type;
								}
							dataStore["data"]["templates"] = actionCap0templates;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["attribute"] = actionCap0attr;
							dataStore["data"]["doc"] = actionCap0doc;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Member = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["doc"] = [];
		data["templates"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.String_Tick(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					if (ruleOut1.error.vested > 1) {
						this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);
						}
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castdoc1 = data["doc"];
						castdoc1.push(ruleOutCast1);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Attribute(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["attr"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Type(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Type(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast5;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.__(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Template_Type(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					if (ruleOut7.error.vested > 1) {
						this.giveError(ruleOut7.error.code, ruleOut7.error.expected, ruleOut7.error.found);
						}
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						var casttemplates7 = data["templates"];
						casttemplates7.push(ruleOutCast7);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 7;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						c = 9;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Safe_Name(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "Safe_Name(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast9;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 10) {
				var ruleOut10 = this._(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						c = 11;
					}
				}else if (c == 11) {
				var ruleOut11 = this.Member_Value(input, charPos);
				if (ruleOut11.hadError) {
					this.giveError(ruleOut11.error.code, "Member_Value(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
					}else{
						var ruleOutCast11 = ruleOut11.data["data"];
						charPos = this.offset;
						data["val"] = ruleOutCast11;
						if (true) {
							var castacval0 = data["val"];
							var actionCap0val = data["val"];
							var actionCap0attr = data["attr"];
							var actionCap0doc = data["doc"];
							var actionCap0type = data["type"];
							var actionCap0name = data["name"];
							var actionCap0templates = data["templates"];
							dataStore["data"]["type"] = actionCap0val["type"];
							dataStore["data"]["attribute"] = actionCap0attr;
							dataStore["data"]["doc"] = actionCap0doc;
							dataStore["data"]["output"] = actionCap0type;
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["value"] = actionCap0val;
							dataStore["data"]["flags"] = [];
							dataStore["data"]["templates"] = actionCap0templates;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Any_Member = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Member_Flagged(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["mem"] = ruleOutCast0;
						if (true) {
							var castacmem0 = data["mem"];
							var actionCap0mem = data["mem"];
							dataStore["data"] = actionCap0mem;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Member(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(1, "Member_Flagged, Member", currentChar);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["mem"] = ruleOutCast1;
						if (true) {
							var castacmem0 = data["mem"];
							var actionCap0mem = data["mem"];
							dataStore["data"] = actionCap0mem;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Group = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 40) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				if (currentCode == 41) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "group";
						dataStore["data"]["expression"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Constant = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Safe_Name(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast0;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = "constant";
							dataStore["data"]["name"] = actionCap0name;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Literal_Number = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["num"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 46) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["num"] += currentChar;
					if (true) {
						var castacnum0 = data["num"];
						var actionCap0num = data["num"];
						dataStore["data"]["type"] = "literal";
						dataStore["data"]["literalType"] = "number";
						var num = parseFloat(actionCap0num);
						dataStore["data"]["value"] = num;
						if (num % 1 === 0) {
							dataStore["data"]["integer"] = true;
							}else{
								dataStore["data"]["integer"] = false;
							}
						}
					c = 0;
					this.error.vested++;
					}else{
						var castnum0 = data["num"];
						if (castnum0.length >= 1) {
							if (true) {
								var castacnum0 = data["num"];
								var actionCap0num = data["num"];
								dataStore["data"]["type"] = "literal";
								dataStore["data"]["literalType"] = "number";
								var num = parseFloat(actionCap0num);
								dataStore["data"]["value"] = num;
								if (num % 1 === 0) {
									dataStore["data"]["integer"] = true;
									}else{
										dataStore["data"]["integer"] = false;
									}
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "0-9, .", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Literal_Boolean = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [116, 114, 117, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacbool0 = data["bool"];
							data["bool"] = true;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [102, 97, 108, 115, 101];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						if (true) {
							var castacbool1 = data["bool"];
							data["bool"] = false;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "true, false", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Literal_String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "string";
							dataStore["data"]["value"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Literal_Array = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["arr"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					if (ruleOut1.error.vested > 1) {
						this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);
						}
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castarr1 = data["arr"];
						castarr1.push(ruleOutCast1);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 2;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						var actionCap0arr = data["arr"];
						dataStore["data"]["type"] = "literal";
						dataStore["data"]["literalType"] = "array";
						dataStore["data"]["value"] = actionCap0arr;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Literal_Map_Key = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["key"] = ruleOutCast1;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.String(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Safe_Name, String", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["key"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 58) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, ":", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Expression(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["value"] = ruleOutCast6;
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0key = data["key"];
							var actionCap0value = data["value"];
							dataStore["data"]["key"] = actionCap0key;
							dataStore["data"]["value"] = actionCap0value;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Literal_Map = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["arr"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Literal_Map_Key(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castarr2 = data["arr"];
						castarr2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						var actionCap0arr = data["arr"];
						dataStore["data"]["type"] = "literal";
						dataStore["data"]["literalType"] = "map";
						dataStore["data"]["value"] = actionCap0arr;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Literal = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Literal_Number(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast0;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Literal_Boolean(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast1;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Literal_String(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast2;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Literal_Array(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast3;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Literal_Map(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(1, "Literal_Number, Literal_Boolean, Literal_String, Literal_Array, Literal_Map", currentChar);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast4;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Prefix = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [110, 101, 119];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						data["pre"] = this.assembleCodes(lit0);
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.__(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0pre = data["pre"];
							var actionCap0exp = data["exp"];
							dataStore["data"]["type"] = "prefix";
							dataStore["data"]["prefix"] = actionCap0pre;
							dataStore["data"]["expression"] = actionCap0exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Appendix_Dot = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				if (currentCode == 46) {
					c = 2;
					this.error.vested++;
					}else{
						this.giveError(1, ".", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = "dot";
							dataStore["data"]["name"] = actionCap0name;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Appendix_Call = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["exp"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Template(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["templates"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 40) {
					c = 4;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Expression(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					if (ruleOut5.error.vested > 1) {
						this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);
						}
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castexp5 = data["exp"];
						castexp5.push(ruleOutCast5);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 6;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 5;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				if (currentCode == 41) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						var actionCap0templates = data["templates"];
						dataStore["data"]["type"] = "call";
						dataStore["data"]["expression"] = actionCap0exp;
						dataStore["data"]["templates"] = actionCap0templates;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Appendix_Index = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				if (currentCode == 91) {
					c = 2;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Expression(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Expression(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "index";
						dataStore["data"]["expression"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Appendix_Code = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Block(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Block(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["code"] = ruleOutCast1;
						if (true) {
							var castaccode0 = data["code"];
							var actionCap0code = data["code"];
							dataStore["data"]["type"] = "code";
							dataStore["data"]["code"] = actionCap0code;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Appendix = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Appendix_Dot(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["a"] = ruleOutCast0;
						if (true) {
							var castaca0 = data["a"];
							var actionCap0a = data["a"];
							dataStore["data"] = actionCap0a;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Appendix_Call(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["a"] = ruleOutCast1;
						if (true) {
							var castaca0 = data["a"];
							var actionCap0a = data["a"];
							dataStore["data"] = actionCap0a;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Appendix_Index(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["a"] = ruleOutCast2;
						if (true) {
							var castaca0 = data["a"];
							var actionCap0a = data["a"];
							dataStore["data"] = actionCap0a;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Appendix_Code(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(1, "Appendix_Dot, Appendix_Call, Appendix_Index, Appendix_Code", currentChar);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["a"] = ruleOutCast3;
						if (true) {
							var castaca0 = data["a"];
							var actionCap0a = data["a"];
							dataStore["data"] = actionCap0a;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Term = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["prefix"] = "";
		data["appendix"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 33) {
					passed0 = true;
					}else if (currentCode == 64) {
					passed0 = true;
					}else if (currentCode == 35) {
					passed0 = true;
					}else if (currentCode == 58) {
					passed0 = true;
					}else if (currentCode == 36) {
					passed0 = true;
					}else if (currentCode == 37) {
					passed0 = true;
					}else if (currentCode == 94) {
					passed0 = true;
					}else if (currentCode == 38) {
					passed0 = true;
					}else if (currentCode == 42) {
					passed0 = true;
					}else if (currentCode == 95) {
					passed0 = true;
					}else if (currentCode == 43) {
					passed0 = true;
					}else if (currentCode == 61) {
					passed0 = true;
					}else if (currentCode == 126) {
					passed0 = true;
					}else if (currentCode == 96) {
					passed0 = true;
					}else if (currentCode == 62) {
					passed0 = true;
					}else if (currentCode == 124) {
					passed0 = true;
					}else if (currentCode == 47) {
					passed0 = true;
					}else if (currentCode == 45) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					data["prefix"] += currentChar;
					if (charPos == input.length - 1) {
						this.giveError(2, "EOF", currentChar);
						}
					c = 0;
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Template(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["template"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Anonymous_Function(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast2;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Literal(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast3;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Prefix(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast4;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Constant(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast5;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Group(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(1, "Anonymous_Function, Literal, Prefix, Constant, Group", currentChar);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast6;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Appendix(input, charPos);
				if (ruleOut7.hadError) {
					if (true) {
						var castacappendix0 = data["appendix"];
						var actionCap0e = data["e"];
						var actionCap0appendix = data["appendix"];
						var actionCap0template = data["template"];
						var actionCap0prefix = data["prefix"];
						dataStore["data"] = actionCap0e;
						dataStore["data"]["start"] = startPos;
						dataStore["data"]["end"] = charPos;
						dataStore["data"]["appendix"] = actionCap0appendix;
						if (actionCap0template != null) {
							dataStore["data"]["template"] = actionCap0template;
							}
						if (actionCap0prefix.length > 0) {
							dataStore["data"]["prefix"] = actionCap0prefix;
							}
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					if (ruleOut7.error.vested > 1) {
						this.giveError(ruleOut7.error.code, ruleOut7.error.expected, ruleOut7.error.found);
						}
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						var castappendix7 = data["appendix"];
						castappendix7.push(ruleOutCast7);
						if (true) {
							var castacappendix0 = data["appendix"];
							var actionCap0e = data["e"];
							var actionCap0appendix = data["appendix"];
							var actionCap0template = data["template"];
							var actionCap0prefix = data["prefix"];
							dataStore["data"] = actionCap0e;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							dataStore["data"]["appendix"] = actionCap0appendix;
							if (actionCap0template != null) {
								dataStore["data"]["template"] = actionCap0template;
								}
							if (actionCap0prefix.length > 0) {
								dataStore["data"]["prefix"] = actionCap0prefix;
								}
							}
						c = 7;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Operand_Symbolic = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["operator"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var passed1 = false;
				if (currentCode == 33) {
					passed1 = true;
					}else if (currentCode == 64) {
					passed1 = true;
					}else if (currentCode == 58) {
					passed1 = true;
					}else if (currentCode == 36) {
					passed1 = true;
					}else if (currentCode == 37) {
					passed1 = true;
					}else if (currentCode == 94) {
					passed1 = true;
					}else if (currentCode == 38) {
					passed1 = true;
					}else if (currentCode == 42) {
					passed1 = true;
					}else if (currentCode == 95) {
					passed1 = true;
					}else if (currentCode == 43) {
					passed1 = true;
					}else if (currentCode == 61) {
					passed1 = true;
					}else if (currentCode == 126) {
					passed1 = true;
					}else if (currentCode == 96) {
					passed1 = true;
					}else if (currentCode == 124) {
					passed1 = true;
					}else if (currentCode == 62) {
					passed1 = true;
					}else if (currentCode == 47) {
					passed1 = true;
					}else if (currentCode == 60) {
					passed1 = true;
					}else if (currentCode == 45) {
					passed1 = true;
					}
				if (passed1 == false) {

					}
				if (passed1) {
					data["operator"] += currentChar;
					c = 1;
					this.error.vested++;
					}else{
						var castoperator1 = data["operator"];
						if (castoperator1.length >= 1) {
							c = 2;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "!, @, :, $, %, ^, &, *, _, +, =, ~, `, |, >, /, <, -", currentChar);
							}
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0operator = data["operator"];
							dataStore["data"] = actionCap0operator;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Operand_Word = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["operator"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.__(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var passed1 = false;
				if (currentCode == 95) {
					passed1 = true;
					}else if (currentCode == 33) {
					passed1 = true;
					}else if (currentCode == 64) {
					passed1 = true;
					}else if (currentCode == 35) {
					passed1 = true;
					}else if (currentCode == 36) {
					passed1 = true;
					}else if (currentCode == 37) {
					passed1 = true;
					}else if (currentCode == 94) {
					passed1 = true;
					}else if (currentCode == 38) {
					passed1 = true;
					}else if (currentCode == 42) {
					passed1 = true;
					}else if (currentCode == 95) {
					passed1 = true;
					}else if (currentCode == 43) {
					passed1 = true;
					}else if (currentCode == 61) {
					passed1 = true;
					}else if (currentCode == 126) {
					passed1 = true;
					}else if (currentCode == 96) {
					passed1 = true;
					}else if (currentCode == 124) {
					passed1 = true;
					}else if (currentCode == 62) {
					passed1 = true;
					}else if (currentCode == 60) {
					passed1 = true;
					}else if (currentCode == 47) {
					passed1 = true;
					}else if (currentCode == 45) {
					passed1 = true;
					}
				if (passed1 == false) {
					if (currentCode >= 65 && currentCode <= 90) {
						passed1 = true;
						}else if (currentCode >= 97 && currentCode <= 122) {
						passed1 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed1 = true;
						}
					}
				if (passed1) {
					data["operator"] += currentChar;
					c = 1;
					this.error.vested++;
					}else{
						var castoperator1 = data["operator"];
						if (castoperator1.length >= 1) {
							c = 2;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "A-Z, a-z, 0-9, _, !, @, #, $, %, ^, &, *, _, +, =, ~, `, |, >, <, /, -", currentChar);
							}
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0operator = data["operator"];
							dataStore["data"] = actionCap0operator;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Operation = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Term(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Term(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["head"] = ruleOutCast0;
						c = 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Operand_Symbolic(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["operator"] = ruleOutCast1;
						if (true) {
							var castacoperator0 = data["operator"];
							var actionCap0operator = data["operator"];
							var actionCap0head = data["head"];
							dataStore["data"]["operator"] = actionCap0operator;
							dataStore["data"]["term"] = actionCap0head;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Operand_Word(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Operand_Symbolic, Operand_Word", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["operator"] = ruleOutCast2;
						if (true) {
							var castacoperator0 = data["operator"];
							var actionCap0operator = data["operator"];
							var actionCap0head = data["head"];
							dataStore["data"]["operator"] = actionCap0operator;
							dataStore["data"]["term"] = actionCap0head;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Anonymous_Function = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["parameters"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Type(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Type(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast0;
						c = 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 40) {
					c = 3;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Parameter(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					if (ruleOut4.error.vested > 1) {
						this.giveError(ruleOut4.error.code, ruleOut4.error.expected, ruleOut4.error.found);
						}
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						var castparameters4 = data["parameters"];
						castparameters4.push(ruleOutCast4);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 5;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 4;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				if (currentCode == 41) {
					c = 7;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}else if (c == 7) {
				var ruleOut7 = this._(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						c = 8;
					}
				}else if (c == 8) {
				var lit8 = [61, 62];
				if (currentCode == lit8[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 9;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				var ruleOut10 = this.Block(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "Block(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast10;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0type = data["type"];
							var actionCap0parameters = data["parameters"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "function";
							dataStore["data"]["output"] = actionCap0type;
							dataStore["data"]["parameters"] = actionCap0parameters;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Expression = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression_Function(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression_Operation(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Expression_Operated(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(1, "Expression_Function, Expression_Operation, Expression_Operated", currentChar);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast3;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Expression_Line = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Expression(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Expression(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast0;
						c = 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Expression_Function = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Anonymous_Function(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Anonymous_Function(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast0;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"]["terms"] = [actionCap0exp];
							dataStore["data"]["type"] = "expression";
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Expression_Operation = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["exp"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Operation(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					if (ruleOut0.error.vested > 1) {
						this.giveError(ruleOut0.error.code, ruleOut0.error.expected, ruleOut0.error.found);
						}
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						var castexp0 = data["exp"];
						castexp0.push(ruleOutCast0);
						c = 0;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Term(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Term(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["t"] = ruleOutCast1;
						if (true) {
							var castact0 = data["t"];
							var actionCap0exp = data["exp"];
							var actionCap0t = data["t"];
							actionCap0exp.push(actionCap0t);
							dataStore["data"]["terms"] = actionCap0exp;
							dataStore["data"]["type"] = "expression";
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Expression_Operated = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["exp"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Operation(input, charPos);
				if (ruleOut0.hadError) {
					var castexp0 = data["exp"];
					if (castexp0.length >= 1) {
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"]["terms"] = actionCap0exp;
							dataStore["data"]["type"] = "expression";
							}
						c = 0 - 1;
						charPos--;
						this.offset--;
						}else{
							this.giveError(1, "Operation", currentChar);
						}
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						var castexp0 = data["exp"];
						castexp0.push(ruleOutCast0);
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"]["terms"] = actionCap0exp;
							dataStore["data"]["type"] = "expression";
							}
						c = 0;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Block = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["code"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Statement(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castcode2 = data["code"];
						castcode2.push(ruleOutCast2);
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						var actionCap0code = data["code"];
						dataStore["data"]["type"] = "block";
						dataStore["data"]["code"] = actionCap0code;
						dataStore["data"]["start"] = startPos;
						dataStore["data"]["end"] = charPos;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Statement = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.If(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast1;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Define(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast2;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Define_Auto(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast3;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.For(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast4;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.For_In(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast5;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Break(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast6;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Try(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast7;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this.Throw(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast8;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Continue(input, charPos);
				if (ruleOut9.hadError) {
					c = 10;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast9;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 10) {
				var ruleOut10 = this.While(input, charPos);
				if (ruleOut10.hadError) {
					c = 11;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast10;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 11) {
				var ruleOut11 = this.Return(input, charPos);
				if (ruleOut11.hadError) {
					c = 12;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast11 = ruleOut11.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast11;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 12) {
				var ruleOut12 = this.Yield(input, charPos);
				if (ruleOut12.hadError) {
					c = 13;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast12 = ruleOut12.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast12;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 13) {
				var ruleOut13 = this.Native(input, charPos);
				if (ruleOut13.hadError) {
					c = 14;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast13 = ruleOut13.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast13;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 14) {
				var ruleOut14 = this.Expression_Line(input, charPos);
				if (ruleOut14.hadError) {
					this.giveError(1, "If, Define, Define_Auto, For, For_In, Break, Try, Throw, Continue, While, Return, Yield, Native, Expression_Line", currentChar);
					}else{
						var ruleOutCast14 = ruleOut14.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast14;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"] = actionCap0state;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Single_Statement = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Statement(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Statement(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["state"] = ruleOutCast0;
						if (true) {
							var castacstate0 = data["state"];
							var actionCap0state = data["state"];
							dataStore["data"]["type"] = "block";
							dataStore["data"]["code"] = [actionCap0state];
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.If = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["alt"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [105, 102];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Group(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["check"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Block(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast4;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Single_Statement(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast5;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.ElseIf(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						var castalt7 = data["alt"];
						castalt7.push(ruleOutCast7);
						if (true) {
							var castacalt0 = data["alt"];
							var actionCap0alt = data["alt"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "if";
							dataStore["data"]["alternatives"] = actionCap0alt;
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 7;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this.Else(input, charPos);
				if (ruleOut8.hadError) {
					if (true) {
						var castacalt0 = data["alt"];
						var actionCap0alt = data["alt"];
						var actionCap0check = data["check"];
						var actionCap0body = data["body"];
						dataStore["data"]["type"] = "if";
						dataStore["data"]["alternatives"] = actionCap0alt;
						dataStore["data"]["check"] = actionCap0check;
						dataStore["data"]["body"] = actionCap0body;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						var castalt7 = data["alt"];
						castalt7.push(ruleOutCast8);
						if (true) {
							var castacalt0 = data["alt"];
							var actionCap0alt = data["alt"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "if";
							dataStore["data"]["alternatives"] = actionCap0alt;
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 7;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.ElseIf = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [101, 108, 115, 101, 32, 105, 102];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Group(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["check"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Block(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast4;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "elseif";
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Single_Statement(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast5;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "elseif";
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Else = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [101, 108, 115, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Block(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast2;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "else";
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Single_Statement(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast3;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "else";
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.For = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [102, 111, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 40) {
					c = 3;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Define(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["define"] = ruleOutCast4;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Define_Auto(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(1, "Define, Define_Auto", currentChar);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["define"] = ruleOutCast5;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Expression(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "Expression(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["check"] = ruleOutCast7;
						c = 8;
						this.error.vested++;
					}
				}else if (c == 8) {
				if (currentCode == 59) {
					c = 9;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				var ruleOut10 = this.Expression(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "Expression(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						data["iterate"] = ruleOutCast10;
						c = 11;
						this.error.vested++;
					}
				}else if (c == 11) {
				if (currentCode == 41) {
					c = 12;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}else if (c == 12) {
				var ruleOut12 = this._(input, charPos);
				if (ruleOut12.hadError) {
					this.giveError(ruleOut12.error.code, "White space(optional)(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
					}else{
						var ruleOutCast12 = ruleOut12.data["data"];
						charPos = this.offset;
						c = 13;
					}
				}else if (c == 13) {
				var ruleOut13 = this.Block(input, charPos);
				if (ruleOut13.hadError) {
					c = 14;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast13 = ruleOut13.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast13;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0define = data["define"];
							var actionCap0iterate = data["iterate"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "for";
							dataStore["data"]["define"] = actionCap0define;
							dataStore["data"]["iterate"] = actionCap0iterate;
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 14) {
				var ruleOut14 = this.Single_Statement(input, charPos);
				if (ruleOut14.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast14 = ruleOut14.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast14;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0define = data["define"];
							var actionCap0iterate = data["iterate"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "for";
							dataStore["data"]["define"] = actionCap0define;
							dataStore["data"]["iterate"] = actionCap0iterate;
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.For_In = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [102, 111, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 40) {
					c = 3;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Inline_Define(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["define"] = ruleOutCast4;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Multi_Define(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(1, "Inline_Define, Multi_Define", currentChar);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["define"] = ruleOutCast5;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.__(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var lit7 = [105, 110];
				if (currentCode == lit7[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["mode"] = this.assembleCodes(lit7);
						c = 9;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 8;
						charPos--;
						this.offset--;
					}
				}else if (c == 8) {
				var lit8 = [111, 102];
				if (currentCode == lit8[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["mode"] = this.assembleCodes(lit8);
						c = 9;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "in, of", currentChar);
					}
				}else if (c == 9) {
				var ruleOut9 = this.Expression(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "Expression(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["iterate"] = ruleOutCast9;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 10) {
				if (currentCode == 41) {
					c = 11;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}else if (c == 11) {
				var ruleOut11 = this._(input, charPos);
				if (ruleOut11.hadError) {
					this.giveError(ruleOut11.error.code, "White space(optional)(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
					}else{
						var ruleOutCast11 = ruleOut11.data["data"];
						charPos = this.offset;
						c = 12;
					}
				}else if (c == 12) {
				var ruleOut12 = this.Block(input, charPos);
				if (ruleOut12.hadError) {
					c = 13;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast12 = ruleOut12.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast12;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0define = data["define"];
							var actionCap0iterate = data["iterate"];
							var actionCap0body = data["body"];
							var actionCap0mode = data["mode"];
							dataStore["data"]["type"] = "for";
							dataStore["data"]["in"] = true;
							dataStore["data"]["define"] = actionCap0define;
							dataStore["data"]["iterate"] = actionCap0iterate;
							dataStore["data"]["body"] = actionCap0body;
							dataStore["data"]["mode"] = actionCap0mode;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 13) {
				var ruleOut13 = this.Single_Statement(input, charPos);
				if (ruleOut13.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast13 = ruleOut13.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast13;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0define = data["define"];
							var actionCap0iterate = data["iterate"];
							var actionCap0body = data["body"];
							var actionCap0mode = data["mode"];
							dataStore["data"]["type"] = "for";
							dataStore["data"]["in"] = true;
							dataStore["data"]["define"] = actionCap0define;
							dataStore["data"]["iterate"] = actionCap0iterate;
							dataStore["data"]["body"] = actionCap0body;
							dataStore["data"]["mode"] = actionCap0mode;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Break = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [98, 114, 101, 97, 107];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						dataStore["data"]["type"] = "break";
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Continue = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [99, 111, 110, 116, 105, 110, 117, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						dataStore["data"]["type"] = "continue";
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.While = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [119, 104, 105, 108, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Group(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["check"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Block(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast4;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "while";
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Single_Statement(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast5;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0check = data["check"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "while";
							dataStore["data"]["check"] = actionCap0check;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Try = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["catch"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [116, 114, 121];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Block(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast2;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Single_Statement(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Catch(input, charPos);
				if (ruleOut5.hadError) {
					if (true) {
						var castaccatch0 = data["catch"];
						var actionCap0catch = data["catch"];
						var actionCap0body = data["body"];
						dataStore["data"]["type"] = "try";
						dataStore["data"]["catch"] = actionCap0catch;
						dataStore["data"]["body"] = actionCap0body;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					if (ruleOut5.error.vested > 1) {
						this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);
						}
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castcatch5 = data["catch"];
						castcatch5.push(ruleOutCast5);
						if (true) {
							var castaccatch0 = data["catch"];
							var actionCap0catch = data["catch"];
							var actionCap0body = data["body"];
							dataStore["data"]["type"] = "try";
							dataStore["data"]["catch"] = actionCap0catch;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 5;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Catch = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var lit1 = [99, 97, 116, 99, 104];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit1) + "", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 40) {
					c = 4;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Parameter(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Parameter(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["input"] = ruleOutCast5;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				if (currentCode == 41) {
					c = 8;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						c = 9;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Block(input, charPos);
				if (ruleOut9.hadError) {
					c = 10;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast9;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0input = data["input"];
							var actionCap0body = data["body"];
							dataStore["data"]["input"] = actionCap0input;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 10) {
				var ruleOut10 = this.Single_Statement(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(1, "Block, Single_Statement", currentChar);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast10;
						if (true) {
							var castacbody0 = data["body"];
							var actionCap0input = data["input"];
							var actionCap0body = data["body"];
							dataStore["data"]["input"] = actionCap0input;
							dataStore["data"]["body"] = actionCap0body;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Throw = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [116, 104, 114, 111, 119, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 6) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "throw";
						dataStore["data"]["expression"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Return = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [114, 101, 116, 117, 114, 110, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "return";
						dataStore["data"]["expression"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Yield = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [121, 105, 101, 108, 100, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 6) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "yield";
						dataStore["data"]["expression"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Native = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["content"] = "";
		var inString = false;
		var open = 0;
		var escape = false;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [101, 108, 115, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						data["els"] = this.assembleCodes(lit0);
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var lit2 = [110, 97, 116, 105, 118, 101, 32];
				if (currentCode == lit2[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						c = 3;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit2) + "", currentChar);
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Safe_Name(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "Safe_Name(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["platform"] = ruleOutCast4;
						c = 5;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				if (currentCode == 123) {
					c = 7;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 7) {
				var castnaccontent7 = data["content"];
				var doCap = true;
				var setEscape = false;
				var isString = false;
				if (currentChar == "\"") {
					isString = true;
					}
				if (currentChar == "'") {
					isString = true;
					}
				if (currentChar == "`") {
					isString = true;
					}
				if (currentChar == "{") {
					if (inString == false) {
						open++;
						}
					}else if (currentChar == "}") {
					if (inString == false) {
						if (open == 0) {
							c = 8;
							charPos--;
							this.offset--;
							doCap = false;
							}
						open--;
						}
					}else if (isString) {
					if (escape == false) {
						if (inString) {
							inString = false;
							}else{
								inString = true;
							}
						}
					}else if (currentChar == "\\") {
					if (escape == false) {
						setEscape = true;
						}
					}
				if (doCap) {
					data["content"] += currentChar;
					}
				escape = false;
				if (setEscape) {
					escape = true;
					}
				}else if (c == 8) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						var actionCap0platform = data["platform"];
						var actionCap0els = data["els"];
						var actionCap0content = data["content"];
						dataStore["data"]["type"] = "native";
						dataStore["data"]["platform"] = actionCap0platform;
						dataStore["data"]["else"] = actionCap0els;
						dataStore["data"]["content"] = actionCap0content;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Define_Auto = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [118, 97, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [108, 101, 116];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "var, let", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Type(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Type(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Safe_Name(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast5;
						c = 6;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				if (currentCode == 61) {
					c = 8;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						c = 9;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Expression(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "Expression(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast9;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 10) {
				var ruleOut10 = this._(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						c = 11;
					}
				}else if (c == 11) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0name = data["name"];
						var actionCap0type = data["type"];
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "define";
						dataStore["data"]["name"] = actionCap0name;
						dataStore["data"]["valueType"] = actionCap0type;
						dataStore["data"]["value"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Define = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [118, 97, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [108, 101, 116];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "var, let", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 61) {
					c = 6;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Expression(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "Expression(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast7;
						c = 8;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						c = 9;
					}
				}else if (c == 9) {
				if (currentCode == 59) {
					if (true) {
						var castac0 = data;
						var actionCap0name = data["name"];
						var actionCap0exp = data["exp"];
						dataStore["data"]["type"] = "define";
						dataStore["data"]["name"] = actionCap0name;
						dataStore["data"]["valueType"] = "";
						dataStore["data"]["auto"] = true;
						dataStore["data"]["value"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ";", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Inline_Def = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Inline_Define(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["def"] = ruleOutCast0;
						if (true) {
							var castacdef0 = data["def"];
							var actionCap0def = data["def"];
							dataStore["data"] = actionCap0def;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Inline_Define_Auto(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(1, "Inline_Define, Inline_Define_Auto", currentChar);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["def"] = ruleOutCast1;
						if (true) {
							var castacdef0 = data["def"];
							var actionCap0def = data["def"];
							dataStore["data"] = actionCap0def;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Define_List = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				if (currentCode == 44) {
					c = 2;
					this.error.vested++;
					}else{
						c = 2;
						charPos--;
						this.offset--;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Type(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Type(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.__(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Safe_Name(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast5;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0type = data["type"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = actionCap0type;
							dataStore["data"]["name"] = actionCap0name;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Inline_Define = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [118, 97, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [108, 101, 116];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "var, let", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Type(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Type(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["type"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.__(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Safe_Name(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast5;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							var actionCap0type = data["type"];
							dataStore["data"]["type"] = "define";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["valueType"] = actionCap0type;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Multi_Define = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [118, 97, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [108, 101, 116];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "var, let", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 44) {
					c = 6;
					this.error.vested++;
					}else{
						c = 6;
						charPos--;
						this.offset--;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Safe_Name(input, charPos);
				if (ruleOut7.hadError) {
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["name2"] = ruleOutCast7;
						if (true) {
							var castacname20 = data["name2"];
							var actionCap0name = data["name"];
							var actionCap0name2 = data["name2"];
							dataStore["data"]["type"] = "define";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["name2"] = actionCap0name2;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Inline_Define_Auto = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [118, 97, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [108, 101, 116];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "var, let", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = "define";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["valueType"] = "";
							dataStore["data"]["auto"] = true;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.String_Tick = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 96) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "`", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "`") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 96) {
					if (true) {
						var castac0 = data;
						var actionCap0str = data["str"];
						dataStore["data"] = actionCap0str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "`", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype._ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					c = 0;
					this.error.vested++;
					}else{
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.__ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["w"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					data["w"] += currentChar;
					c = 0;
					this.error.vested++;
					}else{
						var castw0 = data["w"];
						if (castw0.length >= 1) {
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, " , 	, \r, \n", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String_Double(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.String_Single(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(1, "String_Double, String_Single", currentChar);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast1;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.String_Double = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 34) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "\"") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 34) {
					if (true) {
						var castac0 = data;
						var actionCap0str = data["str"];
						dataStore["data"] = actionCap0str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.String_Single = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 39) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "'") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 39) {
					if (true) {
						var castac0 = data;
						var actionCap0str = data["str"];
						dataStore["data"] = actionCap0str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Json = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["keys"] = [];
		var captureRoot1 = {};
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.String(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "String(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						captureRoot1["key"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 58) {
					c = 6;
					this.error.vested++;
					}else{
						this.giveError(1, ":", currentChar);
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Json_Value(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "Json_Value(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						captureRoot1["val"] = ruleOutCast7;
						c = 8;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						var castkeys2 = data["keys"];
						castkeys2.push(captureRoot1);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 9;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						captureRoot1 = {};
						c = 2;
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						var actionCap0keys = data["keys"];
						for (var i = 0; i < actionCap0keys.length; i++) {
							var k = actionCap0keys[i];
							var key = k["key"];
							dataStore["data"][key] = k["val"];
							}
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Json_Array = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["vals"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Json_Value(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castvals2 = data["vals"];
						castvals2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						var actionCap0vals = data["vals"];
						dataStore["data"] = actionCap0vals;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Json_EmptyArray = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = [];
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						data = [];
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Json_EmptyMap = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						data = {};
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Json_Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = 0;
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var lit1 = [110, 117, 108, 108];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacexp1 = data["exp"];
							data["exp"] = null;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 2;
						charPos--;
						this.offset--;
					}
				}else if (c == 2) {
				var lit2 = [116, 114, 117, 101];
				if (currentCode == lit2[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacexp2 = data["exp"];
							data["exp"] = true;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 3;
						charPos--;
						this.offset--;
					}
				}else if (c == 3) {
				var lit3 = [102, 97, 108, 115, 101];
				if (currentCode == lit3[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						if (true) {
							var castacexp3 = data["exp"];
							data["exp"] = false;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 4;
						charPos--;
						this.offset--;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Json_EmptyArray(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast4;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Json_EmptyMap(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast5;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Json_Array(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast6;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Json(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast7;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this.String(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast8;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Json_Number(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", currentChar);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast9;
						c = 10;
					}
				}else if (c == 10) {
				var ruleOut10 = this._(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarboniteCarbonParser.prototype.Json_Number = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = 0;
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["nums"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 45) {
					passed0 = true;
					}else if (currentCode == 46) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["nums"] += currentChar;
					if (true) {
						var castacnums0 = data["nums"];
						var actionCap0nums = data["nums"];
						dataStore["data"] = parseInt(actionCap0nums);
						}
					c = 0;
					this.error.vested++;
					}else{
						var castnums0 = data["nums"];
						if (castnums0.length >= 1) {
							if (true) {
								var castacnums0 = data["nums"];
								var actionCap0nums = data["nums"];
								dataStore["data"] = parseInt(actionCap0nums);
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "0-9, -, .", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

Carbonite.SourceCache = function () {
	this.path = "";

	this.timeStamp = 0;

	this.parsed = [];

	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (arguments[2] instanceof Array || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var path = arguments[0];
		var timeStamp = arguments[1];
		var parsed = arguments[2];
		this.path = path;
		this.timeStamp = timeStamp;
		this.parsed = parsed;
	}

}

Carbonite.SourceCache.prototype.serialize = function () {
	if (arguments.length == 0) {
		var out = [];
		for (var i = 0; i < this.parsed.length; i++) {
			out.push(JSON.stringify(this.parsed[i]));
			}
		return "{\"timeStamp\": " + this.timeStamp + ", \"path\": \"" + this.path.replace(new RegExp("\\".replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), "\\\\") + "\", \"parsed\": [" + out.join(", ") + "]}";
	}
}

Carbonite.SourceCache.prototype.update = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var timeStamp = arguments[0];
		var raw = arguments[1];
		this.timeStamp = timeStamp;
		this.parsed = raw;
	}
}

CarbonitePreprocessorLocation = function () {
	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

CarbonitePreprocessorError = function () {
	this.code = 0;

	this.found = 0;

	this.expected = 0;

	this.vested = 0;

	this.path = [];

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

CarbonitePreprocessorError.prototype.clone = function () {
	if (arguments.length == 0) {
		var clone = new CarbonitePreprocessorError(this.offset, this.line, this.column);
		clone.code = this.code;
		clone.found = this.found;
		clone.expected = this.expected;
		clone.vested = this.vested;
		for (var i = 0; i < this.path.length; i++) {
			var current = this.path[i];
			clone.path.push(current.clone());
			}
		return clone;
	}
}

CarbonitePreprocessorOutput = function () {
	this.error = null;

	this.hadError = false;

	this.data = {};

	if (arguments.length == 3 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof CarbonitePreprocessorError) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var hadError = arguments[0];
		var error = arguments[1];
		var data = arguments[2];
		this.hadError = hadError;
		this.error = error;
		this.data = data;
	}

}

CarbonitePreprocessor = function () {
	this.lastErrors = [];

	this.hadError = false;

	this.parsedChars = 0;

	this.currentInput = "";

	this.data = {};

	this.error = new CarbonitePreprocessorError(0, 0, 0);

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 0) {

	}

}

CarbonitePreprocessor.parse = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		var parser = new CarbonitePreprocessor();
		var output = parser.start(input);
		if (parser.hadError && (parser.error.found == String.fromCharCode(1))) {
			parser.error.found = "End of input";
			}
		var rtn = new CarbonitePreprocessorOutput(parser.hadError, parser.error, parser.data["data"]);
		return rtn;
	}
else 	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var rule = arguments[0];
		var input = arguments[1];
		var parser = new CarbonitePreprocessor();
		input += String.fromCharCode(1);
		parser.currentInput = input;
		parser.data["data"] = {};
		var output = null;
		if (rule == "Source") {
			output = parser.Source(input, 0);
			}else{
				if (rule == "Pre") {
					output = parser.Pre(input, 0);
					}else{
						if (rule == "Raw") {
							output = parser.Raw(input, 0);
							}else{
								if (rule == "SourceLine") {
									output = parser.SourceLine(input, 0);
									}else{
										if (rule == "RawLine") {
											output = parser.RawLine(input, 0);
											}else{
												if (rule == "If") {
													output = parser.If(input, 0);
													}else{
														if (rule == "As") {
															output = parser.As(input, 0);
															}else{
																if (rule == "Include") {
																	output = parser.Include(input, 0);
																	}else{
																		if (rule == "Import") {
																			output = parser.Import(input, 0);
																			}else{
																				if (rule == "Output") {
																					output = parser.Output(input, 0);
																					}else{
																						if (rule == "Return") {
																							output = parser.Return(input, 0);
																							}else{
																								if (rule == "On") {
																									output = parser.On(input, 0);
																									}else{
																										if (rule == "DocName") {
																											output = parser.DocName(input, 0);
																											}else{
																												if (rule == "DocNameLine") {
																													output = parser.DocNameLine(input, 0);
																													}else{
																														if (rule == "Doc") {
																															output = parser.Doc(input, 0);
																															}else{
																																if (rule == "Doc_Line") {
																																	output = parser.Doc_Line(input, 0);
																																	}else{
																																		if (rule == "Script") {
																																			output = parser.Script(input, 0);
																																			}else{
																																				if (rule == "Function") {
																																					output = parser.Function(input, 0);
																																					}else{
																																						if (rule == "For") {
																																							output = parser.For(input, 0);
																																							}else{
																																								if (rule == "ForIn") {
																																									output = parser.ForIn(input, 0);
																																									}else{
																																										if (rule == "Define") {
																																											output = parser.Define(input, 0);
																																											}else{
																																												if (rule == "Var") {
																																													output = parser.Var(input, 0);
																																													}else{
																																														if (rule == "Backslash") {
																																															output = parser.Backslash(input, 0);
																																															}else{
																																																if (rule == "Lost") {
																																																	output = parser.Lost(input, 0);
																																																	}else{
																																																		if (rule == "Sub") {
																																																			output = parser.Sub(input, 0);
																																																			}else{
																																																				if (rule == "_Expression") {
																																																					output = parser._Expression(input, 0);
																																																					}else{
																																																						if (rule == "Expression") {
																																																							output = parser.Expression(input, 0);
																																																							}else{
																																																								if (rule == "If_Expression") {
																																																									output = parser.If_Expression(input, 0);
																																																									}else{
																																																										if (rule == "Safe_Name") {
																																																											output = parser.Safe_Name(input, 0);
																																																											}else{
																																																												if (rule == "Argument") {
																																																													output = parser.Argument(input, 0);
																																																													}else{
																																																														if (rule == "Literal_Map") {
																																																															output = parser.Literal_Map(input, 0);
																																																															}else{
																																																																if (rule == "Value") {
																																																																	output = parser.Value(input, 0);
																																																																	}else{
																																																																		if (rule == "Literal_String") {
																																																																			output = parser.Literal_String(input, 0);
																																																																			}else{
																																																																				if (rule == "Number") {
																																																																					output = parser.Number(input, 0);
																																																																					}else{
																																																																						if (rule == "Literal_Array") {
																																																																							output = parser.Literal_Array(input, 0);
																																																																							}else{
																																																																								if (rule == "Bool") {
																																																																									output = parser.Bool(input, 0);
																																																																									}else{
																																																																										if (rule == "Constant") {
																																																																											output = parser.Constant(input, 0);
																																																																											}else{
																																																																												if (rule == "Group") {
																																																																													output = parser.Group(input, 0);
																																																																													}else{
																																																																														if (rule == "Operation") {
																																																																															output = parser.Operation(input, 0);
																																																																															}else{
																																																																																if (rule == "Check") {
																																																																																	output = parser.Check(input, 0);
																																																																																	}else{
																																																																																		if (rule == "Call") {
																																																																																			output = parser.Call(input, 0);
																																																																																			}else{
																																																																																				if (rule == "_") {
																																																																																					output = parser._(input, 0);
																																																																																					}else{
																																																																																						if (rule == "__") {
																																																																																							output = parser.__(input, 0);
																																																																																							}else{
																																																																																								if (rule == "String") {
																																																																																									output = parser.String(input, 0);
																																																																																									}else{
																																																																																										if (rule == "String_Double") {
																																																																																											output = parser.String_Double(input, 0);
																																																																																											}else{
																																																																																												if (rule == "String_Single") {
																																																																																													output = parser.String_Single(input, 0);
																																																																																													}else{
																																																																																														if (rule == "Json") {
																																																																																															output = parser.Json(input, 0);
																																																																																															}else{
																																																																																																if (rule == "Json_Array") {
																																																																																																	output = parser.Json_Array(input, 0);
																																																																																																	}else{
																																																																																																		if (rule == "Json_EmptyArray") {
																																																																																																			output = parser.Json_EmptyArray(input, 0);
																																																																																																			}else{
																																																																																																				if (rule == "Json_EmptyMap") {
																																																																																																					output = parser.Json_EmptyMap(input, 0);
																																																																																																					}else{
																																																																																																						if (rule == "Json_Value") {
																																																																																																							output = parser.Json_Value(input, 0);
																																																																																																							}else{
																																																																																																								if (rule == "Json_Number") {
																																																																																																									output = parser.Json_Number(input, 0);
																																																																																																									}
																																																																																																							}
																																																																																																					}
																																																																																																			}
																																																																																																	}
																																																																																															}
																																																																																													}
																																																																																											}
																																																																																									}
																																																																																							}
																																																																																					}
																																																																																			}
																																																																																	}
																																																																															}
																																																																													}
																																																																											}
																																																																									}
																																																																							}
																																																																					}
																																																																			}
																																																																	}
																																																															}
																																																													}
																																																											}
																																																									}
																																																							}
																																																					}
																																																			}
																																																	}
																																															}
																																													}
																																											}
																																									}
																																							}
																																					}
																																			}
																																	}
																															}
																													}
																											}
																									}
																							}
																					}
																			}
																	}
															}
													}
											}
									}
							}
					}
			}
		if (parser.hadError && (parser.error.found == String.fromCharCode(1))) {
			parser.error.found = "End of input";
			}
		for (var i = 0;i < parser.error.offset;i++) {
			parser.error.column++;
			if (i < parser.currentInput.length) {
				if (parser.currentInput[i] == "\n") {
					parser.error.line++;
					parser.error.column = 0;
					}
				}
			}
		var rtn = new CarbonitePreprocessorOutput(output.hadError, output.error, output.data);
		return rtn;
	}
}

CarbonitePreprocessor.prototype.assembleCodes = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var codes = arguments[0];
		var rtn = "";
		for (var i = 0; i < codes.length; i++) {
			rtn += String.fromCharCode(codes[i]);
			}
		return rtn;
	}
}

CarbonitePreprocessor.prototype.giveError = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var code = arguments[0];
		var expected = arguments[1];
		var found = arguments[2];
		this.hadError = true;
		this.error.code = code;
		this.error.expected = expected;
		this.error.found = found;
		this.error.offset = this.offset;
		this.error.line = 1;
		this.error.column = 0;
	}
}

CarbonitePreprocessor.prototype.start = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		this.currentInput = input;
		input += String.fromCharCode(1);
		this.data["data"] = {};
		var data = this.data["data"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = 0;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (c == 0 - 1) {
				if (currentChar != String.fromCharCode(1)) {
					this.giveError(2, "EOF", currentChar);
					}
				}
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Source(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Source(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["document"] = ruleOutCast0;
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (this.hadError) {
				break;
				}
			}
		for (var i = 0;i < this.error.offset;i++) {
			this.error.column++;
			if (i < this.currentInput.length) {
				if (this.currentInput[i] == "\n") {
					this.error.line++;
					this.error.column = 0;
					}
				}
			}
		if (false && this.hadError == false) {
			if (this.offset < input.length - 1) {
				this.giveError(2, "EOF", input[this.offset + 1]);
				}
			}
	}
}

CarbonitePreprocessor.prototype.Source = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["s"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Raw(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						var casts0 = data["s"];
						casts0.push(ruleOutCast0);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Pre(input, charPos);
				if (ruleOut1.hadError) {
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var casts0 = data["s"];
						casts0.push(ruleOutCast1);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Pre = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.If(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast0;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Define(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast1;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Return(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast2;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Doc(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast3;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Doc_Line(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast4;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Output(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast5;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Function(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast6;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.On(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast7;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this.Script(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast8;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Var(input, charPos);
				if (ruleOut9.hadError) {
					c = 10;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast9;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 10) {
				var ruleOut10 = this.Include(input, charPos);
				if (ruleOut10.hadError) {
					c = 11;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast10;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 11) {
				var ruleOut11 = this.Import(input, charPos);
				if (ruleOut11.hadError) {
					c = 12;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast11 = ruleOut11.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast11;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 12) {
				var ruleOut12 = this.For(input, charPos);
				if (ruleOut12.hadError) {
					c = 13;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast12 = ruleOut12.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast12;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 13) {
				var ruleOut13 = this.ForIn(input, charPos);
				if (ruleOut13.hadError) {
					c = 14;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast13 = ruleOut13.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast13;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 14) {
				var ruleOut14 = this.Lost(input, charPos);
				if (ruleOut14.hadError) {
					c = 15;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast14 = ruleOut14.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast14;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 15) {
				var ruleOut15 = this.Backslash(input, charPos);
				if (ruleOut15.hadError) {
					this.giveError(1, "If, Define, Return, Doc, Doc_Line, Output, Function, On, Script, Var, Include, Import, For, ForIn, Lost, Backslash", currentChar);
					}else{
						var ruleOutCast15 = ruleOut15.data["data"];
						charPos = this.offset;
						data["p"] = ruleOutCast15;
						if (true) {
							var castacp0 = data["p"];
							var actionCap0p = data["p"];
							dataStore["data"] = actionCap0p;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Raw = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["c"] = "";
		var escape = false;
		var inString = "";
		var checkPre = false;
		var lineComment = false;
		var checkComment = false;
		var openComment = false;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var castnacc0 = data["c"];
				if (checkComment && openComment == false) {
					if (currentChar == "*" && inString == "") {
						openComment = true;
						data["c"] += " ";
						if (true) {
							var castacc0 = data["c"];
							var actionCap0c = data["c"];
							dataStore["data"]["type"] = "raw";
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["content"] = actionCap0c;
							}
						}else if (currentChar == "/" && inString == "") {
						openComment = true;
						lineComment = true;
						data["c"] += " ";
						if (true) {
							var castacc0 = data["c"];
							var actionCap0c = data["c"];
							dataStore["data"]["type"] = "raw";
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["content"] = actionCap0c;
							}
						}else{
							data["c"] += "/" + currentChar;
							if (true) {
								var castacc0 = data["c"];
								var actionCap0c = data["c"];
								dataStore["data"]["type"] = "raw";
								dataStore["data"]["offset"] = charPos;
								dataStore["data"]["startOffset"] = startPos;
								dataStore["data"]["content"] = actionCap0c;
								}
							if (inString.length != 0) {
								if (inString == currentChar) {
									inString = "";
									}
								}
						}
					checkComment = false;
					}else if (openComment) {
					if (lineComment) {
						if (currentCode == 10) {
							data["c"] += "\n";
							if (true) {
								var castacc0 = data["c"];
								var actionCap0c = data["c"];
								dataStore["data"]["type"] = "raw";
								dataStore["data"]["offset"] = charPos;
								dataStore["data"]["startOffset"] = startPos;
								dataStore["data"]["content"] = actionCap0c;
								}
							openComment = false;
							lineComment = false;
							}else{
								data["c"] += " ";
								if (true) {
									var castacc0 = data["c"];
									var actionCap0c = data["c"];
									dataStore["data"]["type"] = "raw";
									dataStore["data"]["offset"] = charPos;
									dataStore["data"]["startOffset"] = startPos;
									dataStore["data"]["content"] = actionCap0c;
									}
							}
						}else{
							if (checkComment) {
								if (currentCode == 47) {
									data["c"] += " ";
									if (true) {
										var castacc0 = data["c"];
										var actionCap0c = data["c"];
										dataStore["data"]["type"] = "raw";
										dataStore["data"]["offset"] = charPos;
										dataStore["data"]["startOffset"] = startPos;
										dataStore["data"]["content"] = actionCap0c;
										}
									openComment = false;
									}
								checkComment = false;
								}else{
									if (currentCode == 10) {
										data["c"] += "\n";
										if (true) {
											var castacc0 = data["c"];
											var actionCap0c = data["c"];
											dataStore["data"]["type"] = "raw";
											dataStore["data"]["offset"] = charPos;
											dataStore["data"]["startOffset"] = startPos;
											dataStore["data"]["content"] = actionCap0c;
											}
										}else if (currentChar == "*") {
										checkComment = true;
										data["c"] += " ";
										if (true) {
											var castacc0 = data["c"];
											var actionCap0c = data["c"];
											dataStore["data"]["type"] = "raw";
											dataStore["data"]["offset"] = charPos;
											dataStore["data"]["startOffset"] = startPos;
											dataStore["data"]["content"] = actionCap0c;
											}
										}else{
											data["c"] += " ";
											if (true) {
												var castacc0 = data["c"];
												var actionCap0c = data["c"];
												dataStore["data"]["type"] = "raw";
												dataStore["data"]["offset"] = charPos;
												dataStore["data"]["startOffset"] = startPos;
												dataStore["data"]["content"] = actionCap0c;
												}
										}
								}
						}
					}else{
						if (currentCode == 47) {
							checkComment = true;
							}else if (currentCode == 35) {
							if (inString == "") {
								var castc0 = data["c"];
								if (castc0.length >= 1) {
									if (true) {
										var castacc0 = data["c"];
										var actionCap0c = data["c"];
										dataStore["data"]["type"] = "raw";
										dataStore["data"]["offset"] = charPos;
										dataStore["data"]["startOffset"] = startPos;
										dataStore["data"]["content"] = actionCap0c;
										}
									c = 0 - 1;
									charPos--;
									this.offset--;
									}else{
										this.giveError(1, "Native", currentChar);
									}
								}else{
									data["c"] += currentChar;
									if (true) {
										var castacc0 = data["c"];
										var actionCap0c = data["c"];
										dataStore["data"]["type"] = "raw";
										dataStore["data"]["offset"] = charPos;
										dataStore["data"]["startOffset"] = startPos;
										dataStore["data"]["content"] = actionCap0c;
										}
								}
							}else if (currentCode == 1) {
							var castc0 = data["c"];
							if (castc0.length >= 1) {
								if (true) {
									var castacc0 = data["c"];
									var actionCap0c = data["c"];
									dataStore["data"]["type"] = "raw";
									dataStore["data"]["offset"] = charPos;
									dataStore["data"]["startOffset"] = startPos;
									dataStore["data"]["content"] = actionCap0c;
									}
								c = 0 - 1;
								charPos--;
								this.offset--;
								}else{
									this.giveError(1, "Native", currentChar);
								}
							}else{
								data["c"] += currentChar;
								if (true) {
									var castacc0 = data["c"];
									var actionCap0c = data["c"];
									dataStore["data"]["type"] = "raw";
									dataStore["data"]["offset"] = charPos;
									dataStore["data"]["startOffset"] = startPos;
									dataStore["data"]["content"] = actionCap0c;
									}
								var oe = escape;
								escape = false;
								if (currentCode == 34 && oe == false) {
									if (inString == "") {
										inString = "\"";
										}else{
											if (inString == "\"") {
												inString = "";
												}
										}
									}else if (currentCode == 39 && oe == false) {
									if (inString == "") {
										inString = "'";
										}else{
											if (inString == "'") {
												inString = "";
												}
										}
									}else if (currentCode == 96) {
									if (inString == "") {
										inString = "`";
										}else{
											if (inString == "`") {
												inString = "";
												}
										}
									}else if (currentCode == 92) {
									escape = oe == false;
									}
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.SourceLine = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["s"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.RawLine(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						var casts0 = data["s"];
						casts0.push(ruleOutCast0);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Lost(input, charPos);
				if (ruleOut1.hadError) {
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var casts0 = data["s"];
						casts0.push(ruleOutCast1);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.RawLine = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["c"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 35) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					var castc0 = data["c"];
					if (castc0.length >= 1) {
						if (true) {
							var castacc0 = data["c"];
							var actionCap0c = data["c"];
							dataStore["data"]["type"] = "raw";
							dataStore["data"]["content"] = actionCap0c;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["offset"] = charPos;
							}
						c = 0 - 1;
						charPos--;
						this.offset--;
						}else{
							this.giveError(1, "#, \n", currentChar);
						}
					this.error.vested++;
					}else{
						data["c"] += currentChar;
						if (true) {
							var castacc0 = data["c"];
							var actionCap0c = data["c"];
							dataStore["data"]["type"] = "raw";
							dataStore["data"]["content"] = actionCap0c;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["offset"] = charPos;
							}
						c = 0;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.If = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["checks"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 105, 102];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.If_Expression(input, charPos);
				if (ruleOut1.hadError) {
					var castchecks1 = data["checks"];
					if (castchecks1.length >= 1) {
						c = 2;
						charPos--;
						this.offset--;
						}else{
							this.giveError(1, "If_Expression", currentChar);
						}
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castchecks1 = data["checks"];
						castchecks1.push(ruleOutCast1);
						if (input.charCodeAt(charPos + 1) != 97) {
							c = 2;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Source(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Source(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast2;
						c = 3;
					}
				}else if (c == 3) {
				var lit3 = [35, 101, 110, 100, 32, 105, 102];
				if (currentCode == lit3[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						if (true) {
							var castac0 = data;
							var actionCap0checks = data["checks"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "if";
							dataStore["data"]["checks"] = actionCap0checks;
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit3) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.As = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var lit1 = [97, 115];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 2;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit1) + "", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this.__(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Safe_Name(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast3;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"] = actionCap0name;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Include = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["as"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 105, 110, 99, 108, 117, 100, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["file"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.As(input, charPos);
				if (ruleOut2.hadError) {
					if (true) {
						var castacas0 = data["as"];
						var actionCap0as = data["as"];
						var actionCap0file = data["file"];
						dataStore["data"]["type"] = "include";
						dataStore["data"]["as"] = actionCap0as;
						dataStore["data"]["file"] = actionCap0file;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castas2 = data["as"];
						castas2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							if (true) {
								var castacas0 = data["as"];
								var actionCap0as = data["as"];
								var actionCap0file = data["file"];
								dataStore["data"]["type"] = "include";
								dataStore["data"]["as"] = actionCap0as;
								dataStore["data"]["file"] = actionCap0file;
								}
							c = 0 - 1;
							continue;
							}else{
								charPos++;
							}
						if (true) {
							var castacas0 = data["as"];
							var actionCap0as = data["as"];
							var actionCap0file = data["file"];
							dataStore["data"]["type"] = "include";
							dataStore["data"]["as"] = actionCap0as;
							dataStore["data"]["file"] = actionCap0file;
							}
						c = 2;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Import = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["as"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 105, 109, 112, 111, 114, 116];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.As(input, charPos);
				if (ruleOut2.hadError) {
					if (true) {
						var castacas0 = data["as"];
						var actionCap0as = data["as"];
						var actionCap0name = data["name"];
						dataStore["data"]["type"] = "import";
						dataStore["data"]["as"] = actionCap0as;
						dataStore["data"]["name"] = actionCap0name;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castas2 = data["as"];
						castas2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							if (true) {
								var castacas0 = data["as"];
								var actionCap0as = data["as"];
								var actionCap0name = data["name"];
								dataStore["data"]["type"] = "import";
								dataStore["data"]["as"] = actionCap0as;
								dataStore["data"]["name"] = actionCap0name;
								}
							c = 0 - 1;
							continue;
							}else{
								charPos++;
							}
						if (true) {
							var castacas0 = data["as"];
							var actionCap0as = data["as"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = "import";
							dataStore["data"]["as"] = actionCap0as;
							dataStore["data"]["name"] = actionCap0name;
							}
						c = 2;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Output = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 111, 117, 116, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.SourceLine(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "SourceLine(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast1;
						if (true) {
							var castaccontent0 = data["content"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "output";
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Return = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 114, 101, 116, 117, 114, 110, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"]["type"] = "return";
							dataStore["data"]["expression"] = actionCap0exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.On = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 111, 110, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Source(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Source(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast2;
						c = 3;
					}
				}else if (c == 3) {
				var lit3 = [35, 101, 110, 100, 32, 111, 110];
				if (currentCode == lit3[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						if (true) {
							var castac0 = data;
							var actionCap0exp = data["exp"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "on";
							dataStore["data"]["expression"] = actionCap0exp;
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit3) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.DocName = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [110, 97, 118, 68, 114, 111, 112];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						data["name"] = this.assembleCodes(lit0);
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"] = actionCap0name;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [116, 114, 101, 101];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						data["name"] = this.assembleCodes(lit1);
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"] = actionCap0name;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 2;
						charPos--;
						this.offset--;
					}
				}else if (c == 2) {
				var lit2 = [112, 97, 103, 101];
				if (currentCode == lit2[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						data["name"] = this.assembleCodes(lit2);
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"] = actionCap0name;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "navDrop, tree, page", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.DocNameLine = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [110, 97, 118, 76, 105, 110, 107];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						data["name"] = this.assembleCodes(lit0);
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"] = actionCap0name;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [105, 110, 99, 108, 117, 100, 101];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						data["name"] = this.assembleCodes(lit1);
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"] = actionCap0name;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 2;
						charPos--;
						this.offset--;
					}
				}else if (c == 2) {
				var lit2 = [116, 97, 103];
				if (currentCode == lit2[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						data["name"] = this.assembleCodes(lit2);
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"] = actionCap0name;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "navLink, include, tag", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Doc = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["arguments"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 100, 111, 99, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.DocName(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "DocName(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["opt"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var passed3 = false;
				if (currentCode == 10) {
					passed3 = true;
					}
				if (passed3 == false) {

					}
				if (passed3) {
					c = 4;
					charPos--;
					this.offset--;
					this.error.vested++;
					}else{
						data["arguments"] += currentChar;
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 3;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Source(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "Source(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast4;
						c = 5;
					}
				}else if (c == 5) {
				var lit5 = [35, 101, 110, 100, 32, 100, 111, 99];
				if (currentCode == lit5[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						if (true) {
							var castac0 = data;
							var actionCap0opt = data["opt"];
							var actionCap0arguments = data["arguments"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "doc";
							dataStore["data"]["name"] = actionCap0opt;
							dataStore["data"]["arguments"] = actionCap0arguments;
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit5) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Doc_Line = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["arguments"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 100, 111, 99, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.DocNameLine(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "DocNameLine(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["opt"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var passed3 = false;
				if (currentCode == 10) {
					passed3 = true;
					}
				if (passed3 == false) {

					}
				if (passed3) {
					if (true) {
						var castacarguments0 = data["arguments"];
						var actionCap0opt = data["opt"];
						var actionCap0arguments = data["arguments"];
						dataStore["data"]["type"] = "doc";
						dataStore["data"]["name"] = actionCap0opt;
						dataStore["data"]["arguments"] = actionCap0arguments;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					this.error.vested++;
					}else{
						data["arguments"] += currentChar;
						if (true) {
							var castacarguments0 = data["arguments"];
							var actionCap0opt = data["opt"];
							var actionCap0arguments = data["arguments"];
							dataStore["data"]["type"] = "doc";
							dataStore["data"]["name"] = actionCap0opt;
							dataStore["data"]["arguments"] = actionCap0arguments;
							}
						c = 3;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Script = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["language"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 115, 99, 114, 105, 112, 116];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var passed2 = false;
				if (passed2 == false) {
					if (currentCode >= 97 && currentCode <= 122) {
						passed2 = true;
						}else if (currentCode >= 65 && currentCode <= 90) {
						passed2 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed2 = true;
						}
					}
				if (passed2) {
					data["language"] += currentChar;
					if (charPos == input.length - 1) {
						this.giveError(2, "EOF", currentChar);
						}
					c = 2;
					this.error.vested++;
					}else{
						c = 3;
						charPos--;
						this.offset--;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Source(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "Source(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast3;
						c = 4;
					}
				}else if (c == 4) {
				var lit4 = [35, 101, 110, 100, 32, 115, 99, 114, 105, 112, 116];
				if (currentCode == lit4[literalChar]) {
					literalChar++;
					if (literalChar == 11) {
						if (true) {
							var castac0 = data;
							var actionCap0language = data["language"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "script";
							dataStore["data"]["language"] = actionCap0language;
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit4) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Function = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["args"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 102, 117, 110, 99, 116, 105, 111, 110];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 9) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 40) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Argument(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					if (ruleOut6.error.vested > 1) {
						this.giveError(ruleOut6.error.code, ruleOut6.error.expected, ruleOut6.error.found);
						}
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						var castargs6 = data["args"];
						castargs6.push(ruleOutCast6);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 7;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 6;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this._(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						c = 8;
					}
				}else if (c == 8) {
				if (currentCode == 41) {
					c = 9;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}else if (c == 9) {
				var ruleOut9 = this.Source(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "Source(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast9;
						c = 10;
					}
				}else if (c == 10) {
				var lit10 = [35, 101, 110, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110];
				if (currentCode == lit10[literalChar]) {
					literalChar++;
					if (literalChar == 13) {
						if (true) {
							var castac0 = data;
							var actionCap0name = data["name"];
							var actionCap0args = data["args"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "function";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["arguments"] = actionCap0args;
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit10) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.For = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 102, 111, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 61) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Expression(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["start"] = ruleOutCast6;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this._(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						c = 8;
					}
				}else if (c == 8) {
				var lit8 = [116, 111];
				if (currentCode == lit8[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 9;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				var ruleOut10 = this.Expression(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "Expression(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						data["end"] = ruleOutCast10;
						c = 11;
						this.error.vested++;
					}
				}else if (c == 11) {
				var ruleOut11 = this.Source(input, charPos);
				if (ruleOut11.hadError) {
					this.giveError(ruleOut11.error.code, "Source(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
					}else{
						var ruleOutCast11 = ruleOut11.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast11;
						c = 12;
					}
				}else if (c == 12) {
				var lit12 = [35, 101, 110, 100, 32, 102, 111, 114];
				if (currentCode == lit12[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						if (true) {
							var castac0 = data;
							var actionCap0name = data["name"];
							var actionCap0start = data["start"];
							var actionCap0end = data["end"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "for";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["start"] = actionCap0start;
							dataStore["data"]["end"] = actionCap0end;
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit12) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.ForIn = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 102, 111, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.__(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var lit4 = [105, 110];
				if (currentCode == lit4[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 5;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit4) + "", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this.__(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Expression(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast6;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Source(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "Source(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["content"] = ruleOutCast7;
						c = 8;
					}
				}else if (c == 8) {
				var lit8 = [35, 101, 110, 100, 32, 102, 111, 114];
				if (currentCode == lit8[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						if (true) {
							var castac0 = data;
							var actionCap0name = data["name"];
							var actionCap0exp = data["exp"];
							var actionCap0content = data["content"];
							dataStore["data"]["type"] = "forin";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["in"] = actionCap0exp;
							dataStore["data"]["content"] = actionCap0content;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Define = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 100, 101, 102, 105, 110, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 7) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 61) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Expression(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["value"] = ruleOutCast6;
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0name = data["name"];
							var actionCap0value = data["value"];
							dataStore["data"]["type"] = "define";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["value"] = actionCap0value;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Var = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 118, 97, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 61) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Expression(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["value"] = ruleOutCast6;
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0name = data["name"];
							var actionCap0value = data["value"];
							dataStore["data"]["type"] = "var";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["value"] = actionCap0value;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Backslash = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [35, 32];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						if (true) {
							var castac0 = data;
							dataStore["data"]["type"] = "raw";
							dataStore["data"]["content"] = "# ";
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Lost = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 35) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "#", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._Expression(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "_Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							var doSet = true;
							if (actionCap0exp["type"] == "constant") {
								if (actionCap0exp["value"] == "end") {
									this.giveError(1, "" + "" + "", "");
									doSet = false;
									}
								}
							if (doSet) {
								dataStore["data"]["type"] = "lost";
								dataStore["data"]["value"] = actionCap0exp;
								}
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Sub = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 46) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, ".", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Call(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Value(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(1, "Call, Value", currentChar);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast3;
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype._Expression = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["subs"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Operation(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast0;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Call(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast1;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Value(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Operation, Call, Value", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Sub(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						var castsubs3 = data["subs"];
						castsubs3.push(ruleOutCast3);
						if (true) {
							var castacsubs0 = data["subs"];
							var actionCap0e = data["e"];
							var actionCap0subs = data["subs"];
							dataStore["data"] = actionCap0e;
							dataStore["data"]["subs"] = actionCap0subs;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["offset"] = charPos;
							}
						c = 3;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Literal_Array(input, charPos);
				if (ruleOut4.hadError) {
					if (true) {
						var castacsubs0 = data["subs"];
						var actionCap0e = data["e"];
						var actionCap0subs = data["subs"];
						dataStore["data"] = actionCap0e;
						dataStore["data"]["subs"] = actionCap0subs;
						dataStore["data"]["startOffset"] = startPos;
						dataStore["data"]["offset"] = charPos;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						var castsubs3 = data["subs"];
						castsubs3.push(ruleOutCast4);
						if (true) {
							var castacsubs0 = data["subs"];
							var actionCap0e = data["e"];
							var actionCap0subs = data["subs"];
							dataStore["data"] = actionCap0e;
							dataStore["data"]["subs"] = actionCap0subs;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["offset"] = charPos;
							}
						c = 3;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Expression = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["subs"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Operation(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast1;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Call(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast2;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Value(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(1, "Operation, Call, Value", currentChar);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Sub(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						var castsubs4 = data["subs"];
						castsubs4.push(ruleOutCast4);
						if (true) {
							var castacsubs0 = data["subs"];
							var actionCap0e = data["e"];
							var actionCap0subs = data["subs"];
							dataStore["data"] = actionCap0e;
							dataStore["data"]["subs"] = actionCap0subs;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["offset"] = charPos;
							}
						c = 4;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Literal_Array(input, charPos);
				if (ruleOut5.hadError) {
					if (true) {
						var castacsubs0 = data["subs"];
						var actionCap0e = data["e"];
						var actionCap0subs = data["subs"];
						dataStore["data"] = actionCap0e;
						dataStore["data"]["subs"] = actionCap0subs;
						dataStore["data"]["startOffset"] = startPos;
						dataStore["data"]["offset"] = charPos;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castsubs4 = data["subs"];
						castsubs4.push(ruleOutCast5);
						if (true) {
							var castacsubs0 = data["subs"];
							var actionCap0e = data["e"];
							var actionCap0subs = data["subs"];
							dataStore["data"] = actionCap0e;
							dataStore["data"]["subs"] = actionCap0subs;
							dataStore["data"]["startOffset"] = startPos;
							dataStore["data"]["offset"] = charPos;
							}
						c = 4;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.If_Expression = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["subs"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Operation(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast1;
						c = 5;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Call(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast2;
						c = 5;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Check(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast3;
						c = 5;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Value(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(1, "Operation, Call, Check, Value", currentChar);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["e"] = ruleOutCast4;
						c = 5;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Sub(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castsubs5 = data["subs"];
						castsubs5.push(ruleOutCast5);
						if (true) {
							var castacsubs0 = data["subs"];
							var actionCap0e = data["e"];
							var actionCap0subs = data["subs"];
							dataStore["data"] = actionCap0e;
							dataStore["data"]["subs"] = actionCap0subs;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 5;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Literal_Array(input, charPos);
				if (ruleOut6.hadError) {
					if (true) {
						var castacsubs0 = data["subs"];
						var actionCap0e = data["e"];
						var actionCap0subs = data["subs"];
						dataStore["data"] = actionCap0e;
						dataStore["data"]["subs"] = actionCap0subs;
						dataStore["data"]["startOffset"] = startPos;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						var castsubs5 = data["subs"];
						castsubs5.push(ruleOutCast6);
						if (true) {
							var castacsubs0 = data["subs"];
							var actionCap0e = data["e"];
							var actionCap0subs = data["subs"];
							dataStore["data"] = actionCap0e;
							dataStore["data"]["subs"] = actionCap0subs;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 5;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Safe_Name = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["a"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 95) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 65 && currentCode <= 90) {
						passed0 = true;
						}else if (currentCode >= 97 && currentCode <= 122) {
						passed0 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["a"] += currentChar;
					if (true) {
						var castaca0 = data["a"];
						var actionCap0a = data["a"];
						dataStore["data"] = actionCap0a;
						}
					c = 0;
					this.error.vested++;
					}else{
						var casta0 = data["a"];
						if (casta0.length >= 1) {
							if (true) {
								var castaca0 = data["a"];
								var actionCap0a = data["a"];
								dataStore["data"] = actionCap0a;
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "A-Z, a-z, 0-9, _", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Argument = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["a"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var passed1 = false;
				if (currentCode == 95) {
					passed1 = true;
					}
				if (passed1 == false) {
					if (currentCode >= 65 && currentCode <= 90) {
						passed1 = true;
						}else if (currentCode >= 97 && currentCode <= 122) {
						passed1 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed1 = true;
						}
					}
				if (passed1) {
					data["a"] += currentChar;
					if (true) {
						var castaca0 = data["a"];
						var actionCap0a = data["a"];
						dataStore["data"] = actionCap0a;
						}
					c = 1;
					this.error.vested++;
					}else{
						var casta1 = data["a"];
						if (casta1.length >= 1) {
							if (true) {
								var castaca0 = data["a"];
								var actionCap0a = data["a"];
								dataStore["data"] = actionCap0a;
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "A-Z, a-z, 0-9, _", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Literal_Map = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Json(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Json(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["m"] = ruleOutCast0;
						if (true) {
							var castacm0 = data["m"];
							var actionCap0m = data["m"];
							dataStore["data"]["type"] = "map";
							dataStore["data"]["value"] = actionCap0m;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Literal_String(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast0;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Number(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast1;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Literal_Array(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast2;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Literal_Map(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast3;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Bool(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast4;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Constant(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(1, "Literal_String, Number, Literal_Array, Literal_Map, Bool, Constant", currentChar);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast5;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							dataStore["data"]["offset"] = charPos;
							dataStore["data"]["startOffset"] = startPos;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Literal_String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"]["type"] = "string";
							dataStore["data"]["value"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Number = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["n"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 45) {
					data["neg"] = "-";
					c = 1;
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var passed1 = false;
				if (currentCode == 46) {
					passed1 = true;
					}
				if (passed1 == false) {
					if (currentCode >= 48 && currentCode <= 57) {
						passed1 = true;
						}
					}
				if (passed1) {
					data["n"] += currentChar;
					if (true) {
						var castacn0 = data["n"];
						var actionCap0neg = data["neg"];
						var actionCap0n = data["n"];
						dataStore["data"]["type"] = "number";
						dataStore["data"]["negative"] = actionCap0neg;
						dataStore["data"]["value"] = parseFloat(actionCap0n);
						}
					c = 1;
					this.error.vested++;
					}else{
						var castn1 = data["n"];
						if (castn1.length >= 1) {
							if (true) {
								var castacn0 = data["n"];
								var actionCap0neg = data["neg"];
								var actionCap0n = data["n"];
								dataStore["data"]["type"] = "number";
								dataStore["data"]["negative"] = actionCap0neg;
								dataStore["data"]["value"] = parseFloat(actionCap0n);
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "0-9, .", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Literal_Array = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["items"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castitems2 = data["items"];
						castitems2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						var actionCap0items = data["items"];
						dataStore["data"]["type"] = "array";
						dataStore["data"]["value"] = actionCap0items;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Bool = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [116, 114, 117, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacvalue0 = data["value"];
							data["value"] = true;
							}
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0value = data["value"];
							dataStore["data"]["type"] = "bool";
							dataStore["data"]["value"] = actionCap0value;
							}
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0value = data["value"];
							dataStore["data"]["type"] = "bool";
							dataStore["data"]["value"] = actionCap0value;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [102, 97, 108, 115, 101];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						if (true) {
							var castacvalue1 = data["value"];
							data["value"] = false;
							}
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0value = data["value"];
							dataStore["data"]["type"] = "bool";
							dataStore["data"]["value"] = actionCap0value;
							}
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0value = data["value"];
							dataStore["data"]["type"] = "bool";
							dataStore["data"]["value"] = actionCap0value;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "true, false", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Constant = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Safe_Name(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast0;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = "constant";
							dataStore["data"]["value"] = actionCap0name;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Group = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 40) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				if (currentCode == 41) {
					if (true) {
						var castac0 = data;
						var actionCap0exp = data["exp"];
						dataStore["data"] = actionCap0exp;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Operation = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["o"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Group(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["head"] = ruleOutCast0;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Call(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["head"] = ruleOutCast1;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Value(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Group, Call, Value", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["head"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var passed4 = false;
				if (currentCode == 33) {
					passed4 = true;
					}else if (currentCode == 64) {
					passed4 = true;
					}else if (currentCode == 36) {
					passed4 = true;
					}else if (currentCode == 37) {
					passed4 = true;
					}else if (currentCode == 38) {
					passed4 = true;
					}else if (currentCode == 94) {
					passed4 = true;
					}else if (currentCode == 43) {
					passed4 = true;
					}else if (currentCode == 42) {
					passed4 = true;
					}else if (currentCode == 45) {
					passed4 = true;
					}else if (currentCode == 47) {
					passed4 = true;
					}else if (currentCode == 63) {
					passed4 = true;
					}else if (currentCode == 62) {
					passed4 = true;
					}else if (currentCode == 60) {
					passed4 = true;
					}else if (currentCode == 124) {
					passed4 = true;
					}else if (currentCode == 61) {
					passed4 = true;
					}
				if (passed4 == false) {

					}
				if (passed4) {
					data["o"] += currentChar;
					if (charPos == input.length - 1) {
						this.giveError(2, "EOF", currentChar);
						}
					c = 4;
					this.error.vested++;
					}else{
						var casto4 = data["o"];
						if (casto4.length >= 1) {
							c = 5;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "!, @, $, %, &, ^, +, *, -, /, ?, >, <, |, =", currentChar);
							}
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Group(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["tail"] = ruleOutCast6;
						if (true) {
							var castactail0 = data["tail"];
							var actionCap0head = data["head"];
							var actionCap0o = data["o"];
							var actionCap0tail = data["tail"];
							dataStore["data"]["type"] = "operation";
							dataStore["data"]["head"] = actionCap0head;
							dataStore["data"]["operator"] = actionCap0o;
							dataStore["data"]["tail"] = actionCap0tail;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Call(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["tail"] = ruleOutCast7;
						if (true) {
							var castactail0 = data["tail"];
							var actionCap0head = data["head"];
							var actionCap0o = data["o"];
							var actionCap0tail = data["tail"];
							dataStore["data"]["type"] = "operation";
							dataStore["data"]["head"] = actionCap0head;
							dataStore["data"]["operator"] = actionCap0o;
							dataStore["data"]["tail"] = actionCap0tail;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this.Value(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(1, "Group, Call, Value", currentChar);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						data["tail"] = ruleOutCast8;
						if (true) {
							var castactail0 = data["tail"];
							var actionCap0head = data["head"];
							var actionCap0o = data["o"];
							var actionCap0tail = data["tail"];
							dataStore["data"]["type"] = "operation";
							dataStore["data"]["head"] = actionCap0head;
							dataStore["data"]["operator"] = actionCap0o;
							dataStore["data"]["tail"] = actionCap0tail;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Check = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Value(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Value(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["what"] = ruleOutCast0;
						c = 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.__(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Value(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Value(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["against"] = ruleOutCast2;
						if (true) {
							var castacagainst0 = data["against"];
							var actionCap0what = data["what"];
							var actionCap0against = data["against"];
							dataStore["data"]["type"] = "check";
							dataStore["data"]["what"] = actionCap0what;
							dataStore["data"]["against"] = actionCap0against;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Call = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["params"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Value(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Value(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["term"] = ruleOutCast0;
						c = 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 40) {
					c = 3;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 3) {
				var ruleOut3 = this.Expression(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					if (ruleOut3.error.vested > 1) {
						this.giveError(ruleOut3.error.code, ruleOut3.error.expected, ruleOut3.error.found);
						}
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						var castparams3 = data["params"];
						castparams3.push(ruleOutCast3);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 4;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 3;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 41) {
					if (true) {
						var castac0 = data;
						var actionCap0term = data["term"];
						var actionCap0params = data["params"];
						dataStore["data"]["type"] = "call";
						dataStore["data"]["term"] = actionCap0term;
						dataStore["data"]["args"] = actionCap0params;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype._ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					c = 0;
					this.error.vested++;
					}else{
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.__ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["w"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					data["w"] += currentChar;
					c = 0;
					this.error.vested++;
					}else{
						var castw0 = data["w"];
						if (castw0.length >= 1) {
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, " , 	, \r, \n", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String_Double(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.String_Single(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(1, "String_Double, String_Single", currentChar);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast1;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.String_Double = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 34) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "\"") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 34) {
					if (true) {
						var castac0 = data;
						var actionCap0str = data["str"];
						dataStore["data"] = actionCap0str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.String_Single = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 39) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "'") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 39) {
					if (true) {
						var castac0 = data;
						var actionCap0str = data["str"];
						dataStore["data"] = actionCap0str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Json = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["keys"] = [];
		var captureRoot1 = {};
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.String(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "String(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						captureRoot1["key"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 58) {
					c = 6;
					this.error.vested++;
					}else{
						this.giveError(1, ":", currentChar);
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Json_Value(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "Json_Value(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						captureRoot1["val"] = ruleOutCast7;
						c = 8;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						var castkeys2 = data["keys"];
						castkeys2.push(captureRoot1);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 9;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						captureRoot1 = {};
						c = 2;
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						var actionCap0keys = data["keys"];
						for (var i = 0; i < actionCap0keys.length; i++) {
							var k = actionCap0keys[i];
							var key = k["key"];
							dataStore["data"][key] = k["val"];
							}
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Json_Array = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["vals"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Json_Value(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castvals2 = data["vals"];
						castvals2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						var actionCap0vals = data["vals"];
						dataStore["data"] = actionCap0vals;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Json_EmptyArray = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = [];
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 93) {
					if (true) {
						var castac0 = data;
						data = [];
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Json_EmptyMap = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 125) {
					if (true) {
						var castac0 = data;
						data = {};
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Json_Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = 0;
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var lit1 = [110, 117, 108, 108];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacexp1 = data["exp"];
							data["exp"] = null;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 2;
						charPos--;
						this.offset--;
					}
				}else if (c == 2) {
				var lit2 = [116, 114, 117, 101];
				if (currentCode == lit2[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacexp2 = data["exp"];
							data["exp"] = true;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 3;
						charPos--;
						this.offset--;
					}
				}else if (c == 3) {
				var lit3 = [102, 97, 108, 115, 101];
				if (currentCode == lit3[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						if (true) {
							var castacexp3 = data["exp"];
							data["exp"] = false;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 4;
						charPos--;
						this.offset--;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Json_EmptyArray(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast4;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Json_EmptyMap(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast5;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Json_Array(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast6;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Json(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast7;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this.String(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast8;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Json_Number(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", currentChar);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast9;
						c = 10;
					}
				}else if (c == 10) {
				var ruleOut10 = this._(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						if (true) {
							var castac0 = data;
							var actionCap0exp = data["exp"];
							dataStore["data"] = actionCap0exp;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbonitePreprocessor.prototype.Json_Number = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = 0;
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["nums"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 45) {
					passed0 = true;
					}else if (currentCode == 46) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["nums"] += currentChar;
					if (true) {
						var castacnums0 = data["nums"];
						var actionCap0nums = data["nums"];
						dataStore["data"] = parseInt(actionCap0nums);
						}
					c = 0;
					this.error.vested++;
					}else{
						var castnums0 = data["nums"];
						if (castnums0.length >= 1) {
							if (true) {
								var castacnums0 = data["nums"];
								var actionCap0nums = data["nums"];
								dataStore["data"] = parseInt(actionCap0nums);
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "0-9, -, .", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParserLocation = function () {
	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

PipelineParserError = function () {
	this.code = 0;

	this.found = 0;

	this.expected = 0;

	this.vested = 0;

	this.path = [];

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

PipelineParserError.prototype.clone = function () {
	if (arguments.length == 0) {
		var clone = new PipelineParserError(this.offset, this.line, this.column);
		clone.code = this.code;
		clone.found = this.found;
		clone.expected = this.expected;
		clone.vested = this.vested;
		for (var i = 0; i < this.path.length; i++) {
			var current = this.path[i];
			clone.path.push(current.clone());
			}
		return clone;
	}
}

PipelineParserOutput = function () {
	this.error = null;

	this.hadError = false;

	this.data = {};

	if (arguments.length == 3 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof PipelineParserError) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var hadError = arguments[0];
		var error = arguments[1];
		var data = arguments[2];
		this.hadError = hadError;
		this.error = error;
		this.data = data;
	}

}

PipelineParser = function () {
	this.lastErrors = [];

	this.hadError = false;

	this.parsedChars = 0;

	this.currentInput = "";

	this.data = {};

	this.error = new PipelineParserError(0, 0, 0);

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 0) {

	}

}

PipelineParser.parse = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		var parser = new PipelineParser();
		var output = parser.start(input);
		if (parser.hadError && (parser.error.found == String.fromCharCode(1))) {
			parser.error.found = "End of input";
			}
		var rtn = new PipelineParserOutput(parser.hadError, parser.error, parser.data["data"]);
		return rtn;
	}
else 	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var rule = arguments[0];
		var input = arguments[1];
		var parser = new PipelineParser();
		input += String.fromCharCode(1);
		parser.currentInput = input;
		parser.data["data"] = {};
		var output = null;
		if (rule == "Call") {
			output = parser.Call(input, 0);
			}else{
				if (rule == "Rule") {
					output = parser.Rule(input, 0);
					}else{
						if (rule == "Safe_Name") {
							output = parser.Safe_Name(input, 0);
							}else{
								if (rule == "Value") {
									output = parser.Value(input, 0);
									}else{
										if (rule == "Literal_Boolean") {
											output = parser.Literal_Boolean(input, 0);
											}else{
												if (rule == "Literal_String") {
													output = parser.Literal_String(input, 0);
													}else{
														if (rule == "Literal_Number") {
															output = parser.Literal_Number(input, 0);
															}else{
																if (rule == "Literal") {
																	output = parser.Literal(input, 0);
																	}else{
																		if (rule == "Reference") {
																			output = parser.Reference(input, 0);
																			}else{
																				if (rule == "_") {
																					output = parser._(input, 0);
																					}else{
																						if (rule == "__") {
																							output = parser.__(input, 0);
																							}else{
																								if (rule == "String") {
																									output = parser.String(input, 0);
																									}else{
																										if (rule == "String_Double") {
																											output = parser.String_Double(input, 0);
																											}else{
																												if (rule == "String_Single") {
																													output = parser.String_Single(input, 0);
																													}
																											}
																									}
																							}
																					}
																			}
																	}
															}
													}
											}
									}
							}
					}
			}
		if (parser.hadError && (parser.error.found == String.fromCharCode(1))) {
			parser.error.found = "End of input";
			}
		for (var i = 0;i < parser.error.offset;i++) {
			parser.error.column++;
			if (parser.currentInput[i] == "\n") {
				parser.error.line++;
				parser.error.column = 0;
				}
			}
		var rtn = new PipelineParserOutput(output.hadError, output.error, output.data);
		return rtn;
	}
}

PipelineParser.prototype.assembleCodes = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var codes = arguments[0];
		var rtn = "";
		for (var i = 0; i < codes.length; i++) {
			rtn += String.fromCharCode(codes[i]);
			}
		return rtn;
	}
}

PipelineParser.prototype.giveError = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var code = arguments[0];
		var expected = arguments[1];
		var found = arguments[2];
		this.hadError = true;
		this.error.code = code;
		this.error.expected = expected;
		this.error.found = found;
		this.error.offset = this.offset;
		this.error.line = 1;
		this.error.column = 0;
	}
}

PipelineParser.prototype.start = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		this.currentInput = input;
		input += String.fromCharCode(1);
		this.data["data"] = {};
		var data = this.data["data"];
		var c = 0;
		data["rules"] = [];
		var literalChar = 0;
		for (var charPos = 0;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (c == 0 - 1) {
				if (currentChar != String.fromCharCode(1)) {
					this.giveError(2, "EOF", currentChar);
					}
				}
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Rule(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						var castrules0 = data["rules"];
						castrules0.push(ruleOutCast0);
						c = 0;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Call(input, charPos);
				if (ruleOut1.hadError) {
					c = 0 - 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castrules0 = data["rules"];
						castrules0.push(ruleOutCast1);
						c = 0;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (this.hadError) {
				break;
				}
			}
		for (var i = 0;i < this.error.offset;i++) {
			this.error.column++;
			if (this.currentInput[i] == "\n") {
				this.error.line++;
				this.error.column = 0;
				}
			}
		if (false && this.hadError == false) {
			if (this.offset < input.length - 1) {
				this.giveError(2, "EOF", input[this.offset + 1]);
				}
			}
	}
}

PipelineParser.prototype.Call = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["values"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast1;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 40) {
					c = 4;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Value(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					if (ruleOut5.error.vested > 1) {
						this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);
						}
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						var castvalues5 = data["values"];
						castvalues5.push(ruleOutCast5);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 6;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 5;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				if (currentCode == 41) {
					if (true) {
						var castac0 = data;
						var actionCap0name = data["name"];
						var actionCap0values = data["values"];
						dataStore["data"]["type"] = "call";
						dataStore["data"]["name"] = actionCap0name;
						dataStore["data"]["arguments"] = actionCap0values;
						dataStore["data"]["start"] = startPos;
						dataStore["data"]["end"] = charPos;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Rule = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast1;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 61) {
					c = 4;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Value(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Value(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["value"] = ruleOutCast5;
						if (true) {
							var castacvalue0 = data["value"];
							var actionCap0name = data["name"];
							var actionCap0value = data["value"];
							dataStore["data"]["type"] = "rule";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["value"] = actionCap0value;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Safe_Name = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["name"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 95) {
					passed0 = true;
					}else if (currentCode == 46) {
					passed0 = true;
					}else if (currentCode == 64) {
					passed0 = true;
					}else if (currentCode == 36) {
					passed0 = true;
					}else if (currentCode == 33) {
					passed0 = true;
					}else if (currentCode == 37) {
					passed0 = true;
					}else if (currentCode == 94) {
					passed0 = true;
					}else if (currentCode == 38) {
					passed0 = true;
					}else if (currentCode == 42) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 65 && currentCode <= 90) {
						passed0 = true;
						}else if (currentCode >= 97 && currentCode <= 122) {
						passed0 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["name"] += currentChar;
					if (true) {
						var castacname0 = data["name"];
						var actionCap0name = data["name"];
						dataStore["data"] = actionCap0name;
						}
					c = 0;
					this.error.vested++;
					}else{
						var castname0 = data["name"];
						if (castname0.length >= 1) {
							if (true) {
								var castacname0 = data["name"];
								var actionCap0name = data["name"];
								dataStore["data"] = actionCap0name;
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "A-Z, a-z, 0-9, _, ., @, $, !, %, ^, &, *", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Literal(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["val"] = ruleOutCast1;
						if (true) {
							var castacval0 = data["val"];
							var actionCap0val = data["val"];
							dataStore["data"] = actionCap0val;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Reference(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Literal, Reference", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["val"] = ruleOutCast2;
						if (true) {
							var castacval0 = data["val"];
							var actionCap0val = data["val"];
							dataStore["data"] = actionCap0val;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Literal_Boolean = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [116, 114, 117, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacbool0 = data["bool"];
							data["bool"] = true;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [102, 97, 108, 115, 101];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						if (true) {
							var castacbool1 = data["bool"];
							data["bool"] = false;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "true, false", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Literal_String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "string";
							dataStore["data"]["value"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Literal_Number = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["num"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 46) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["num"] += currentChar;
					if (true) {
						var castacnum0 = data["num"];
						var actionCap0num = data["num"];
						dataStore["data"]["type"] = "literal";
						dataStore["data"]["literalType"] = "number";
						var num = parseFloat(actionCap0num);
						dataStore["data"]["value"] = num;
						if (num % 1 === 0) {
							dataStore["data"]["integer"] = true;
							}else{
								dataStore["data"]["integer"] = false;
							}
						}
					c = 0;
					this.error.vested++;
					}else{
						var castnum0 = data["num"];
						if (castnum0.length >= 1) {
							if (true) {
								var castacnum0 = data["num"];
								var actionCap0num = data["num"];
								dataStore["data"]["type"] = "literal";
								dataStore["data"]["literalType"] = "number";
								var num = parseFloat(actionCap0num);
								dataStore["data"]["value"] = num;
								if (num % 1 === 0) {
									dataStore["data"]["integer"] = true;
									}else{
										dataStore["data"]["integer"] = false;
									}
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "0-9, .", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Literal = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Literal_Number(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast0;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Literal_Boolean(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast1;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Literal_String(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Literal_Number, Literal_Boolean, Literal_String", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast2;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.Reference = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 36) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "$", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = "reference";
							dataStore["data"]["name"] = actionCap0name;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype._ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					c = 0;
					this.error.vested++;
					}else{
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.__ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["w"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					var castw0 = data["w"];
					castw0.push(currentChar);
					c = 0;
					this.error.vested++;
					}else{
						var castw0 = data["w"];
						if (castw0.length >= 1) {
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, " , 	, \r, \r\n", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String_Double(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.String_Single(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(1, "String_Double, String_Single", currentChar);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast1;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.String_Double = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 34) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "\"") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 34) {
					if (true) {
						var castac0 = data;
						var actionCap0str = data["str"];
						dataStore["data"] = actionCap0str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

PipelineParser.prototype.String_Single = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 39) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "'") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 39) {
					if (true) {
						var castac0 = data;
						var actionCap0str = data["str"];
						dataStore["data"] = actionCap0str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

VirtualEventSystem = function () {
	this.events = [];

	this.processor = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var proc = arguments[0];
		this.processor = proc;
	}

}

VirtualEventSystem.prototype.get = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.events.length; i++) {
			if (this.events[i].name == name) {
				return this.events[i];
				}
			}
		return null;
	}
}

VirtualEventSystem.prototype.emit = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var event = this.get(name);
		if (event != null) {
			return event.emit(this.processor, args);
			}
		return false;
	}
}

VirtualEventSystem.prototype.on = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Values.Function) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var func = arguments[1];
		var event = this.get(name);
		if (event == null) {
			var newEvent = new VirtualEvent(name);
			newEvent.listeners.push(func);
			this.events.push(newEvent);
			}else{
				event.listeners.push(func);
			}
	}
}

VirtualEvent = function () {
	this.name = "";

	this.listeners = [];

	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		this.name = name;
	}

}

VirtualEvent.prototype.emit = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var proc = arguments[0];
		var args = arguments[1];
		for (var i = 0; i < this.listeners.length; i++) {
			this.listeners[i].call(args, proc.scope, null);
			}
		return false;
	}
}

VirtualArguments = function () {
	this.type = "array";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualArguments.create = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualArguments(m);
		value.value = val;
		return value;
	}
}

VirtualArguments.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = VirtualArgument.create(this.value[i]);
			code.run(scope);
			}
	}
}

VirtualArguments.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualArguments.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = VirtualArgument.create(this.value[ind.value]);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = ind.value;
			var found = this.value.push(cast);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualArguments.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualArguments.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualArguments.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualArguments.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualArguments.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualArguments.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualArguments.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualArguments.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualArguments.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualArgument = function () {
	this.type = "Carbon.Argument";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualArgument.create = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Argument) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualArgument(m);
		value.value = val;
		return value;
	}
}

VirtualArgument.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "type") {
			return VirtualType.create(this.value.type);
			}else if (name == "name") {
			return Carbide.Virtual.Values.String.create(this.value.name);
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualArgument.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualArgument.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		if (prop == "type") {
			var cast = value;
			this.value.type = cast.value;
			}else if (prop == "name") {
			var cast = value;
			this.value.name = cast.value;
			}
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

VirtualArgument.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualArgument.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualArgument.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualArgument.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualArgument.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualArgument.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualArgument.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualArgument.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualArgument.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

VirtualClass = function () {
	this.type = "Carbon.Class";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualClass.create = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualClass(m);
		value.value = val;
		return value;
	}
}

VirtualClass.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "name") {
			return Carbide.Virtual.Values.String.create(this.value.name);
			}else if (name == "route") {
			return Carbide.Virtual.Values.String.create(this.value.route);
			}else if (name == "reroute") {
			return Carbide.Virtual.Values.String.create(this.value.reroute);
			}else if (name == "primitiveValue") {
			return Carbide.Virtual.Values.Bool.create(this.value.primitiveValue);
			}else if (name == "base") {
			return Carbide.Virtual.Values.String.create(this.value.base);
			}else if (name == "attributes") {
			return Carbide.Virtual.Values.ProxyArray.create(this.value.attributes);
			}else if (name == "members") {
			return VirtualMembers.create(this.value.members);
			}else if (name == "descendants") {
			return VirtualClasses.create(this.value.descendants);
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualClass.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "getAttribute") {
			if (input.length == 1) {
				var find = input[0].value;
				return Carbide.Virtual.Value.primitiveToValue(this.value.getAttribute(this.value.attributes, find));
				}
			}else if (name == "hasMember") {
			if (input.length == 1) {
				var find = input[0].value;
				return Carbide.Virtual.Values.Bool.create(this.value.hasMember(find));
				}
			}else if (name == "getMember") {
			if (input.length == 1) {
				var find = input[0].value;
				return VirtualMember.create(this.value.getMember(find));
				}
			}else if (name == "descendantOf") {
			if (input.length == 1) {
				var desc = input[0];
				return Carbide.Virtual.Values.Bool.create(this.value.descendantOf(desc.value));
				}
			}else if (name == "getRoute") {
			return Carbide.Virtual.Values.String.create(this.value.getRoute());
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualClass.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		if (prop == "name") {
			var cast = value;
			this.value.name = cast.value;
			}else if (prop == "reroute") {
			var cast = value;
			this.value.reroute = cast.value;
			}
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

VirtualClass.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualClass.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualClass.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualClass.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualClass.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualClass.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualClass.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualClass.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualClass.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

VirtualClasses = function () {
	this.type = "array";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualClasses.create = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualClasses(m);
		value.value = val;
		return value;
	}
}

VirtualClasses.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = VirtualClass.create(this.value[i]);
			code.run(scope);
			}
	}
}

VirtualClasses.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualClasses.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = VirtualClass.create(this.value[ind.value]);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = ind.value;
			var found = this.value.push(cast);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualClasses.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualClasses.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualClasses.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualClasses.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualClasses.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualClasses.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualClasses.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualClasses.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualClasses.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualMembers = function () {
	this.type = "array";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualMembers.create = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualMembers(m);
		value.value = val;
		return value;
	}
}

VirtualMembers.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = VirtualMember.create(this.value[i]);
			code.run(scope);
			}
	}
}

VirtualMembers.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualMembers.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = VirtualMember.create(this.value[ind.value]);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = ind.value;
			var found = this.value.push(cast);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualMembers.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualMembers.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualMembers.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualMembers.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualMembers.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualMembers.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualMembers.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualMembers.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualMembers.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualMember = function () {
	this.type = "Carbon.Member";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualMember.create = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Member || (arguments[0] instanceof Carbonite.Members.Method || (arguments[0] instanceof Carbonite.Members.Operator)) || (arguments[0] instanceof Carbonite.Members.Property)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualMember(m);
		value.value = val;
		return value;
	}
}

VirtualMember.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "name") {
			return Carbide.Virtual.Values.String.create(this.value.name);
			}else if (name == "type") {
			return Carbide.Virtual.Values.String.create(this.value.type);
			}else if (name == "attributes") {
			return Carbide.Virtual.Values.ProxyArray.create(this.value.attributes);
			}else if (name == "arguments") {
			var cast = this.value;
			return VirtualArguments.create(cast.arguments);
			}else if (name == "output") {
			return VirtualType.create(this.value.output);
			}else if (name == "body") {
			if (this.value.type == "method") {
				var cast = this.value;
				return cast.body.toCarbideValue();
				}
			}else if (name == "value") {
			if (this.value.type == "property") {
				var cast = this.value;
				}
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualMember.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "getAttribute") {
			if (input.length == 1) {
				var find = input[0].value;
				return Carbide.Virtual.Value.primitiveToValue(this.value.parent.getAttribute(this.value.attributes, find));
				}
			}else if (name == "hasFlag") {
			if (input.length == 1) {
				var find = input[0].value;
				return Carbide.Virtual.Values.Bool.create(this.value.hasFlag(find));
				}
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualMember.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		if (prop == "name") {
			var cast = value;
			this.value.name = cast.value;
			}
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

VirtualMember.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualMember.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualMember.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualMember.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualMember.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualMember.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualMember.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualMember.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualMember.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

VirtualTypes = function () {
	this.type = "array";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualTypes.create = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualTypes(m);
		value.value = val;
		return value;
	}
}

VirtualTypes.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = VirtualType.create(this.value[i]);
			code.run(scope);
			}
	}
}

VirtualTypes.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualTypes.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = VirtualType.create(this.value[ind.value]);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = ind.value;
			var found = this.value.push(cast);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualTypes.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualTypes.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualTypes.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualTypes.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualTypes.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualTypes.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualTypes.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualTypes.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualTypes.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualType = function () {
	this.type = "Carbon.Type";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

VirtualType.create = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new VirtualType(m);
		value.value = val;
		return value;
	}
}

VirtualType.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "reference") {
			return VirtualClass.create(this.value.reference);
			}else if (name == "templates") {
			return VirtualTypes.create(this.value.templates);
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualType.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		return Carbide.Virtual.Values.Null.create();
	}
}

VirtualType.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		if (prop == "reference") {
			var cast = value;
			this.value.reference = cast.value;
			}
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

VirtualType.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

VirtualType.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualType.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

VirtualType.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualType.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

VirtualType.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

VirtualType.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

VirtualType.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

VirtualType.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

Carbonite.Docs = function () {
	this.items = [];

	if (arguments.length == 0) {

	}

}

Carbonite.Docs.prototype.addItem = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var type = arguments[0];
		var name = arguments[1];
		var data = arguments[2];
		var docItem = new Carbonite.DocItem(type, name, data);
		this.items.push(docItem);
		return docItem;
	}
}

Carbonite.DocItem = function () {
	this.type = "";

	this.name = "";

	this.data = "";

	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var type = arguments[0];
		var name = arguments[1];
		var data = arguments[2];
		this.name = name;
		this.data = data;
		this.type = type;
	}

}

Carbonite.DocItem.prototype.serialize = function () {
	if (arguments.length == 0) {
		return "{\"type\": \"" + this.type + "\", \"name\": \"" + this.name.replace(/(["\n\r])/g,function (char) {if (char == '"') return '\\"'; else return "\\n";}) + "\", \"data\": \"" + this.data.replace(/(["\n\r])/g,function (char) {if (char == '"') return '\\"'; else return "\\n";}) + "\"}";
	}
}

Oxygen = function () {


}

Carbonite.Pre.Map = function () {
	this.virtual = 0 - 1;

	this.realStart = 0 - 1;

	this.realEnd = 0 - 1;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var virtual = arguments[0];
		var realStart = arguments[1];
		var realEnd = arguments[2];
		this.virtual = virtual;
		this.realStart = realStart;
		this.realEnd = realEnd;
	}

}

Carbonite.Pre.Block = function () {
	this.data = [];

	this.statements = [];

	this.parent = null;

	this.scope = null;

	this.rawOutput = "";

	this.canOutput = false;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.data = data;
	}

}

Carbonite.Pre.Block.prototype.build = function () {
	if (arguments.length == 0) {
		var data = this.data;
		for (var i = 0; i < data.length; i++) {
			var statementData = data[i];
			var state = Carbonite.Pre.Statement.make(this, statementData);
			state.scope = new Carbonite.Pre.Scope(this.parent);
			state.scope.setParentScope(this.scope);
			state.build();
			this.statements.push(state);
			}
	}
}

Carbonite.Pre.Block.prototype.run = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.statements.length; i++) {
			var state = this.statements[i];
			state.scope.setParentScope(this.scope);
			state.run();
			}
	}
}

Carbonite.Pre.Block.prototype.clear = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.statements.length; i++) {
			var state = this.statements[i];
			state.clear();
			}
	}
}

Carbonite.Pre.Block.prototype.output = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var data = arguments[0];
		var start = arguments[1];
		var end = arguments[2];
		if (this.canOutput) {
			this.parent.map.push(new Carbonite.Pre.Map(this.parent.source.built.length, start, end));
			this.parent.source.built += data;
			}else{
				this.rawOutput += data;
			}
	}
}

Carbonite.Pre.Statement = function () {
	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statement.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statement.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statement.prototype.run = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statement.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Define = function () {
	this.name = "";

	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Define.prototype.build = function () {
	if (arguments.length == 0) {
		this.name = this.data["name"];
		this.value = Carbonite.Pre.Expression.make(this, this.data["value"]);
		this.value.build();
	}
}

Carbonite.Pre.Statements.Define.prototype.run = function () {
	if (arguments.length == 0) {
		var variable = new Carbonite.Pre.Variable(this.name, this.value.run());
		this.topParent.scope.addVariable(variable);
	}
}

Carbonite.Pre.Statements.Define.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Define.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Function = function () {
	this.arguments = [];

	this.name = "";

	this.code = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Function.prototype.build = function () {
	if (arguments.length == 0) {
		this.name = this.data["name"];
		var content = this.data["content"];
		this.code = new Carbonite.Pre.Block(this.topParent.parent, content);
		this.code.scope = this.scope;
		var args = this.data["arguments"];
		for (var i = 0; i < args.length; i++) {
			var arg = args[i];
			this.arguments.push(arg);
			}
		this.topParent.parent.addFunction(this);
		this.code.build();
	}
}

Carbonite.Pre.Statements.Function.prototype.call = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var args = arguments[0];
		if (args.length != this.arguments.length) {
			this.topParent.parent.runtimeError(this.data["startOffset"], this.data["offset"], "Call to function '" + this.name + "' invalid argument count " + args.length);
			}
		this.clear();
		for (var i = 0; i < this.arguments.length; i++) {
			var value = args[i];
			var name = this.arguments[i];
			this.code.scope.addVariable(new Carbonite.Pre.Variable(name, value.run()));
			}
		this.code.run();
		var rtn = this.code.scope.search("functionReturn");
		if (rtn == null) {
			var retu = Carbonite.Pre.Values.Null.create();
			return retu;
			}else{
				return rtn.value;
			}
	}
}

Carbonite.Pre.Statements.Function.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbonite.Pre.Statements.Function.prototype.run = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Function.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.If = function () {
	this.checks = [];

	this.code = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.If.prototype.build = function () {
	if (arguments.length == 0) {
		var content = this.data["content"];
		this.code = new Carbonite.Pre.Block(this.topParent.parent, content);
		this.code.canOutput = this.parent.canOutput;
		this.code.scope = this.scope;
		this.code.build();
		var checks = this.data["checks"];
		for (var i = 0; i < checks.length; i++) {
			var check = checks[i];
			var checkExpression = Carbonite.Pre.Expression.make(this, check);
			this.checks.push(checkExpression);
			checkExpression.build();
			}
	}
}

Carbonite.Pre.Statements.If.prototype.run = function () {
	if (arguments.length == 0) {
		var ok = true;
		for (var i = 0; i < this.checks.length; i++) {
			var check = this.checks[i];
			var v = check.run();
			if (v == null || v.value == false) {
				ok = false;
				}
			}
		if (ok) {
			this.code.run();
			}
	}
}

Carbonite.Pre.Statements.If.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbonite.Pre.Statements.If.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.For = function () {
	this.itName = "";

	this.initial = null;

	this.to = null;

	this.code = null;

	this.in = false;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.For.prototype.build = function () {
	if (arguments.length == 0) {
		var type = this.data["type"];
		if (type == "forin") {
			this.in = true;
			this.to = Carbonite.Pre.Expression.make(this, this.data["in"]);
			}
		this.itName = this.data["name"];
		if (this.in == false) {
			this.initial = Carbonite.Pre.Expression.make(this, this.data["start"]);
			this.initial.build();
			this.to = Carbonite.Pre.Expression.make(this, this.data["end"]);
			}
		this.to.build();
		var content = this.data["content"];
		this.code = new Carbonite.Pre.Block(this.topParent.parent, content);
		this.code.canOutput = this.parent.canOutput;
		this.code.scope = this.scope;
		this.code.build();
	}
}

Carbonite.Pre.Statements.For.prototype.run = function () {
	if (arguments.length == 0) {
		var to = this.to.run();
		if (this.in) {
			var it = new Carbonite.Pre.Variable(this.itName, Carbonite.Pre.Values.Null.create());
			var itKey = new Carbonite.Pre.Variable(this.itName, Carbonite.Pre.Values.Null.create());
			this.code.scope.addVariable(it);
			to.iterate(itKey, it, this.code);
			}else{
				var it = new Carbonite.Pre.Variable(this.itName, this.initial.run());
				this.code.scope.addVariable(it);
				var value = it.value;
				for (var i = it.value.value;i < to.value;i++) {
					value.value = i;
					this.code.run();
					}
			}
	}
}

Carbonite.Pre.Statements.For.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbonite.Pre.Statements.For.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Raw = function () {
	this.code = "";

	this.doOuput = false;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Raw.prototype.build = function () {
	if (arguments.length == 0) {
		this.code = this.data["content"];
		if (this.code == "\n") {
			this.doOuput = true;
			}
	}
}

Carbonite.Pre.Statements.Raw.prototype.run = function () {
	if (arguments.length == 0) {
		if (this.doOuput == false) {
			var end = this.data["offset"];
			this.parent.output(this.code, end - this.code.length, end);
			}
	}
}

Carbonite.Pre.Statements.Raw.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Raw.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Lost = function () {
	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Lost.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = Carbonite.Pre.Expression.make(this, this.data["value"]);
		this.value.build();
	}
}

Carbonite.Pre.Statements.Lost.prototype.run = function () {
	if (arguments.length == 0) {
		var val = this.value.run();
		var output = false;
		if (val != null) {
			if (val.type == "string") {
				output = true;
				}else if (val.type == "number") {
				output = true;
				}else if (val.type == "bool") {
				output = true;
				}
			}
		if (output) {
			var end = this.data["offset"];
			this.parent.output(val.value, end, end);
			}
	}
}

Carbonite.Pre.Statements.Lost.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Lost.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Var = function () {
	this.name = "";

	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Var.prototype.build = function () {
	if (arguments.length == 0) {
		this.name = this.data["name"];
		this.value = Carbonite.Pre.Expression.make(this, this.data["value"]);
		this.value.build();
	}
}

Carbonite.Pre.Statements.Var.prototype.run = function () {
	if (arguments.length == 0) {
		var variable = new Carbonite.Pre.Variable(this.name, this.value.run());
		this.parent.scope.addVariable(variable);
	}
}

Carbonite.Pre.Statements.Var.prototype.clear = function () {
	if (arguments.length == 0) {
		this.build();
	}
}

Carbonite.Pre.Statements.Var.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Return = function () {
	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Return.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = Carbonite.Pre.Expression.make(this, this.data["expression"]);
		this.value.build();
	}
}

Carbonite.Pre.Statements.Return.prototype.run = function () {
	if (arguments.length == 0) {
		var name = "functionReturn";
		var variable = new Carbonite.Pre.Variable(name, this.value.run());
		this.parent.scope.addVariable(variable);
	}
}

Carbonite.Pre.Statements.Return.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Return.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Include = function () {
	this.file = "";

	this.as = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Include.include = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Statements.Include) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var location = arguments[0];
		var inc = arguments[1];
		var owner = inc.parent.parent.source;
		location = Oxygen.FileSystem.normalize(location);
		var stat = null;
		if (owner.parent.autoCache) {
			stat = Oxygen.FileSystem.statSync(location);
			var cache = owner.parent.getCache(location, stat.mtime);
			if (cache != null) {
				var cachedSource = new Carbonite.Source(location, "");
				cachedSource.file = location;
				cachedSource.parent = owner.parent;
				cachedSource.index = owner.parent.sourceIndex;
				owner.parent.sourceIndex++;
				owner.parent.sources.push(cachedSource);
				cachedSource.raw = cache.parsed;
				return null;
				}
			}
		var source = inc.parent.parent.source.parent.addSource(location, Oxygen.FileSystem.readSync(location, "utf8"));
		source.file = location;
		source.process();
		if (owner.parent.autoCache) {
			if (source.pre.isPure) {
				source.doCache = true;
				source.mtime = stat.mtime;
				}
			}
	}
}

Carbonite.Pre.Statements.Include.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Include.prototype.run = function () {
	if (arguments.length == 0) {
		this.file = this.data["file"]["value"];
		this.as = this.data["as"];
		var location = Oxygen.FileSystem.dirName(this.parent.parent.source.file) + "/" + this.file;
		if (Oxygen.FileSystem.isDir(location)) {
			var files = Oxygen.FileSystem.readDirSync(location);
			for (var i = 0; i < files.length; i++) {
				var file = files[i];
				if (Oxygen.FileSystem.isDir(location + "/" + file) == false) {
					Carbonite.Pre.Statements.Include.include(location + "/" + file, this);
					}
				}
			}else{
				Carbonite.Pre.Statements.Include.include(location, this);
			}
	}
}

Carbonite.Pre.Statements.Include.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Include.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Import = function () {
	this.name = "";

	this.as = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Import.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Import.prototype.run = function () {
	if (arguments.length == 0) {
		var that = this;
		this.name = this.data["name"]["value"];
		this.as = this.data["as"];
		var comp = this.parent.parent.source.parent;
		if (comp.importHandler == null) {
			var notice = new Carbonite.Notice("No import handler registered for this compiler");
			notice.start = new Carbonite.Location(0, 0, 0);
			notice.end = new Carbonite.Location(0, 0, 0);
			notice.module = "Import";
			notice.type = "Import";
			notice.source = this.parent.parent.source;
			this.parent.parent.source.parent.status.give(notice);
			throw new Error("Import error");
			}else{
				comp.importHandler(this.name, "*", function (err, location) {
if (err != null && err.length > 0) {
	var notice = new Carbonite.Notice(err);
	notice.start = new Carbonite.Location(0, 0, 0);
	notice.end = new Carbonite.Location(0, 0, 0);
	notice.module = "Import";
	notice.type = "Import";
	notice.source = that.parent.parent.source;
	that.parent.parent.source.parent.status.give(notice);
	throw new Error("Import error");
	}else{
		var tempInclude = new Carbonite.Pre.Statements.Include(that.parent, that.data);
		Carbonite.Pre.Statements.Include.include(location, tempInclude);
	}
});
			}
	}
}

Carbonite.Pre.Statements.Import.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Import.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Out = function () {
	this.code = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Out.prototype.build = function () {
	if (arguments.length == 0) {
		var content = this.data["content"];
		this.code = new Carbonite.Pre.Block(this.topParent.parent, content);
		this.code.canOutput = true;
		this.code.scope = this.scope;
		this.code.build();
	}
}

Carbonite.Pre.Statements.Out.prototype.run = function () {
	if (arguments.length == 0) {
		this.code.run();
	}
}

Carbonite.Pre.Statements.Out.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbonite.Pre.Statements.Out.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Script = function () {
	this.language = "";

	this.block = null;

	this.code = "";

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Script.prototype.build = function () {
	if (arguments.length == 0) {
		this.language = this.data["language"];
		var content = this.data["content"];
		if (content.length > 1) {

			}
		if ((content.length > 0) && (content[0]["type"] == "raw")) {
			this.code = content[0]["content"];
			try {;
			if ((this.language.toLowerCase() == "carbon") || (this.language == "")) {
				this.block = Carbide.Languages.Carbon.virtualizeIntoProcessor(this.parent.parent.source.file + " embedded carbon script", this.code, this.parent.parent.source.parent.buildScript);
				}else if (this.language.toLowerCase() == "calcium") {
				this.block = Carbide.Languages.Calcium.virtualizeIntoProcessor(this.parent.parent.source.file + " embedded calcium script", this.code, this.parent.parent.source.parent.buildScript);
				}
			} catch(err) {};
			}
	}
}

Carbonite.Pre.Statements.Script.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Statements.Script.prototype.run = function () {
	if (arguments.length == 0) {
		var proc = this.parent.parent.source.parent.buildScript;
		this.parent.parent.source.parent.scripts.push(this.data);
		if (this.block != null) {
			try {;
			this.block.run(proc.scope);
			} catch(err) {};
			}
		if (proc.hadError) {
			var baseNotice = proc.notices[0];
			var notice = new Carbonite.Notice(baseNotice.message);
			notice.start = new Carbonite.Location(0, 0, baseNotice.start);
			notice.end = new Carbonite.Location(0, 0, baseNotice.end);
			notice.module = "Script";
			notice.type = "Runtime";
			notice.source = this.parent.parent.source;
			this.parent.parent.source.parent.status.give(notice);
			throw new Error("Execution error");
			}
	}
}

Carbonite.Pre.Statements.Script.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Doc = function () {
	this.type = "";

	this.arguments = "";

	this.content = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	this.type = "";

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.data = data;
	}

}

Carbonite.Pre.Statements.Doc.prototype.build = function () {
	if (arguments.length == 0) {
		this.type = this.data["name"];
		this.arguments = this.data["arguments"];
		if ("content" in this.data) {
			var content = this.data["content"];
			this.content = new Carbonite.Pre.Block(this.topParent.parent, content);
			this.content.canOutput = false;
			this.content.scope = this.scope;
			this.content.build();
			}
	}
}

Carbonite.Pre.Statements.Doc.prototype.run = function () {
	if (arguments.length == 0) {
		var compiler = this.topParent.parent.source.parent;
		this.content.run();
		compiler.docs.addItem(this.type, this.arguments, this.content.rawOutput);
	}
}

Carbonite.Pre.Statements.Doc.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var block = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "define") {
			rtn = new Carbonite.Pre.Statements.Define(block, data);
			}else if (type == "if") {
			rtn = new Carbonite.Pre.Statements.If(block, data);
			}else if (type == "include") {
			rtn = new Carbonite.Pre.Statements.Include(block, data);
			}else if (type == "import") {
			rtn = new Carbonite.Pre.Statements.Import(block, data);
			}else if (type == "raw") {
			rtn = new Carbonite.Pre.Statements.Raw(block, data);
			}else if (type == "function") {
			rtn = new Carbonite.Pre.Statements.Function(block, data);
			}else if (type == "for") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "forin") {
			rtn = new Carbonite.Pre.Statements.For(block, data);
			}else if (type == "lost") {
			rtn = new Carbonite.Pre.Statements.Lost(block, data);
			}else if (type == "var") {
			rtn = new Carbonite.Pre.Statements.Var(block, data);
			}else if (type == "return") {
			rtn = new Carbonite.Pre.Statements.Return(block, data);
			}else if (type == "output") {
			rtn = new Carbonite.Pre.Statements.Out(block, data);
			}else if (type == "script") {
			rtn = new Carbonite.Pre.Statements.Script(block, data);
			}else if (type == "doc") {
			rtn = new Carbonite.Pre.Statements.Doc(block, data);
			}
		rtn.type = type;
		return rtn;
	}
}

Carbonite.Pre.Statements.Doc.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Processor = function () {
	this.source = null;

	this.map = [];

	this.root = null;

	this.status = new Carbonite.Status();

	this.isPure = false;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Source) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var src = arguments[0];
		this.source = src;
		var po = Carbonite.Parsers.PreParse(this.source.data);
		if (po.hadError) {
			this.status.give(Carbonite.Notice.fromParser(this.source, po));
			}else{
				var parsed = po.data["document"];
				this.root = new Carbonite.Pre.Block(this, parsed);
			}
	}

}

Carbonite.Pre.Processor.prototype.build = function () {
	if (arguments.length == 0) {
		if (this.status.hadError == false) {
			this.root.scope = this.source.parent.scope;
			this.root.canOutput = true;
			this.root.build();
			if (this.root.statements.length == 1) {
				if (this.root.statements[0].type == "raw") {
					this.isPure = true;
					}
				}
			}
		return this.status;
	}
}

Carbonite.Pre.Processor.prototype.run = function () {
	if (arguments.length == 0) {
		if (this.status.hadError == false) {
			try {;
			this.root.run();
			} catch(err) {};
			}
		return this.status;
	}
}

Carbonite.Pre.Processor.prototype.getLocation = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var offset = arguments[0];
		return this.getRealLocation(this.getReal(offset));
	}
}

Carbonite.Pre.Processor.prototype.getRealLocation = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var offset = arguments[0];
		var line = 1;
		var column = 1;
		for (var i = 0;i < offset;i++) {
			var code = this.source.data.charCodeAt(i);
			column++;
			if (code == 10) {
				line++;
				column = 1;
				}
			}
		var loc = new Carbonite.Location(line, column, offset);
		return loc;
	}
}

Carbonite.Pre.Processor.prototype.getReal = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var offset = arguments[0];
		var real = 0;
		for (var i = 0; i < this.map.length; i++) {
			var m = this.map[i];
			if (offset > m.virtual) {
				real = m.realStart + (offset - m.virtual);
				}else{
					break;
				}
			}
		return real;
	}
}

Carbonite.Pre.Processor.prototype.addFunction = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Statements.Function) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var func = arguments[0];
		this.source.parent.functionScope.push(func);
	}
}

Carbonite.Pre.Processor.prototype.searchFunction = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.source.parent.functionScope.length; i++) {
			var func = this.source.parent.functionScope[i];
			if (func.name == name) {
				return func;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Pre.Processor.prototype.runtimeError = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var start = arguments[0];
		var end = arguments[1];
		var message = arguments[2];
		var notice = new Carbonite.Notice(message);
		notice.level = 4;
		notice.module = "Preprocessor Script";
		notice.type = "Runtime";
		notice.source = this.source;
		notice.start = this.getRealLocation(start);
		notice.end = this.getRealLocation(end);
		this.status.give(notice);
		throw new Error("Error in Preprocessor");
	}
}

Carbonite.Pre.Value = function () {
	this.type = "null";

	this.value = 0;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbonite.Pre.Value.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];
		return Carbonite.Pre.Values.Map.create(value);
	}
else 	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];
		return Carbonite.Pre.Values.Array.create(value);
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];
		return Carbonite.Pre.Values.String.create(value);
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];
		return Carbonite.Pre.Values.Number.create(value);
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];
		var cast = value;
		return Carbonite.Pre.Values.Number.create(cast);
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];
		return Carbonite.Pre.Values.Bool.create(value);
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

Carbonite.Pre.Value.make = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbonite.Pre.Values.String(data);
			}else if (type == "map") {
			rtn = new Carbonite.Pre.Values.Map(data);
			}else if (type == "number") {
			rtn = new Carbonite.Pre.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbonite.Pre.Values.Bool(data);
			}else if (type == "array") {
			rtn = new Carbonite.Pre.Values.Array(data);
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbonite.Pre.Value.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbonite.Pre.Value.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbonite.Pre.Value.prototype.property = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Value.prototype.method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Value.prototype.operate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Value || (arguments[1] instanceof Carbonite.Pre.Values.String) || (arguments[1] instanceof Carbonite.Pre.Values.Number) || (arguments[1] instanceof Carbonite.Pre.Values.Array) || (arguments[1] instanceof Carbonite.Pre.Values.Map) || (arguments[1] instanceof Carbonite.Pre.Values.Bool) || (arguments[1] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var operator = arguments[0];
		var value = arguments[1];

	}
}

Carbonite.Pre.Value.prototype.iterate = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Pre.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];

	}
}

Carbonite.Pre.Values.String = function () {
	this.type = "string";

	this.value = "";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbonite.Pre.Values.String.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbonite.Pre.Values.String.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbonite.Pre.Values.String.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbonite.Pre.Values.String(m);
		value.value = val;
		return value;
	}
}

Carbonite.Pre.Values.String.prototype.iterate = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Pre.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		for (var i in this.value) {
			vKey.value.value = i;
			v.value = Carbonite.Pre.Values.String.create(this.value[i]);
			code.run();
			}
	}
}

Carbonite.Pre.Values.String.prototype.property = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		if (name == "length") {
			var len = this.value.length;
			return Carbonite.Pre.Values.Number.create(len);
			}
	}
}

Carbonite.Pre.Values.String.prototype.method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.String.prototype.operate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Value || (arguments[1] instanceof Carbonite.Pre.Values.String) || (arguments[1] instanceof Carbonite.Pre.Values.Number) || (arguments[1] instanceof Carbonite.Pre.Values.Array) || (arguments[1] instanceof Carbonite.Pre.Values.Map) || (arguments[1] instanceof Carbonite.Pre.Values.Bool) || (arguments[1] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var v = null;
		var cast = value;
		if (operator == "=") {
			this.value = cast.value;
			v = Carbonite.Pre.Values.Null.create();
			}else if (operator == "==") {
			v = Carbonite.Pre.Values.Bool.create(this.value == cast.value);
			}else if (operator == "!=") {
			v = Carbonite.Pre.Values.Bool.create(this.value != cast.value);
			}else if (operator == "+") {
			v = Carbonite.Pre.Values.String.create(this.value + cast.value);
			}else if (operator == "+=") {
			this.value += cast.value;
			v = Carbonite.Pre.Values.Null.create();
			}
		return v;
	}
}

Carbonite.Pre.Values.String.make = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbonite.Pre.Values.String(data);
			}else if (type == "map") {
			rtn = new Carbonite.Pre.Values.Map(data);
			}else if (type == "number") {
			rtn = new Carbonite.Pre.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbonite.Pre.Values.Bool(data);
			}else if (type == "array") {
			rtn = new Carbonite.Pre.Values.Array(data);
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbonite.Pre.Values.Number = function () {
	this.type = "number";

	this.value = 0;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbonite.Pre.Values.Number.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
		var zero = 0;
		if (raw["negative"] != null) {
			this.value = zero - this.value;
			}
	}
}

Carbonite.Pre.Values.Number.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbonite.Pre.Values.Number.prototype.operate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Values.Number) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var v = null;
		if (operator == "=") {
			this.value = value.value;
			v = Carbonite.Pre.Values.Null.create();
			}else if (operator == "==") {
			v = Carbonite.Pre.Values.Bool.create(this.value == value.value);
			}else if (operator == "!=") {
			v = Carbonite.Pre.Values.Bool.create(this.value != value.value);
			}else if (operator == "+") {
			v = Carbonite.Pre.Values.Number.create(this.value + value.value);
			}else if (operator == "-") {
			v = Carbonite.Pre.Values.Number.create(this.value - value.value);
			}else if (operator == "+=") {
			this.value+=value.value;
			v = Carbonite.Pre.Values.Null.create();
			}else if (operator == "-=") {
			this.value-=value.value;
			v = Carbonite.Pre.Values.Null.create();
			}else if (operator == "*") {
			v = Carbonite.Pre.Values.Number.create(this.value * value.value);
			}else if (operator == "/") {
			v = Carbonite.Pre.Values.Number.create(this.value / value.value);
			}else if (operator == ">") {
			v = Carbonite.Pre.Values.Bool.create(this.value > value.value);
			}else if (operator == ">=") {
			v = Carbonite.Pre.Values.Bool.create(this.value >= value.value);
			}else if (operator == "<") {
			v = Carbonite.Pre.Values.Bool.create(this.value < value.value);
			}else if (operator == "<=") {
			v = Carbonite.Pre.Values.Bool.create(this.value <= value.value);
			}
		return v;
	}
}

Carbonite.Pre.Values.Number.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var number = arguments[0];
		var m = {};
		var value = new Carbonite.Pre.Values.Number(m);
		value.value = number;
		return value;
	}
}

Carbonite.Pre.Values.Number.make = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbonite.Pre.Values.String(data);
			}else if (type == "map") {
			rtn = new Carbonite.Pre.Values.Map(data);
			}else if (type == "number") {
			rtn = new Carbonite.Pre.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbonite.Pre.Values.Bool(data);
			}else if (type == "array") {
			rtn = new Carbonite.Pre.Values.Array(data);
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbonite.Pre.Values.Number.prototype.property = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Number.prototype.method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Number.prototype.iterate = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Pre.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];

	}
}

Carbonite.Pre.Values.Array = function () {
	this.type = "array";

	this.value = [];

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbonite.Pre.Values.Array.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		var arr = raw["value"];
		for (var i = 0; i < arr.length; i++) {
			var item = arr[i];
			var val = Carbonite.Pre.Expression.make(null, item);
			val.build();
			this.value.push(val.run());
			}
	}
}

Carbonite.Pre.Values.Array.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbonite.Pre.Values.Array.prototype.property = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		if (name == "length") {
			var len = this.value.length;
			return Carbonite.Pre.Values.Number.create(len);
			}
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Array.prototype.method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		if (name == "length") {
			var len = this.value.length;
			return Carbonite.Pre.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.value[ind.value];
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var found = this.value.push(ind);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Array.create = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbonite.Pre.Values.Array(m);
		value.value = val;
		return value;
	}
}

Carbonite.Pre.Values.Array.prototype.iterate = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Pre.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.value[i];
			code.run();
			}
	}
}

Carbonite.Pre.Values.Array.make = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbonite.Pre.Values.String(data);
			}else if (type == "map") {
			rtn = new Carbonite.Pre.Values.Map(data);
			}else if (type == "number") {
			rtn = new Carbonite.Pre.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbonite.Pre.Values.Bool(data);
			}else if (type == "array") {
			rtn = new Carbonite.Pre.Values.Array(data);
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbonite.Pre.Values.Array.prototype.operate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Value || (arguments[1] instanceof Carbonite.Pre.Values.String) || (arguments[1] instanceof Carbonite.Pre.Values.Number) || (arguments[1] instanceof Carbonite.Pre.Values.Array) || (arguments[1] instanceof Carbonite.Pre.Values.Map) || (arguments[1] instanceof Carbonite.Pre.Values.Bool) || (arguments[1] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var operator = arguments[0];
		var value = arguments[1];

	}
}

Carbonite.Pre.Values.Map = function () {
	this.type = "map";

	this.value = 0;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbonite.Pre.Values.Map.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbonite.Pre.Values.Map.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbonite.Pre.Values.Map.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbonite.Pre.Values.Map(m);
		value.value = val;
		return value;
	}
}

Carbonite.Pre.Values.Map.prototype.iterate = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Pre.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		for (var key in this.value) {
			var castKey = vKey.value;
			castKey.value = key;
			v.value.value = this.value[key];
			code.run();
			}
	}
}

Carbonite.Pre.Values.Map.prototype.property = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var has = this.value[name];
		if (has != null) {
			var rtn = Carbonite.Pre.Value.create(this.value[name]);
			return rtn;
			}
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Map.prototype.method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		if (name == "set") {
			var key = input[0];
			var ind = input[1];
			this.value[key.value] = ind.value;
			}else if (name == "index") {
			var ind = input[0];
			var found = this.value[ind.value];
			return found;
			}
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Map.make = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbonite.Pre.Values.String(data);
			}else if (type == "map") {
			rtn = new Carbonite.Pre.Values.Map(data);
			}else if (type == "number") {
			rtn = new Carbonite.Pre.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbonite.Pre.Values.Bool(data);
			}else if (type == "array") {
			rtn = new Carbonite.Pre.Values.Array(data);
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbonite.Pre.Values.Map.prototype.operate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Value || (arguments[1] instanceof Carbonite.Pre.Values.String) || (arguments[1] instanceof Carbonite.Pre.Values.Number) || (arguments[1] instanceof Carbonite.Pre.Values.Array) || (arguments[1] instanceof Carbonite.Pre.Values.Map) || (arguments[1] instanceof Carbonite.Pre.Values.Bool) || (arguments[1] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var operator = arguments[0];
		var value = arguments[1];

	}
}

Carbonite.Pre.Values.Bool = function () {
	this.type = "bool";

	this.value = false;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbonite.Pre.Values.Bool.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbonite.Pre.Values.Bool.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbonite.Pre.Values.Bool.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbonite.Pre.Values.Bool(m);
		value.value = val;
		return value;
	}
}

Carbonite.Pre.Values.Bool.make = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbonite.Pre.Values.String(data);
			}else if (type == "map") {
			rtn = new Carbonite.Pre.Values.Map(data);
			}else if (type == "number") {
			rtn = new Carbonite.Pre.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbonite.Pre.Values.Bool(data);
			}else if (type == "array") {
			rtn = new Carbonite.Pre.Values.Array(data);
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbonite.Pre.Values.Bool.prototype.property = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Bool.prototype.method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Bool.prototype.operate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Value || (arguments[1] instanceof Carbonite.Pre.Values.String) || (arguments[1] instanceof Carbonite.Pre.Values.Number) || (arguments[1] instanceof Carbonite.Pre.Values.Array) || (arguments[1] instanceof Carbonite.Pre.Values.Map) || (arguments[1] instanceof Carbonite.Pre.Values.Bool) || (arguments[1] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var operator = arguments[0];
		var value = arguments[1];

	}
}

Carbonite.Pre.Values.Bool.prototype.iterate = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Pre.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];

	}
}

Carbonite.Pre.Values.Null = function () {
	this.type = "null";

	this.value = false;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbonite.Pre.Values.Null.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbonite.Pre.Values.Null.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbonite.Pre.Values.Null.create = function () {
	if (arguments.length == 0) {
		var m = {};
		var value = new Carbonite.Pre.Values.Null(m);
		value.value = null;
		return value;
	}
}

Carbonite.Pre.Values.Null.make = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbonite.Pre.Values.String(data);
			}else if (type == "map") {
			rtn = new Carbonite.Pre.Values.Map(data);
			}else if (type == "number") {
			rtn = new Carbonite.Pre.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbonite.Pre.Values.Bool(data);
			}else if (type == "array") {
			rtn = new Carbonite.Pre.Values.Array(data);
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbonite.Pre.Values.Null.prototype.property = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Null.prototype.method = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		return Carbonite.Pre.Values.Null.create();
	}
}

Carbonite.Pre.Values.Null.prototype.operate = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Value || (arguments[1] instanceof Carbonite.Pre.Values.String) || (arguments[1] instanceof Carbonite.Pre.Values.Number) || (arguments[1] instanceof Carbonite.Pre.Values.Array) || (arguments[1] instanceof Carbonite.Pre.Values.Map) || (arguments[1] instanceof Carbonite.Pre.Values.Bool) || (arguments[1] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var operator = arguments[0];
		var value = arguments[1];

	}
}

Carbonite.Pre.Values.Null.prototype.iterate = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbonite.Pre.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];

	}
}

Carbonite.Pre.Variable = function () {
	this.name = "";

	this.value = null;

	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbonite.Pre.Value || (arguments[1] instanceof Carbonite.Pre.Values.String) || (arguments[1] instanceof Carbonite.Pre.Values.Number) || (arguments[1] instanceof Carbonite.Pre.Values.Array) || (arguments[1] instanceof Carbonite.Pre.Values.Map) || (arguments[1] instanceof Carbonite.Pre.Values.Bool) || (arguments[1] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		this.name = name;
		this.value = value;
	}

}

Carbonite.Pre.Scope = function () {
	this.parentScope = null;

	this.parent = null;

	this.data = [];

	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbonite.Pre.Scope.prototype.setParentScope = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		this.parentScope = scope;
	}
}

Carbonite.Pre.Scope.prototype.addVariable = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var variable = arguments[0];
		this.data.push(variable);
	}
}

Carbonite.Pre.Scope.prototype.clear = function () {
	if (arguments.length == 0) {
		for (var i = this.data.length;i > 0;i--) {
			this.data.pop();
			}
	}
}

Carbonite.Pre.Scope.prototype.search = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.data.length; i++) {
			var variable = this.data[i];
			if (variable.name == name) {
				return variable;
				}
			}
		if (this.parentScope != null) {
			return this.parentScope.search(name);
			}
		var emp = null;
		return emp;
	}
}

Carbonite.Pre.Sub = function () {
	this.data = {};

	this.parent = null;

	this.type = 0;

	this.property = "";

	this.arguments = [];

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.data = raw;
		this.parent = parent;
		var type = this.data["type"];
		if (type == "constant") {
			this.type = 1;
			this.property = this.data["value"];
			}else if (type == "call") {
			this.type = 2;
			this.property = this.data["term"]["value"];
			var args = this.data["args"];
			for (var i = 0; i < args.length; i++) {
				var argument = Carbonite.Pre.Expression.make(this.parent, args[i]);
				this.arguments.push(argument);
				argument.build();
				}
			}else if (type == "array") {
			this.type = 2;
			this.property = "index";
			var args = this.data["value"];
			for (var i = 0; i < args.length; i++) {
				var argument = Carbonite.Pre.Expression.make(this.parent, args[i]);
				this.arguments.push(argument);
				argument.build();
				}
			}
	}

}

Carbonite.Pre.Sub.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Value || (arguments[0] instanceof Carbonite.Pre.Values.String) || (arguments[0] instanceof Carbonite.Pre.Values.Number) || (arguments[0] instanceof Carbonite.Pre.Values.Array) || (arguments[0] instanceof Carbonite.Pre.Values.Map) || (arguments[0] instanceof Carbonite.Pre.Values.Bool) || (arguments[0] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var on = arguments[0];
		if (this.type == 1) {
			return on.property(this.property);
			}else{
				var args = [];
				for (var i = 0; i < this.arguments.length; i++) {
					var arg = this.arguments[i];
					args.push(arg.run());
					}
				return on.method(this.property, args);
			}
	}
}

Carbonite.Pre.Expression = function () {
	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.data = raw;
		this.parent = parent;
	}

}

Carbonite.Pre.Expression.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "operation") {
			rtn = new Carbonite.Pre.Expressions.Operation(parent, data);
			}else if (type == "constant") {
			rtn = new Carbonite.Pre.Expressions.Reference(parent, data);
			}else if (type == "call") {
			rtn = new Carbonite.Pre.Expressions.Call(parent, data);
			}else{
				rtn = new Carbonite.Pre.Expressions.Raw(parent, data);
			}
		return rtn;
	}
}

Carbonite.Pre.Expression.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Expression.prototype.buildSubs = function () {
	if (arguments.length == 0) {
		if ("subs" in this.data) {
			var subs = this.data["subs"];
			for (var i = 0; i < subs.length; i++) {
				var sub = new Carbonite.Pre.Sub(this.parent, subs[i]);
				this.subs.push(sub);
				}
			}
	}
}

Carbonite.Pre.Expression.prototype.runSubs = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Value || (arguments[0] instanceof Carbonite.Pre.Values.String) || (arguments[0] instanceof Carbonite.Pre.Values.Number) || (arguments[0] instanceof Carbonite.Pre.Values.Array) || (arguments[0] instanceof Carbonite.Pre.Values.Map) || (arguments[0] instanceof Carbonite.Pre.Values.Bool) || (arguments[0] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var on = arguments[0];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last);
			}
		return last;
	}
}

Carbonite.Pre.Expression.prototype.run = function () {
	if (arguments.length == 0) {

	}
}

Carbonite.Pre.Expressions.Operation = function () {
	this.head = null;

	this.tail = null;

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.data = raw;
		this.parent = parent;
	}

}

Carbonite.Pre.Expressions.Operation.prototype.build = function () {
	if (arguments.length == 0) {
		this.buildSubs();
		this.head = Carbonite.Pre.Expression.make(this.parent, this.data["head"]);
		this.tail = Carbonite.Pre.Expression.make(this.parent, this.data["tail"]);
		this.head.build();
		this.tail.build();
	}
}

Carbonite.Pre.Expressions.Operation.prototype.run = function () {
	if (arguments.length == 0) {
		var head = this.head.run();
		var tail = this.tail.run();
		return head.operate(this.data["operator"], tail);
	}
}

Carbonite.Pre.Expressions.Operation.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "operation") {
			rtn = new Carbonite.Pre.Expressions.Operation(parent, data);
			}else if (type == "constant") {
			rtn = new Carbonite.Pre.Expressions.Reference(parent, data);
			}else if (type == "call") {
			rtn = new Carbonite.Pre.Expressions.Call(parent, data);
			}else{
				rtn = new Carbonite.Pre.Expressions.Raw(parent, data);
			}
		return rtn;
	}
}

Carbonite.Pre.Expressions.Operation.prototype.buildSubs = function () {
	if (arguments.length == 0) {
		if ("subs" in this.data) {
			var subs = this.data["subs"];
			for (var i = 0; i < subs.length; i++) {
				var sub = new Carbonite.Pre.Sub(this.parent, subs[i]);
				this.subs.push(sub);
				}
			}
	}
}

Carbonite.Pre.Expressions.Operation.prototype.runSubs = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Value || (arguments[0] instanceof Carbonite.Pre.Values.String) || (arguments[0] instanceof Carbonite.Pre.Values.Number) || (arguments[0] instanceof Carbonite.Pre.Values.Array) || (arguments[0] instanceof Carbonite.Pre.Values.Map) || (arguments[0] instanceof Carbonite.Pre.Values.Bool) || (arguments[0] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var on = arguments[0];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last);
			}
		return last;
	}
}

//Relative Console
Carbonite.Pre.Expressions.Call = function () {
	this.name = "";

	this.arguments = [];

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.data = raw;
		this.parent = parent;
	}

}

Carbonite.Pre.Expressions.Call.prototype.build = function () {
	if (arguments.length == 0) {
		this.buildSubs();
		this.name = this.data["term"]["value"];
		var args = this.data["args"];
		for (var i = 0; i < args.length; i++) {
			var argument = Carbonite.Pre.Expression.make(this.parent, args[i]);
			this.arguments.push(argument);
			argument.build();
			}
	}
}

Carbonite.Pre.Expressions.Call.prototype.run = function () {
	if (arguments.length == 0) {
		var call = this.parent.topParent.parent.searchFunction(this.name);
		if (call != null) {
			return this.runSubs(call.call(this.arguments));
			}else{
				if (this.name == "log") {
					var msg = this.arguments[0].run();
					console.log(msg.value);
					}else{
						this.parent.topParent.parent.runtimeError(this.data["startOffset"], this.data["offset"], "Unknown function '" + this.name + "'");
					}
			}
	}
}

Carbonite.Pre.Expressions.Call.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "operation") {
			rtn = new Carbonite.Pre.Expressions.Operation(parent, data);
			}else if (type == "constant") {
			rtn = new Carbonite.Pre.Expressions.Reference(parent, data);
			}else if (type == "call") {
			rtn = new Carbonite.Pre.Expressions.Call(parent, data);
			}else{
				rtn = new Carbonite.Pre.Expressions.Raw(parent, data);
			}
		return rtn;
	}
}

Carbonite.Pre.Expressions.Call.prototype.buildSubs = function () {
	if (arguments.length == 0) {
		if ("subs" in this.data) {
			var subs = this.data["subs"];
			for (var i = 0; i < subs.length; i++) {
				var sub = new Carbonite.Pre.Sub(this.parent, subs[i]);
				this.subs.push(sub);
				}
			}
	}
}

Carbonite.Pre.Expressions.Call.prototype.runSubs = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Value || (arguments[0] instanceof Carbonite.Pre.Values.String) || (arguments[0] instanceof Carbonite.Pre.Values.Number) || (arguments[0] instanceof Carbonite.Pre.Values.Array) || (arguments[0] instanceof Carbonite.Pre.Values.Map) || (arguments[0] instanceof Carbonite.Pre.Values.Bool) || (arguments[0] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var on = arguments[0];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last);
			}
		return last;
	}
}

Carbonite.Pre.Expressions.Raw = function () {
	this.value = null;

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.data = raw;
		this.parent = parent;
	}

}

Carbonite.Pre.Expressions.Raw.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = Carbonite.Pre.Value.make(this.data);
	}
}

Carbonite.Pre.Expressions.Raw.prototype.run = function () {
	if (arguments.length == 0) {
		return this.value;
	}
}

Carbonite.Pre.Expressions.Raw.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "operation") {
			rtn = new Carbonite.Pre.Expressions.Operation(parent, data);
			}else if (type == "constant") {
			rtn = new Carbonite.Pre.Expressions.Reference(parent, data);
			}else if (type == "call") {
			rtn = new Carbonite.Pre.Expressions.Call(parent, data);
			}else{
				rtn = new Carbonite.Pre.Expressions.Raw(parent, data);
			}
		return rtn;
	}
}

Carbonite.Pre.Expressions.Raw.prototype.buildSubs = function () {
	if (arguments.length == 0) {
		if ("subs" in this.data) {
			var subs = this.data["subs"];
			for (var i = 0; i < subs.length; i++) {
				var sub = new Carbonite.Pre.Sub(this.parent, subs[i]);
				this.subs.push(sub);
				}
			}
	}
}

Carbonite.Pre.Expressions.Raw.prototype.runSubs = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Value || (arguments[0] instanceof Carbonite.Pre.Values.String) || (arguments[0] instanceof Carbonite.Pre.Values.Number) || (arguments[0] instanceof Carbonite.Pre.Values.Array) || (arguments[0] instanceof Carbonite.Pre.Values.Map) || (arguments[0] instanceof Carbonite.Pre.Values.Bool) || (arguments[0] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var on = arguments[0];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last);
			}
		return last;
	}
}

Carbonite.Pre.Expressions.Reference = function () {
	this.name = "";

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var raw = arguments[1];
		this.data = raw;
		this.parent = parent;
	}

}

Carbonite.Pre.Expressions.Reference.prototype.build = function () {
	if (arguments.length == 0) {
		this.buildSubs();
		this.name = this.data["value"];
	}
}

Carbonite.Pre.Expressions.Reference.prototype.run = function () {
	if (arguments.length == 0) {
		var ref = this.parent.scope.search(this.name);
		if (ref != null) {
			return this.runSubs(ref.value);
			}else{
				this.parent.topParent.parent.runtimeError(this.data["startOffset"], this.data["offset"], "Unknown variable '" + this.name + "'");
			}
	}
}

Carbonite.Pre.Expressions.Reference.make = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbonite.Pre.Statement || (arguments[0] instanceof Carbonite.Pre.Statements.Define) || (arguments[0] instanceof Carbonite.Pre.Statements.Function) || (arguments[0] instanceof Carbonite.Pre.Statements.If) || (arguments[0] instanceof Carbonite.Pre.Statements.For) || (arguments[0] instanceof Carbonite.Pre.Statements.Raw) || (arguments[0] instanceof Carbonite.Pre.Statements.Lost) || (arguments[0] instanceof Carbonite.Pre.Statements.Var) || (arguments[0] instanceof Carbonite.Pre.Statements.Return) || (arguments[0] instanceof Carbonite.Pre.Statements.Include) || (arguments[0] instanceof Carbonite.Pre.Statements.Import) || (arguments[0] instanceof Carbonite.Pre.Statements.Out) || (arguments[0] instanceof Carbonite.Pre.Statements.Script) || (arguments[0] instanceof Carbonite.Pre.Statements.Doc)) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var data = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "operation") {
			rtn = new Carbonite.Pre.Expressions.Operation(parent, data);
			}else if (type == "constant") {
			rtn = new Carbonite.Pre.Expressions.Reference(parent, data);
			}else if (type == "call") {
			rtn = new Carbonite.Pre.Expressions.Call(parent, data);
			}else{
				rtn = new Carbonite.Pre.Expressions.Raw(parent, data);
			}
		return rtn;
	}
}

Carbonite.Pre.Expressions.Reference.prototype.buildSubs = function () {
	if (arguments.length == 0) {
		if ("subs" in this.data) {
			var subs = this.data["subs"];
			for (var i = 0; i < subs.length; i++) {
				var sub = new Carbonite.Pre.Sub(this.parent, subs[i]);
				this.subs.push(sub);
				}
			}
	}
}

Carbonite.Pre.Expressions.Reference.prototype.runSubs = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Pre.Value || (arguments[0] instanceof Carbonite.Pre.Values.String) || (arguments[0] instanceof Carbonite.Pre.Values.Number) || (arguments[0] instanceof Carbonite.Pre.Values.Array) || (arguments[0] instanceof Carbonite.Pre.Values.Map) || (arguments[0] instanceof Carbonite.Pre.Values.Bool) || (arguments[0] instanceof Carbonite.Pre.Values.Null)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var on = arguments[0];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last);
			}
		return last;
	}
}

Carbide = function () {


}

Carbide.Languages = function () {


}

Carbide.Virtual = function () {


}

Carbide.Virtual.Statements = function () {


}

Carbide.Virtual.Values = function () {


}

Carbide.Virtual.Expressions = function () {


}

Carbide.Language = function () {


}

Oxygen.FileSystem = function () {


}

Oxygen.FileSystem.readSync = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var location = arguments[0];
		var format = arguments[1];
return require('fs').readFileSync(arguments[0], arguments[1])
	}
}

Oxygen.FileSystem.read = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'function' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var location = arguments[0];
		var format = arguments[1];
		var callback = arguments[2];
require('fs').readFile(arguments[0], arguments[1], arguments[2])
	}
}

Oxygen.FileSystem.write = function (location, content, callback) {
require('fs').writeFile(arguments[0], arguments[1], arguments[2])}

Oxygen.FileSystem.writeSync = function (location, content) {
return require('fs').writeFileSync(arguments[0], arguments[1])}

Oxygen.FileSystem.statSync = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
return Oxygen.FileSystem.Stat.fromMap(require('fs').statSync(arguments[0]))
	}
}

Oxygen.FileSystem.prototype.stat = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'function' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var location = arguments[0];
		var callback = arguments[1];

	}
}

Oxygen.FileSystem.prototype.openSync = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var location = arguments[0];
		var flags = arguments[1];

	}
}

Oxygen.FileSystem.prototype.open = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'function' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var location = arguments[0];
		var flags = arguments[1];
		var callback = arguments[2];

	}
}

Oxygen.FileSystem.readDirSync = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
return require('fs').readdirSync(arguments[0]);
	}
}

Oxygen.FileSystem.dirName = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
return require('path').dirname(arguments[0]);
	}
}

Oxygen.FileSystem.normalize = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var path = arguments[0];
return require('path').normalize(arguments[0]);
	}
}

Oxygen.FileSystem.resolve = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var path = arguments[0];
return require('path').resolve(arguments[0]);
	}
}

Oxygen.FileSystem.isDir = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
return require('fs').lstatSync(arguments[0]).isDirectory();
	}
}

Oxygen.FileSystem.exists = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
return require('fs').existsSync(arguments[0])
	}
}

Oxygen.FileSystem.basename = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
return require('path').basename(arguments[0])
	}
}

Oxygen.FileSystem.makeDir = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var location = arguments[0];
require('fs').mkdirSync(arguments[0])
	}
}

Oxygen.FileSystem.Stat = function () {
	this.dev = 0;

	this.ino = 0;

	this.mode = 0;

	this.nlink = 0;

	this.uid = 0;

	this.gid = 0;

	this.rdev = 0;

	this.size = 0;

	this.blksize = 0;

	this.blocks = 0;

	this.atime = 0;

	this.mtime = 0;

	this.ctime = 0;

	this.birthtime = 0;

	this.dev = 0;

	this.ino = 0;

	this.mode = 0;

	this.nlink = 0;

	this.uid = 0;

	this.gid = 0;

	this.rdev = 0;

	this.size = 0;

	this.blksize = 0;

	this.blocks = 0;

	this.atime = 0;

	this.mtime = 0;

	this.ctime = 0;

	this.birthtime = 0;

	if (arguments.length == 0) {

	}

}

Oxygen.FileSystem.Stat.fromMap = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		var stat = new Oxygen.FileSystem.Stat();
		stat.dev = data["dev"];
		stat.ino = data["ino"];
		stat.mode = data["mode"];
		stat.nlink = data["nlink"];
		stat.uid = data["uid"];
		stat.gid = data["gid"];
		stat.rdev = data["rdev"];
		stat.size = data["size"];
		stat.blksize = data["blksize"];
		stat.blocks = data["blocks"];
		stat.atime = data["atimeMs"];
		stat.mtime = data["mtimeMs"];
		stat.ctime = data["ctimeMs"];
		stat.birthtime = data["birthtimeMs"];
		return stat;
	}
}

Carbide.Languages.Calcium = function () {


}

Carbide.Languages.Calcium.virtualize = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		var po = CarbideCalciumParser.parse(input);
		var ast = po.data;
		var root = null;
		var proc = new Carbide.Virtual.Processor(root);
		var exps = ast["document"]["expressions"];
		root = Carbide.Languages.Calcium.buildBlock(proc, exps);
		return proc;
	}
}

Carbide.Languages.Calcium.virtualizeIntoProcessor = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Processor) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var label = arguments[0];
		var input = arguments[1];
		var processor = arguments[2];
		var po = CarbideCalciumParser.parse(input);
		var ast = po.data;
		var root = null;
		var exps = ast["document"]["expressions"];
		root = Carbide.Languages.Calcium.buildBlock(processor, exps);
		root.label = label;
		processor.addBlock(root);
		return root;
	}
}

Carbide.Languages.Calcium.buildBlock = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var code = arguments[1];
		var rtn = new Carbide.Virtual.Block(parent);
		if (parent.root == null) {
			parent.root = rtn;
			parent.root.scope = parent.scope;
			}
		for (var i = 0; i < code.length; i++) {
			var exp = code[i];
			var state = null;
			var type = exp["type"];
			if (type == "let") {
				var litType = exp["value"]["type"];
				if (litType == "function") {
					var args = exp["value"]["parameters"];
					var exps = exp["value"]["body"];
					state = new Carbide.Virtual.Statements.Function(rtn, exp["name"], args, Carbide.Languages.Calcium.buildBlock(parent, exps));
					}else{
						state = new Carbide.Virtual.Statements.Var(rtn, exp["name"], Carbide.Languages.Calcium.buildExpression(exp["value"], parent));
					}
				}else if (type == "set") {
				var litType = exp["value"]["type"];
				if (litType == "function") {
					var args = exp["value"]["parameters"];
					var exps = exp["value"]["body"];
					state = new Carbide.Virtual.Statements.Function(rtn, exp["name"], args, Carbide.Languages.Calcium.buildBlock(parent, exps));
					}else{
						var name = exp["name"];
						var splits = name.split(".");
						if (splits.length == 1) {
							state = new Carbide.Virtual.Statements.Define(rtn, name, Carbide.Languages.Calcium.buildExpression(exp["value"], parent));
							}else{
								state = new Carbide.Virtual.Statements.Lost(rtn, new Carbide.Virtual.Expressions.Operation("=", Carbide.Languages.Calcium.buildSub(exp["name"]), Carbide.Languages.Calcium.buildExpression(exp["value"], parent)));
							}
					}
				}else if (type == "if") {
				var exps = exp["body"];
				var checks = [];
				checks.push(Carbide.Languages.Calcium.buildExpression(exp["check"], parent));
				state = new Carbide.Virtual.Statements.If(rtn, checks, Carbide.Languages.Calcium.buildBlock(parent, exps));
				}else if (type == "for") {
				var exps = exp["body"];
				var refer = new Carbide.Virtual.Expressions.Reference(exp["name"]);
				var one = 1;
				var numb = new Carbide.Virtual.Expressions.Raw(Carbide.Virtual.Values.Number.create(one));
				var operation = new Carbide.Virtual.Expressions.Operation("+" + "=", refer, numb);
				state = new Carbide.Virtual.Statements.For(rtn, exp["name"], Carbide.Languages.Calcium.buildExpression(exp["from"], parent), Carbide.Languages.Calcium.buildExpression(exp["check"], parent), operation, Carbide.Languages.Calcium.buildBlock(parent, exps));
				}else if (type == "return") {
				state = new Carbide.Virtual.Statements.Return(rtn, Carbide.Languages.Calcium.buildExpression(exp["value"], parent));
				}else{
					state = new Carbide.Virtual.Statements.Lost(rtn, Carbide.Languages.Calcium.buildExpression(exp, parent));
				}
			state.scope = new Carbide.Virtual.Scope(parent);
			rtn.statements.push(state);
			}
		return rtn;
	}
}

Carbide.Languages.Calcium.buildSub = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var splits = name.split(".");
		var rtn = new Carbide.Virtual.Expressions.Reference(splits[0]);
		if (splits.length > 1) {
			for (var s = 1;s < splits.length;s++) {
				var sub = new Carbide.Virtual.Sub(null);
				sub.type = 1;
				sub.property = splits[s];
				rtn.subs.push(sub);
				}
			}
		return rtn;
	}
}

Carbide.Languages.Calcium.buildExpression = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var exp = arguments[0];
		var proc = arguments[1];
		var type = exp["type"];
		var rtn = null;
		if (type == "literal") {
			var val = null;
			var litType = exp["literalType"];
			if (litType == "number") {
				var rVal = exp["value"];
				val = Carbide.Virtual.Values.Number.create(rVal);
				}else if (litType == "boolean") {
				var rVal = exp["value"];
				val = Carbide.Virtual.Values.Bool.create(rVal);
				}else if (litType == "string") {
				var rVal = exp["value"];
				val = Carbide.Virtual.Values.String.create(rVal);
				}else if (litType == "map") {
				val = Carbide.Virtual.Values.Map.create({});
				}else if (litType == "array") {
				val = Carbide.Virtual.Values.Array.create([]);
				}
			rtn = new Carbide.Virtual.Expressions.Raw(val);
			}else if (type == "function") {
			var rVal = exp;
			rtn = new Carbide.Virtual.Expressions.Raw(Carbide.Virtual.Values.Function.create(rVal["parameters"], Carbide.Languages.Calcium.buildBlock(proc, rVal["body"])));
			}else if (type == "operation") {
			rtn = new Carbide.Virtual.Expressions.Operation(exp["operator"], Carbide.Languages.Calcium.buildExpression(exp["head"], proc), Carbide.Languages.Calcium.buildExpression(exp["tail"], proc));
			}else if (type == "call") {
			var args = [];
			var rawArgs = exp["arguments"];
			for (var i = 0; i < rawArgs.length; i++) {
				var rawArg = rawArgs[i];
				args.push(Carbide.Languages.Calcium.buildExpression(rawArg, proc));
				}
			rtn = new Carbide.Virtual.Expressions.Call(args, exp["name"]);
			}else if (type == "constant") {
			return Carbide.Languages.Calcium.buildSub(exp["name"]);
			}
		return rtn;
	}
}

CarbideCalciumParserLocation = function () {
	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

CarbideCalciumParserError = function () {
	this.code = 0;

	this.found = 0;

	this.expected = 0;

	this.vested = 0;

	this.path = [];

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var offset = arguments[0];
		var line = arguments[1];
		var column = arguments[2];
		this.offset = offset;
		this.line = line;
		this.column = column;
	}

}

CarbideCalciumParserError.prototype.clone = function () {
	if (arguments.length == 0) {
		var clone = new CarbideCalciumParserError(this.offset, this.line, this.column);
		clone.code = this.code;
		clone.found = this.found;
		clone.expected = this.expected;
		clone.vested = this.vested;
		for (var i = 0; i < this.path.length; i++) {
			var current = this.path[i];
			clone.path.push(current.clone());
			}
		return clone;
	}
}

CarbideCalciumParserOutput = function () {
	this.error = null;

	this.hadError = false;

	this.data = {};

	if (arguments.length == 3 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof CarbideCalciumParserError) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'object' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var hadError = arguments[0];
		var error = arguments[1];
		var data = arguments[2];
		this.hadError = hadError;
		this.error = error;
		this.data = data;
	}

}

CarbideCalciumParser = function () {
	this.lastErrors = [];

	this.hadError = false;

	this.parsedChars = 0;

	this.currentInput = "";

	this.data = {};

	this.error = new CarbideCalciumParserError(0, 0, 0);

	this.offset = 0;

	this.line = 1;

	this.column = 0;

	if (arguments.length == 0) {

	}

}

CarbideCalciumParser.parse = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		var parser = new CarbideCalciumParser();
		var output = parser.start(input);
		if (parser.hadError && (parser.error.found == String.fromCharCode(1))) {
			parser.error.found = "End of input";
			}
		var rtn = new CarbideCalciumParserOutput(parser.hadError, parser.error, parser.data["data"]);
		return rtn;
	}
}

CarbideCalciumParser.prototype.assembleCodes = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var codes = arguments[0];
		var rtn = "";
		for (var i = 0; i < codes.length; i++) {
			rtn += String.fromCharCode(codes[i]);
			}
		return rtn;
	}
}

CarbideCalciumParser.prototype.giveError = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'string' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var code = arguments[0];
		var expected = arguments[1];
		var found = arguments[2];
		this.hadError = true;
		this.error.code = code;
		this.error.expected = expected;
		this.error.found = found;
		this.error.offset = this.offset;
		this.error.line = 1;
		this.error.column = 0;
	}
}

CarbideCalciumParser.prototype.start = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		this.currentInput = input;
		input += String.fromCharCode(1);
		this.data["data"] = {};
		var data = this.data["data"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = 0;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (c == 0 - 1) {
				if (currentChar != String.fromCharCode(1)) {
					this.giveError(2, "EOF", currentChar);
					}
				}
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Document(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Document(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["document"] = ruleOutCast0;
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (this.hadError) {
				break;
				}
			}
		for (var i = 0;i < this.error.offset;i++) {
			this.error.column++;
			if (this.currentInput[i] == "\n") {
				this.error.line++;
				this.error.column = 0;
				}
			}
		if (false && this.hadError == false) {
			if (this.offset < input.length - 1) {
				this.giveError(2, "EOF", input[this.offset + 1]);
				}
			}
	}
}

CarbideCalciumParser.prototype.Document = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["exp"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Statement(input, charPos);
				if (ruleOut0.hadError) {
					if (true) {
						var castacexp0 = data["exp"];
						var actionCap0exp = data["exp"];
						dataStore["data"]["expressions"] = actionCap0exp;
						}
					c = 0 - 1;
					charPos--;
					this.offset--;
					if (ruleOut0.error.vested > 1) {
						this.giveError(ruleOut0.error.code, ruleOut0.error.expected, ruleOut0.error.found);
						}
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						var castexp0 = data["exp"];
						castexp0.push(ruleOutCast0);
						if (input.charCodeAt(charPos + 1) != 10) {
							if (true) {
								var castacexp0 = data["exp"];
								var actionCap0exp = data["exp"];
								dataStore["data"]["expressions"] = actionCap0exp;
								}
							c = 0 - 1;
							continue;
							}else{
								charPos++;
							}
						if (true) {
							var castacexp0 = data["exp"];
							var actionCap0exp = data["exp"];
							dataStore["data"]["expressions"] = actionCap0exp;
							}
						c = 0;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Expression = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Function(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Call(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Operation(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast3;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Value(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(1, "Function, Call, Operation, Value", currentChar);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast4;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Call = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["args"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Safe_Name(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast0;
						c = 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				if (currentCode == 40) {
					c = 2;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Expression(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					if (ruleOut3.error.vested > 1) {
						this.giveError(ruleOut3.error.code, ruleOut3.error.expected, ruleOut3.error.found);
						}
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						var castargs3 = data["args"];
						castargs3.push(ruleOutCast3);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 4;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 3;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 41) {
					if (true) {
						var castac5 = data[""];
						var actionCap5name = data["name"];
						var actionCap5args = data["args"];
						dataStore["data"]["type"] = "call";
						dataStore["data"]["name"] = actionCap5name;
						dataStore["data"]["arguments"] = actionCap5args;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Operation = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Value(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Value(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["head"] = ruleOutCast0;
						c = 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Operator(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Operator(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["operator"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Expression(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "Expression(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["tail"] = ruleOutCast4;
						if (true) {
							var castactail4 = data["tail"];
							var actionCap4head = data["head"];
							var actionCap4tail = data["tail"];
							var actionCap4operator = data["operator"];
							dataStore["data"]["type"] = "operation";
							dataStore["data"]["head"] = actionCap4head;
							dataStore["data"]["tail"] = actionCap4tail;
							dataStore["data"]["operator"] = actionCap4operator;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Operator = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 43) {
					data["s"] = "+";
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				if (currentCode == 45) {
					data["s"] = "-";
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						c = 2;
						charPos--;
						this.offset--;
					}
				}else if (c == 2) {
				if (currentCode == 42) {
					data["s"] = "*";
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						c = 3;
						charPos--;
						this.offset--;
					}
				}else if (c == 3) {
				if (currentCode == 47) {
					data["s"] = "/";
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						c = 4;
						charPos--;
						this.offset--;
					}
				}else if (c == 4) {
				var lit4 = [61, 61];
				if (currentCode == lit4[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["s"] = this.assembleCodes(lit4);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 5;
						charPos--;
						this.offset--;
					}
				}else if (c == 5) {
				if (currentCode == 62) {
					data["s"] = ">";
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						c = 6;
						charPos--;
						this.offset--;
					}
				}else if (c == 6) {
				if (currentCode == 60) {
					data["s"] = "<";
					if (true) {
						var castacs0 = data["s"];
						var actionCap0s = data["s"];
						dataStore["data"] = actionCap0s;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						c = 7;
						charPos--;
						this.offset--;
					}
				}else if (c == 7) {
				var lit7 = [33, 61];
				if (currentCode == lit7[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["s"] = this.assembleCodes(lit7);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 8;
						charPos--;
						this.offset--;
					}
				}else if (c == 8) {
				var lit8 = [43, 61];
				if (currentCode == lit8[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["s"] = this.assembleCodes(lit8);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 9;
						charPos--;
						this.offset--;
					}
				}else if (c == 9) {
				var lit9 = [45, 61];
				if (currentCode == lit9[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["s"] = this.assembleCodes(lit9);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 10;
						charPos--;
						this.offset--;
					}
				}else if (c == 10) {
				var lit10 = [42, 61];
				if (currentCode == lit10[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["s"] = this.assembleCodes(lit10);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 11;
						charPos--;
						this.offset--;
					}
				}else if (c == 11) {
				var lit11 = [47, 61];
				if (currentCode == lit11[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						data["s"] = this.assembleCodes(lit11);
						if (true) {
							var castacs0 = data["s"];
							var actionCap0s = data["s"];
							dataStore["data"] = actionCap0s;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "+, -, *, /, ==, >, <, !=, +=, -=, *=, /=", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Statement = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.For(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast1;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.If(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Return(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast3;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Let(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast4;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Call(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast5;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Set(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast6;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Operation(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(1, "For, If, Return, Let, Call, Set, Operation", currentChar);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast7;
						if (true) {
							var castacexp1 = data["exp"];
							var actionCap1exp = data["exp"];
							dataStore["data"] = actionCap1exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Return = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [114, 101, 116, 117, 114, 110];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 6) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast2;
						if (true) {
							var castacexp2 = data["exp"];
							var actionCap2exp = data["exp"];
							dataStore["data"]["type"] = "return";
							dataStore["data"]["value"] = actionCap2exp;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.If = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [105, 102];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Expression(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["check"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Document(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "Document(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast4;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var lit6 = [101, 110, 100];
				if (currentCode == lit6[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						if (true) {
							var castac6 = data[""];
							var actionCap6check = data["check"];
							var actionCap6body = data["body"];
							dataStore["data"]["type"] = "if";
							dataStore["data"]["check"] = actionCap6check;
							dataStore["data"]["body"] = actionCap6body["expressions"];
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit6) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Set = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast1;
						c = 2;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 61) {
					c = 4;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Expression(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "Expression(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["value"] = ruleOutCast5;
						if (true) {
							var castacvalue5 = data["value"];
							var actionCap5name = data["name"];
							var actionCap5value = data["value"];
							dataStore["data"]["type"] = "set";
							dataStore["data"]["name"] = actionCap5name;
							dataStore["data"]["value"] = actionCap5value;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Let = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [108, 101, 116];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 61) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Expression(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["value"] = ruleOutCast6;
						if (true) {
							var castacvalue6 = data["value"];
							var actionCap6name = data["name"];
							var actionCap6value = data["value"];
							dataStore["data"]["type"] = "let";
							dataStore["data"]["name"] = actionCap6name;
							dataStore["data"]["value"] = actionCap6value;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.For = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [102, 111, 114];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Safe_Name(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 61) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, "=", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Value(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Value(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["from"] = ruleOutCast6;
						c = 7;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this._(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						c = 8;
					}
				}else if (c == 8) {
				var lit8 = [97, 115];
				if (currentCode == lit8[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 9;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				var ruleOut10 = this.Expression(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "Expression(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast10;
						c = 11;
						this.error.vested++;
					}
				}else if (c == 11) {
				var ruleOut11 = this._(input, charPos);
				if (ruleOut11.hadError) {
					this.giveError(ruleOut11.error.code, "White space(optional)(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
					}else{
						var ruleOutCast11 = ruleOut11.data["data"];
						charPos = this.offset;
						c = 12;
					}
				}else if (c == 12) {
				var lit12 = [100, 111];
				if (currentCode == lit12[literalChar]) {
					literalChar++;
					if (literalChar == 2) {
						c = 13;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit12) + "", currentChar);
					}
				}else if (c == 13) {
				var ruleOut13 = this._(input, charPos);
				if (ruleOut13.hadError) {
					this.giveError(ruleOut13.error.code, "White space(optional)(" + ruleOut13.error.expected + ")", ruleOut13.error.found);
					}else{
						var ruleOutCast13 = ruleOut13.data["data"];
						charPos = this.offset;
						c = 14;
					}
				}else if (c == 14) {
				var ruleOut14 = this.Document(input, charPos);
				if (ruleOut14.hadError) {
					this.giveError(ruleOut14.error.code, "Document(" + ruleOut14.error.expected + ")", ruleOut14.error.found);
					}else{
						var ruleOutCast14 = ruleOut14.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast14;
						c = 15;
					}
				}else if (c == 15) {
				var ruleOut15 = this._(input, charPos);
				if (ruleOut15.hadError) {
					this.giveError(ruleOut15.error.code, "White space(optional)(" + ruleOut15.error.expected + ")", ruleOut15.error.found);
					}else{
						var ruleOutCast15 = ruleOut15.data["data"];
						charPos = this.offset;
						c = 16;
					}
				}else if (c == 16) {
				var lit16 = [101, 110, 100];
				if (currentCode == lit16[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						if (true) {
							var castac16 = data[""];
							var actionCap16name = data["name"];
							var actionCap16from = data["from"];
							var actionCap16exp = data["exp"];
							var actionCap16body = data["body"];
							dataStore["data"]["type"] = "for";
							dataStore["data"]["name"] = actionCap16name;
							dataStore["data"]["from"] = actionCap16from;
							dataStore["data"]["check"] = actionCap16exp;
							dataStore["data"]["body"] = actionCap16body["expressions"];
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit16) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Constant = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Safe_Name(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["name"] = ruleOutCast0;
						if (true) {
							var castacname0 = data["name"];
							var actionCap0name = data["name"];
							dataStore["data"]["type"] = "constant";
							dataStore["data"]["name"] = actionCap0name;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Literal_Number = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["num"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 46) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["num"] += currentChar;
					if (true) {
						var castacnum0 = data["num"];
						var actionCap0num = data["num"];
						dataStore["data"]["type"] = "literal";
						dataStore["data"]["literalType"] = "number";
						dataStore["data"]["value"] = parseFloat(actionCap0num);
						}
					c = 0;
					this.error.vested++;
					}else{
						var castnum0 = data["num"];
						if (castnum0.length >= 1) {
							if (true) {
								var castacnum0 = data["num"];
								var actionCap0num = data["num"];
								dataStore["data"]["type"] = "literal";
								dataStore["data"]["literalType"] = "number";
								dataStore["data"]["value"] = parseFloat(actionCap0num);
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "0-9, .", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Literal_Boolean = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [116, 114, 117, 101];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacbool0 = data["bool"];
							data["bool"] = true;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 1;
						charPos--;
						this.offset--;
					}
				}else if (c == 1) {
				var lit1 = [102, 97, 108, 115, 101];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						if (true) {
							var castacbool1 = data["bool"];
							data["bool"] = false;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						if (true) {
							var castacbool0 = data["bool"];
							var actionCap0bool = data["bool"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "boolean";
							dataStore["data"]["value"] = actionCap0bool;
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "true, false", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Literal_String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"]["type"] = "literal";
							dataStore["data"]["literalType"] = "string";
							dataStore["data"]["value"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Literal_Array = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["arr"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this.Expression(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					if (ruleOut1.error.vested > 1) {
						this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);
						}
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						var castarr1 = data["arr"];
						castarr1.push(ruleOutCast1);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 2;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				if (currentCode == 93) {
					if (true) {
						var castac3 = data[""];
						var actionCap3arr = data["arr"];
						dataStore["data"]["type"] = "literal";
						dataStore["data"]["literalType"] = "array";
						dataStore["data"]["value"] = actionCap3arr;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Literal_Map_Key = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Safe_Name(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["key"] = ruleOutCast1;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.String(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Safe_Name, String", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["key"] = ruleOutCast2;
						c = 3;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 58) {
					c = 5;
					this.error.vested++;
					}else{
						this.giveError(1, ":", currentChar);
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Expression(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["value"] = ruleOutCast6;
						if (true) {
							var castacvalue6 = data["value"];
							var actionCap6key = data["key"];
							var actionCap6value = data["value"];
							dataStore["data"]["key"] = actionCap6key;
							dataStore["data"]["value"] = actionCap6value;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Literal_Map = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["arr"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Literal_Map_Key(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castarr2 = data["arr"];
						castarr2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 125) {
					if (true) {
						var castac4 = data[""];
						var actionCap4arr = data["arr"];
						dataStore["data"]["type"] = "literal";
						dataStore["data"]["literalType"] = "map";
						dataStore["data"]["value"] = actionCap4arr;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Literal = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Literal_Number(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast0;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Literal_Boolean(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast1;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Literal_String(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast2;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this.Literal_Array(input, charPos);
				if (ruleOut3.hadError) {
					c = 4;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast3;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Literal_Map(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(1, "Literal_Number, Literal_Boolean, Literal_String, Literal_Array, Literal_Map", currentChar);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["l"] = ruleOutCast4;
						if (true) {
							var castacl0 = data["l"];
							var actionCap0l = data["l"];
							dataStore["data"] = actionCap0l;
							dataStore["data"]["start"] = startPos;
							dataStore["data"]["end"] = charPos;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Safe_Name = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["after"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 95) {
					passed0 = true;
					}else if (currentCode == 64) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 97 && currentCode <= 122) {
						passed0 = true;
						}else if (currentCode >= 65 && currentCode <= 90) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["start"] = currentChar;
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "a-z, A-Z, _, @", currentChar);
					}
				}else if (c == 1) {
				var passed1 = false;
				if (currentCode == 95) {
					passed1 = true;
					}else if (currentCode == 46) {
					passed1 = true;
					}
				if (passed1 == false) {
					if (currentCode >= 97 && currentCode <= 122) {
						passed1 = true;
						}else if (currentCode >= 65 && currentCode <= 90) {
						passed1 = true;
						}else if (currentCode >= 48 && currentCode <= 57) {
						passed1 = true;
						}
					}
				if (passed1) {
					data["after"] += currentChar;
					if (true) {
						var castacafter1 = data["after"];
						var actionCap1start = data["start"];
						var actionCap1after = data["after"];
						dataStore["data"] = actionCap1start + actionCap1after;
						}
					c = 1;
					this.error.vested++;
					}else{
						if (true) {
							var castacafter1 = data["after"];
							var actionCap1start = data["start"];
							var actionCap1after = data["after"];
							dataStore["data"] = actionCap1start + actionCap1after;
							}
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.Function(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast0;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.Literal(input, charPos);
				if (ruleOut1.hadError) {
					c = 2;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast1;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Constant(input, charPos);
				if (ruleOut2.hadError) {
					this.giveError(1, "Function, Literal, Constant", currentChar);
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						data["v"] = ruleOutCast2;
						if (true) {
							var castacv0 = data["v"];
							var actionCap0v = data["v"];
							dataStore["data"] = actionCap0v;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Function = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["params"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var lit0 = [102, 117, 110, 99, 116, 105, 111, 110];
				if (currentCode == lit0[literalChar]) {
					literalChar++;
					if (literalChar == 8) {
						c = 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 40) {
					c = 3;
					this.error.vested++;
					}else{
						this.giveError(1, "(", currentChar);
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Safe_Name(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					if (ruleOut4.error.vested > 1) {
						this.giveError(ruleOut4.error.code, ruleOut4.error.expected, ruleOut4.error.found);
						}
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						var castparams4 = data["params"];
						castparams4.push(ruleOutCast4);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 5;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 4;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this._(input, charPos);
				if (ruleOut5.hadError) {
					this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						c = 6;
					}
				}else if (c == 6) {
				if (currentCode == 41) {
					c = 7;
					this.error.vested++;
					}else{
						this.giveError(1, ")", currentChar);
					}
				}else if (c == 7) {
				var ruleOut7 = this._(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						c = 8;
					}
				}else if (c == 8) {
				var ruleOut8 = this.Document(input, charPos);
				if (ruleOut8.hadError) {
					this.giveError(ruleOut8.error.code, "Document(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						data["body"] = ruleOutCast8;
						c = 9;
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				var lit10 = [101, 110, 100];
				if (currentCode == lit10[literalChar]) {
					literalChar++;
					if (literalChar == 3) {
						if (true) {
							var castac10 = data[""];
							var actionCap10params = data["params"];
							var actionCap10body = data["body"];
							dataStore["data"]["type"] = "function";
							dataStore["data"]["parameters"] = actionCap10params;
							dataStore["data"]["body"] = actionCap10body["expressions"];
							}
						c = 0 - 1;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						this.giveError(1, "" + this.assembleCodes(lit10) + "", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype._ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					c = 0;
					this.error.vested++;
					}else{
						c = 0 - 1;
						charPos--;
						this.offset--;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.__ = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["w"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 32) {
					passed0 = true;
					}else if (currentCode == 9) {
					passed0 = true;
					}else if (currentCode == 13) {
					passed0 = true;
					}else if (currentCode == 10) {
					passed0 = true;
					}
				if (passed0 == false) {

					}
				if (passed0) {
					var castw0 = data["w"];
					castw0.push(currentChar);
					c = 0;
					this.error.vested++;
					}else{
						var castw0 = data["w"];
						if (castw0.length >= 1) {
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, " , 	, \r\n, \r\n", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.String = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this.String_Double(input, charPos);
				if (ruleOut0.hadError) {
					c = 1;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast0;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}else if (c == 1) {
				var ruleOut1 = this.String_Single(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(1, "String_Double, String_Single", currentChar);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						data["str"] = ruleOutCast1;
						if (true) {
							var castacstr0 = data["str"];
							var actionCap0str = data["str"];
							dataStore["data"] = actionCap0str;
							}
						c = 0 - 1;
						this.error.vested++;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.String_Double = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 34) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "\"") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 34) {
					if (true) {
						var castac2 = data[""];
						var actionCap2str = data["str"];
						dataStore["data"] = actionCap2str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "\"", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.String_Single = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = "";
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["str"] = "";
		var escaped = false;
		var escapeCodes = {};
		escapeCodes["n"] = "\n";
		escapeCodes["b"] = "";
		escapeCodes["f"] = "";
		escapeCodes["r"] = "\r";
		escapeCodes["t"] = "	";
		escapeCodes["v"] = "";
		escapeCodes["\\"] = "\\";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 39) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}else if (c == 1) {
				var castnacstr1 = data["str"];
				var doCapture = true;
				if (currentChar == "\\") {
					if (escaped == false) {
						escaped = true;
						doCapture = false;
						}
					}
				if (currentChar == "'") {
					if (escaped == false) {
						doCapture = false;
						c = 2;
						charPos--;
						this.offset--;
						}
					escaped = false;
					}else if (escaped && doCapture == true) {
					doCapture = false;
					data["str"] += escapeCodes[currentChar];
					escaped = false;
					}
				if (doCapture) {
					data["str"] += currentChar;
					}
				}else if (c == 2) {
				if (currentCode == 39) {
					if (true) {
						var castac2 = data[""];
						var actionCap2str = data["str"];
						dataStore["data"] = actionCap2str;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "'", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Json = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["keys"] = [];
		var captureRoot1 = {};
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this._(input, charPos);
				if (ruleOut2.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						c = 3;
					}
				}else if (c == 3) {
				var ruleOut3 = this.String(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "String(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						captureRoot1["key"] = ruleOutCast3;
						c = 4;
						this.error.vested++;
					}
				}else if (c == 4) {
				var ruleOut4 = this._(input, charPos);
				if (ruleOut4.hadError) {
					this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						c = 5;
					}
				}else if (c == 5) {
				if (currentCode == 58) {
					c = 6;
					this.error.vested++;
					}else{
						this.giveError(1, ":", currentChar);
					}
				}else if (c == 6) {
				var ruleOut6 = this._(input, charPos);
				if (ruleOut6.hadError) {
					this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						c = 7;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Json_Value(input, charPos);
				if (ruleOut7.hadError) {
					this.giveError(ruleOut7.error.code, "Json_Value(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						captureRoot1["val"] = ruleOutCast7;
						c = 8;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this._(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						var castkeys2 = data["keys"];
						castkeys2.push(captureRoot1);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 9;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						captureRoot1 = {};
						c = 2;
					}
				}else if (c == 9) {
				var ruleOut9 = this._(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						c = 10;
					}
				}else if (c == 10) {
				if (currentCode == 125) {
					if (true) {
						var castac10 = data[""];
						var actionCap10keys = data["keys"];
						for (var i = 0; i < actionCap10keys.length; i++) {
							var k = actionCap10keys[i];
							var key = k["key"];
							dataStore["data"][key] = k["val"];
							}
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Json_Array = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["vals"] = [];
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				var ruleOut2 = this.Json_Value(input, charPos);
				if (ruleOut2.hadError) {
					c = 3;
					charPos--;
					this.offset--;
					if (ruleOut2.error.vested > 1) {
						this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);
						}
					}else{
						var ruleOutCast2 = ruleOut2.data["data"];
						charPos = this.offset;
						var castvals2 = data["vals"];
						castvals2.push(ruleOutCast2);
						if (input.charCodeAt(charPos + 1) != 44) {
							c = 3;
							continue;
							}else{
								charPos++;
							}
						if (charPos == input.length - 1) {
							this.giveError(2, "EOF", currentChar);
							}
						c = 2;
						this.error.vested++;
					}
				}else if (c == 3) {
				var ruleOut3 = this._(input, charPos);
				if (ruleOut3.hadError) {
					this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
					}else{
						var ruleOutCast3 = ruleOut3.data["data"];
						charPos = this.offset;
						c = 4;
					}
				}else if (c == 4) {
				if (currentCode == 93) {
					if (true) {
						var castac4 = data[""];
						var actionCap4vals = data["vals"];
						dataStore["data"] = actionCap4vals;
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Json_EmptyArray = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = [];
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 91) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "[", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 93) {
					if (true) {
						var castac2 = data[""];
						data = [];
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "]", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Json_EmptyMap = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = {};
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				if (currentCode == 123) {
					c = 1;
					this.error.vested++;
					}else{
						this.giveError(1, "{", currentChar);
					}
				}else if (c == 1) {
				var ruleOut1 = this._(input, charPos);
				if (ruleOut1.hadError) {
					this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
					}else{
						var ruleOutCast1 = ruleOut1.data["data"];
						charPos = this.offset;
						c = 2;
					}
				}else if (c == 2) {
				if (currentCode == 125) {
					if (true) {
						var castac2 = data[""];
						data = {};
						}
					c = 0 - 1;
					this.error.vested++;
					}else{
						this.giveError(1, "}", currentChar);
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Json_Value = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = 0;
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var ruleOut0 = this._(input, charPos);
				if (ruleOut0.hadError) {
					this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
					}else{
						var ruleOutCast0 = ruleOut0.data["data"];
						charPos = this.offset;
						c = 1;
					}
				}else if (c == 1) {
				var lit1 = [110, 117, 108, 108];
				if (currentCode == lit1[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacexp1 = data["exp"];
							data["exp"] = null;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 2;
						charPos--;
						this.offset--;
					}
				}else if (c == 2) {
				var lit2 = [116, 114, 117, 101];
				if (currentCode == lit2[literalChar]) {
					literalChar++;
					if (literalChar == 4) {
						if (true) {
							var castacexp2 = data["exp"];
							data["exp"] = true;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 3;
						charPos--;
						this.offset--;
					}
				}else if (c == 3) {
				var lit3 = [102, 97, 108, 115, 101];
				if (currentCode == lit3[literalChar]) {
					literalChar++;
					if (literalChar == 5) {
						if (true) {
							var castacexp3 = data["exp"];
							data["exp"] = false;
							}
						c = 10;
						literalChar = 0;
						}
					this.error.vested++;
					}else{
						c = 4;
						charPos--;
						this.offset--;
					}
				}else if (c == 4) {
				var ruleOut4 = this.Json_EmptyArray(input, charPos);
				if (ruleOut4.hadError) {
					c = 5;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast4 = ruleOut4.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast4;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 5) {
				var ruleOut5 = this.Json_EmptyMap(input, charPos);
				if (ruleOut5.hadError) {
					c = 6;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast5 = ruleOut5.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast5;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 6) {
				var ruleOut6 = this.Json_Array(input, charPos);
				if (ruleOut6.hadError) {
					c = 7;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast6 = ruleOut6.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast6;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 7) {
				var ruleOut7 = this.Json(input, charPos);
				if (ruleOut7.hadError) {
					c = 8;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast7 = ruleOut7.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast7;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 8) {
				var ruleOut8 = this.String(input, charPos);
				if (ruleOut8.hadError) {
					c = 9;
					charPos--;
					this.offset--;
					}else{
						var ruleOutCast8 = ruleOut8.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast8;
						c = 10;
						this.error.vested++;
					}
				}else if (c == 9) {
				var ruleOut9 = this.Json_Number(input, charPos);
				if (ruleOut9.hadError) {
					this.giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", currentChar);
					}else{
						var ruleOutCast9 = ruleOut9.data["data"];
						charPos = this.offset;
						data["exp"] = ruleOutCast9;
						c = 10;
					}
				}else if (c == 10) {
				var ruleOut10 = this._(input, charPos);
				if (ruleOut10.hadError) {
					this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
					}else{
						var ruleOutCast10 = ruleOut10.data["data"];
						charPos = this.offset;
						if (true) {
							var castac10 = data[""];
							var actionCap10exp = data["exp"];
							dataStore["data"] = actionCap10exp;
							}
						c = 0 - 1;
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

CarbideCalciumParser.prototype.Json_Number = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var input = arguments[0];
		var startPos = arguments[1];
		var oldVest = this.error.vested;
		var dataStore = {};
		dataStore["data"] = 0;
		dataStore["temp"] = {};
		var data = dataStore["temp"];
		var c = 0;
		data["nums"] = "";
		var literalChar = 0;
		for (var charPos = startPos;charPos < input.length;charPos++) {
			var currentChar = input[charPos];
			var currentCode = input.charCodeAt(charPos);
			if (currentCode == 10) {
				this.line++;
				this.column = 0;
				}
			if (c == 0) {
				var passed0 = false;
				if (currentCode == 46) {
					passed0 = true;
					}else if (currentCode == 45) {
					passed0 = true;
					}
				if (passed0 == false) {
					if (currentCode >= 48 && currentCode <= 57) {
						passed0 = true;
						}
					}
				if (passed0) {
					data["nums"] += currentChar;
					if (true) {
						var castacnums0 = data["nums"];
						var actionCap0nums = data["nums"];
						dataStore["data"] = parseInt(actionCap0nums);
						}
					c = 0;
					this.error.vested++;
					}else{
						var castnums0 = data["nums"];
						if (castnums0.length >= 1) {
							if (true) {
								var castacnums0 = data["nums"];
								var actionCap0nums = data["nums"];
								dataStore["data"] = parseInt(actionCap0nums);
								}
							c = 0 - 1;
							charPos--;
							this.offset--;
							}else{
								this.giveError(1, "0-9, ., -", currentChar);
							}
					}
				}
			this.offset++;
			this.column++;
			if (c == 0 - 1) {
				this.offset = charPos;
				break;
				}
			if (this.hadError) {
				break;
				}
			}
		var parseOutput = new CarbideCalciumParserOutput(this.hadError, this.error.clone(), dataStore);
		parseOutput.error.vested = this.error.vested - oldVest;
		this.error.vested = oldVest;
		this.hadError = false;
		return parseOutput;
	}
}

Carbide.Languages.Carbon = function () {


}

Carbide.Languages.Carbon.virtualize = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var input = arguments[0];
		var po = CarboniteCarbonParser.parse("Block", "{" + input + "}");
		var ast = po.data;
		var root = null;
		var proc = new Carbide.Virtual.Processor(root);
		if (po.hadError) {
			proc.runtimeError("Found " + po.error.found + " expected " + po.error.expected, "?", po.error.offset, po.error.offset + 1);
			}else{
				var exps = ast["data"]["code"];
				root = Carbide.Languages.Carbon.buildBlock(proc, exps, root);
				root.topBlock = root;
			}
		return proc;
	}
}

Carbide.Languages.Carbon.virtualizeIntoProcessor = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'object' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Processor) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var label = arguments[0];
		var ast = arguments[1];
		var processor = arguments[2];
		var root = null;
		var exps = ast;
		root = Carbide.Languages.Carbon.buildBlock(processor, exps, root);
		root.label = label;
		processor.addBlock(root);
		return root;
	}
else 	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Processor) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var label = arguments[0];
		var input = arguments[1];
		var processor = arguments[2];
		var po = CarboniteCarbonParser.parse("Block", "{" + input + "}");
		if (po.hadError) {
			processor.runtimeError("Found " + po.error.found + " expected " + po.error.expected, label, po.error.offset, po.error.offset + 1);
			throw new Error("Error in script parser");
			}
		var ast = po.data;
		var root = null;
		var exps = ast["data"]["code"];
		root = Carbide.Languages.Carbon.buildBlock(processor, exps, root);
		root.label = label;
		processor.addBlock(root);
		return root;
	}
}

Carbide.Languages.Carbon.buildBlock = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var code = arguments[1];
		var parentBlock = arguments[2];
		var rtn = new Carbide.Virtual.Block(parent);
		if (parentBlock == null) {
			rtn.topBlock = rtn;
			parentBlock = rtn;
			}
		if (parent.root == null) {
			parent.root = rtn;
			parent.root.scope = parent.scope;
			}
		for (var i = 0; i < code.length; i++) {
			var exp = code[i];
			var state = null;
			var type = exp["type"];
			if (type == "define") {
				state = new Carbide.Virtual.Statements.Var(rtn, exp["name"], Carbide.Languages.Carbon.buildExpression(exp["value"], parent, parentBlock));
				}else if (type == "if") {
				var exps = exp["body"]["code"];
				var checks = [];
				checks.push(Carbide.Languages.Carbon.buildExpression(exp["check"]["expression"], parent, parentBlock));
				state = new Carbide.Virtual.Statements.If(rtn, checks, Carbide.Languages.Carbon.buildBlock(parent, exps, parentBlock));
				var castState = state;
				castState.code.topBlock = parentBlock.topBlock;
				}else if (type == "for") {
				var exps = exp["body"]["code"];
				var refer = new Carbide.Virtual.Expressions.Reference(exp["define"]["name"]);
				var one = 1;
				var numb = Carbide.Languages.Carbon.buildExpression(exp["define"]["value"], parent, parentBlock);
				var operation = Carbide.Languages.Carbon.buildExpression(exp["iterate"], parent, parentBlock);
				state = new Carbide.Virtual.Statements.For(rtn, exp["define"]["name"], numb, Carbide.Languages.Carbon.buildExpression(exp["check"], parent, parentBlock), operation, Carbide.Languages.Carbon.buildBlock(parent, exps, parentBlock));
				var castState = state;
				castState.code.topBlock = parentBlock.topBlock;
				}else if (type == "return") {
				state = new Carbide.Virtual.Statements.Return(rtn, Carbide.Languages.Carbon.buildExpression(exp["expression"], parent, parentBlock));
				}else if (type == "expression") {
				state = new Carbide.Virtual.Statements.Lost(rtn, Carbide.Languages.Carbon.buildExpression(exp, parent, parentBlock));
				}
			state.scope = new Carbide.Virtual.Scope(parent);
			rtn.statements.push(state);
			}
		return rtn;
	}
}

Carbide.Languages.Carbon.buildSub = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		var splits = name.split(".");
		var rtn = new Carbide.Virtual.Expressions.Reference(splits[0]);
		if (splits.length > 1) {
			for (var s = 1;s < splits.length;s++) {
				var sub = new Carbide.Virtual.Sub(null);
				sub.type = 1;
				sub.property = splits[s];
				rtn.subs.push(sub);
				}
			}
		return rtn;
	}
}

Carbide.Languages.Carbon.buildValue = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var lit = arguments[0];
		var parent = arguments[1];
		var parentBlock = arguments[2];
		var val = null;
		var litType = lit["literalType"];
		if (litType == "number") {
			var rVal = lit["value"];
			val = Carbide.Virtual.Values.Number.create(rVal);
			}else if (litType == "boolean") {
			var rVal = lit["value"];
			val = Carbide.Virtual.Values.Bool.create(rVal);
			}else if (litType == "string") {
			var rVal = lit["value"];
			val = Carbide.Virtual.Values.String.create(rVal);
			}else if (litType == "map") {
			val = Carbide.Virtual.Values.Map.create({});
			}else if (litType == "array") {
			val = Carbide.Virtual.Values.Array.create([]);
			}else if (litType == "function") {
			var args = [];
			var tArgs = lit["parameters"];
			for (var i = 0; i < tArgs.length; i++) {
				args.push(tArgs[i]["name"]);
				}
			val = Carbide.Virtual.Values.Function.create(args, Carbide.Languages.Carbon.buildBlock(parent, lit["body"]["code"], parentBlock));
			var castVal = val;
			castVal.code.topBlock = parentBlock.topBlock;
			}
		return val;
	}
}

Carbide.Languages.Carbon.buildExpression = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var exp = arguments[0];
		var proc = arguments[1];
		var parentBlock = arguments[2];
		var type = exp["type"];
		if ("terms" in exp) {

			}else{
				var rtn = null;
				if (type == "literal") {
					var val = Carbide.Languages.Carbon.buildValue(exp, proc, parentBlock);
					rtn = new Carbide.Virtual.Expressions.Raw(val);
					return rtn;
					}else if (type == "constant") {
					var constantName = exp["name"];
					var splits = constantName.split(".");
					rtn = new Carbide.Virtual.Expressions.Reference(splits[0]);
					for (var i = 1;i < splits.length;i++) {
						var sub = new Carbide.Virtual.Sub(null);
						sub.type = 1;
						sub.property = splits[i];
						rtn.subs.push(sub);
						}
					var appendix = exp["appendix"];
					for (var i = 0; i < appendix.length; i++) {
						var append = appendix[i];
						if (append["type"] == "dot") {
							var sub = new Carbide.Virtual.Sub(null);
							sub.type = 1;
							sub.property = append["name"];
							if (appendix.length > i + 1) {
								var nextAppend = appendix[i + 1];
								if (nextAppend["type"] == "call") {
									sub.type = 2;
									for (var a in nextAppend["expression"]) {
										var appExp = nextAppend["expression"][a];
										sub.arguments.push(Carbide.Languages.Carbon.buildExpression(appExp, proc, parentBlock));
										}
									}
								}
							rtn.subs.push(sub);
							}else if ((append["type"] == "call") && (i == 0)) {
							var sub = null;
							var doPush = true;
							if ((rtn.subs.length > 0) && (rtn.subs[rtn.subs.length - 1].type == 1)) {
								sub = rtn.subs[rtn.subs.length - 1];
								doPush = false;
								}else{
									sub = new Carbide.Virtual.Sub(null);
								}
							sub.type = 2;
							for (var a in append["expression"]) {
								var appExp = append["expression"][a];
								sub.arguments.push(Carbide.Languages.Carbon.buildExpression(appExp, proc, parentBlock));
								}
							if (doPush) {
								rtn.subs.push(sub);
								}
							}else if (append["type"] == "index") {
							var sub = new Carbide.Virtual.Sub(null);
							sub.type = 3;
							sub.arguments.push(Carbide.Languages.Carbon.buildExpression(append["expression"], proc, parentBlock));
							rtn.subs.push(sub);
							}else{
								var sub = new Carbide.Virtual.Sub(null);
								sub.type = 2;
								for (var a in append["expression"]) {
									var appExp = append["expression"][a];
									sub.arguments.push(Carbide.Languages.Carbon.buildExpression(appExp, proc, parentBlock));
									}
								rtn.subs.push(sub);
							}
						}
					return rtn;
					}else if (type == "function") {
					var args = [];
					var tArgs = exp["parameters"];
					for (var i = 0; i < tArgs.length; i++) {
						args.push(tArgs[i]["name"]);
						}
					var val = Carbide.Virtual.Values.Function.create(args, Carbide.Languages.Carbon.buildBlock(proc, exp["body"]["code"], parentBlock));
					rtn = new Carbide.Virtual.Expressions.Raw(val);
					return rtn;
					}
			}
		var terms = exp["terms"];
		var rtn = null;
		if (terms.length == 1) {
			if ("operator" in terms[0]) {
				rtn = new Carbide.Virtual.Expressions.Operation(terms[0]["operator"], Carbide.Languages.Carbon.buildExpression(terms[0]["term"], proc, parentBlock), null);
				}else{
					rtn = Carbide.Languages.Carbon.buildExpression(terms[0], proc, parentBlock);
				}
			}else{
				var head = terms[0];
				var tail = terms[1];
				var tailExp = null;
				if ("operator" in tail) {
					terms.shift();
					tailExp = Carbide.Languages.Carbon.buildExpression(exp, proc, parentBlock);
					}else{
						tailExp = Carbide.Languages.Carbon.buildExpression(tail, proc, parentBlock);
					}
				rtn = new Carbide.Virtual.Expressions.Operation(head["operator"], Carbide.Languages.Carbon.buildExpression(head["term"], proc, parentBlock), tailExp);
			}
		return rtn;
	}
}

Carbide.Virtual.Map = function () {
	this.virtual = 0 - 1;

	this.realStart = 0 - 1;

	this.realEnd = 0 - 1;

	if (arguments.length == 3 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var virtual = arguments[0];
		var realStart = arguments[1];
		var realEnd = arguments[2];
		this.virtual = virtual;
		this.realStart = realStart;
		this.realEnd = realEnd;
	}

}

Carbide.Virtual.Block = function () {
	this.data = [];

	this.statements = [];

	this.parent = null;

	this.scope = null;

	this.label = null;

	this.topBlock = null;

	this.canOutput = false;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
		this.scope = new Carbide.Virtual.Scope(parent);
	}

}

Carbide.Virtual.Block.prototype.buildFromAst = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var data = arguments[0];
		this.data = data;
		this.build();
	}
}

Carbide.Virtual.Block.prototype.build = function () {
	if (arguments.length == 0) {
		var data = this.data;
		for (var i = 0; i < data.length; i++) {
			var statementData = data[i];
			var state = null;
			state.scope = new Carbide.Virtual.Scope(this.parent);
			state.scope.setParentScope(this.scope);
			state.build();
			this.statements.push(state);
			}
	}
}

Carbide.Virtual.Block.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		for (var i = 0; i < this.statements.length; i++) {
			var state = this.statements[i];
			state.scope.setParentScope(this.scope);
			state.run(scope);
			}
	}
}

Carbide.Virtual.Block.prototype.clear = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.statements.length; i++) {
			var state = this.statements[i];
			state.clear();
			}
	}
}

Carbide.Virtual.Block.prototype.output = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var data = arguments[0];
		var start = arguments[1];
		var end = arguments[2];

	}
}

Carbide.Virtual.Statement = function () {
	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;


}

Carbide.Virtual.Statement.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statement.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];

	}
}

Carbide.Virtual.Statement.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Define = function () {
	this.name = "";

	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Expression || (arguments[2] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[2] instanceof Carbide.Virtual.Expressions.Call) || (arguments[2] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[2] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var name = arguments[1];
		var value = arguments[2];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.name = name;
		this.value = value;
		this.value.parent = this;
		this.value.setParent();
	}

}

Carbide.Virtual.Statements.Define.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Define.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		var variable = new Carbide.Virtual.Variable(this.name, this.value.run(scope));
		this.topParent.scope.addVariable(variable);
	}
}

Carbide.Virtual.Statements.Define.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Function = function () {
	this.arguments = [];

	this.name = "";

	this.code = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (arguments[2] instanceof Array || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Block) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var parent = arguments[0];
		var name = arguments[1];
		var ___arguments = arguments[2];
		var code = arguments[3];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.name = name;
		this.arguments = ___arguments;
		this.code = code;
		this.scope = new Carbide.Virtual.Scope(parent.parent);
		this.code.scope = this.scope;
		this.topParent.parent.addFunction(this);
	}

}

Carbide.Virtual.Statements.Function.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		if (args.length != this.arguments.length) {
			var location = "anon";
			if (this.code.topBlock != null) {
				location = this.code.topBlock.label;
				}
			this.topParent.parent.runtimeError("Call to function '" + this.name + "' invalid argument count " + args.length, location, 0, 0);
			}
		this.clear();
		var funcScope = new Carbide.Virtual.Scope(this.parent.parent);
		for (var i = 0; i < this.arguments.length; i++) {
			var value = args[i];
			var name = this.arguments[i];
			funcScope.addVariable(new Carbide.Virtual.Variable(name, value.run(scope)));
			}
		funcScope.setParentScope(scope);
		this.code.run(funcScope);
		var rtn = funcScope.search("functionReturn");
		if (rtn == null) {
			var retu = Carbide.Virtual.Values.Null.create();
			return retu;
			}else{
				return rtn.value;
			}
	}
}

Carbide.Virtual.Statements.Function.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbide.Virtual.Statements.Function.prototype.run = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Function.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.If = function () {
	this.checks = [];

	this.code = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var checks = arguments[1];
		var code = arguments[2];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.checks = checks;
		for (var i = 0; i < this.checks.length; i++) {
			var check = this.checks[i];
			check.parent = this;
			check.setParent();
			}
		this.code = code;
	}

}

Carbide.Virtual.Statements.If.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		var ok = true;
		for (var i = 0; i < this.checks.length; i++) {
			var check = this.checks[i];
			var v = check.run(scope);
			if (v.value == false) {
				ok = false;
				}
			}
		if (ok) {
			this.code.run(scope);
			}
	}
}

Carbide.Virtual.Statements.If.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbide.Virtual.Statements.If.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.For = function () {
	this.itName = "";

	this.initial = null;

	this.to = null;

	this.iterate = null;

	this.code = null;

	this.in = false;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	if (arguments.length == 6 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Expression || (arguments[2] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[2] instanceof Carbide.Virtual.Expressions.Call) || (arguments[2] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[2] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Expression || (arguments[3] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[3] instanceof Carbide.Virtual.Expressions.Call) || (arguments[3] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[3] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[3] == 'undefined' || arguments[3] === null) && ((arguments[4] instanceof Carbide.Virtual.Expression || (arguments[4] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[4] instanceof Carbide.Virtual.Expressions.Call) || (arguments[4] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[4] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[4] == 'undefined' || arguments[4] === null) && ((arguments[5] instanceof Carbide.Virtual.Block) || typeof arguments[5] == 'undefined' || arguments[5] === null)) {
		var parent = arguments[0];
		var name = arguments[1];
		var initial = arguments[2];
		var suchThat = arguments[3];
		var iterate = arguments[4];
		var code = arguments[5];
		this.parent = parent;
		this.itName = name;
		this.topParent = this.parent.parent.root;
		this.initial = initial;
		this.initial.parent = this;
		this.initial.setParent();
		this.to = suchThat;
		this.to.parent = this;
		this.to.setParent();
		this.iterate = iterate;
		this.iterate.parent = this;
		this.iterate.setParent();
		this.code = code;
	}

}

Carbide.Virtual.Statements.For.In = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Expression || (arguments[2] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[2] instanceof Carbide.Virtual.Expressions.Call) || (arguments[2] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[2] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Block) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var parent = arguments[0];
		var name = arguments[1];
		var what = arguments[2];
		var code = arguments[3];
		var emp = null;
		var rtn = new Carbide.Virtual.Statements.For(parent, name, emp, emp, emp, code);
		rtn.to = what;
		this.to.parent = this;
		rtn.in = true;
		rtn.code = code;
		rtn.code.scope = rtn.scope;
		return rtn;
	}
}

Carbide.Virtual.Statements.For.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		if (this.in) {
			var to = this.to.run(scope);
			var it = new Carbide.Virtual.Variable(this.itName, Carbide.Virtual.Values.Null.create());
			var itKey = new Carbide.Virtual.Variable(this.itName, Carbide.Virtual.Values.Null.create());
			scope.addVariable(it);
			to.iterate(itKey, it, this.code, scope);
			}else{
				var it = new Carbide.Virtual.Variable(this.itName, this.initial.run(scope));
				scope.addVariable(it);
				var start = it.value.value;
				var to = this.to.run(scope);
				while (to.value) {
					this.code.run(scope);
					this.iterate.run(scope);
					to = this.to.run(scope);
					}
			}
	}
}

Carbide.Virtual.Statements.For.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbide.Virtual.Statements.For.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Raw = function () {
	this.code = "";

	this.doOuput = false;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;


}

Carbide.Virtual.Statements.Raw.prototype.build = function () {
	if (arguments.length == 0) {
		this.code = this.data["content"];
		if (this.code == "\n") {
			this.doOuput = true;
			}
	}
}

Carbide.Virtual.Statements.Raw.prototype.run = function () {
	if (arguments.length == 0) {
		if (this.doOuput == false) {
			var end = this.data["offset"];
			this.parent.output(this.code, end - this.code.length, end);
			}
	}
}

Carbide.Virtual.Statements.Raw.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Lost = function () {
	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Expression || (arguments[1] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[1] instanceof Carbide.Virtual.Expressions.Call) || (arguments[1] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[1] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var exp = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.value = exp;
		this.value.parent = this;
		this.value.setParent();
	}

}

Carbide.Virtual.Statements.Lost.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		var val = this.value.run(scope);
	}
}

Carbide.Virtual.Statements.Lost.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Lost.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Var = function () {
	this.name = "";

	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Expression || (arguments[2] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[2] instanceof Carbide.Virtual.Expressions.Call) || (arguments[2] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[2] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var parent = arguments[0];
		var name = arguments[1];
		var value = arguments[2];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.name = name;
		this.value = value;
		this.value.parent = this;
		this.value.setParent();
	}

}

Carbide.Virtual.Statements.Var.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		var variable = new Carbide.Virtual.Variable(this.name, this.value.run(scope));
		scope.setVariable(variable);
	}
}

Carbide.Virtual.Statements.Var.prototype.clear = function () {
	if (arguments.length == 0) {
		this.build();
	}
}

Carbide.Virtual.Statements.Var.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Return = function () {
	this.value = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;

	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Expression || (arguments[1] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[1] instanceof Carbide.Virtual.Expressions.Call) || (arguments[1] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[1] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var parent = arguments[0];
		var exp = arguments[1];
		this.parent = parent;
		this.topParent = this.parent.parent.root;
		this.value = exp;
		this.value.parent = this;
		this.value.setParent();
	}

}

Carbide.Virtual.Statements.Return.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		var name = "functionReturn";
		var variable = new Carbide.Virtual.Variable(name, this.value.run(scope));
		scope.addVariable(variable);
	}
}

Carbide.Virtual.Statements.Return.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Return.prototype.clear = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Statements.Out = function () {
	this.code = null;

	this.data = {};

	this.parent = null;

	this.topParent = null;

	this.scope = null;


}

Carbide.Virtual.Statements.Out.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		this.code.run(scope);
	}
}

Carbide.Virtual.Statements.Out.prototype.clear = function () {
	if (arguments.length == 0) {
		this.scope.clear();
		this.code.clear();
	}
}

Carbide.Virtual.Statements.Out.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Processor = function () {
	this.root = null;

	this.scripts = [];

	this.scope = null;

	this.interface = null;

	this.notices = [];

	this.hadError = false;

	this.heap = [];

	this.heapIndex = 0;

	this.functionScope = [];

	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var root = arguments[0];
		this.root = root;
		var emp = null;
		this.scope = new Carbide.Virtual.Scope(emp);
		this.setVar("typeOf", function (args) {
			if (args.length > 0) {
				return Carbide.Virtual.Values.String.create(args[0].type);
				}
			});
	}

}

Carbide.Virtual.Processor.prototype.findOnHeap = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var id = arguments[0];
		for (var i = 0; i < this.heap.length; i++) {
			var data = this.heap[i];
			if (data.id == id) {
				return data;
				}
			}
		return null;
	}
}

Carbide.Virtual.Processor.prototype.setValue = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		this.scope.setVariable(new Carbide.Virtual.Variable(name, value));
	}
}

Carbide.Virtual.Processor.prototype.setVar = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		var cast = value;
		this.setValue(name, Carbide.Virtual.Values.Number.create(cast));
	}
else 	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		this.setValue(name, Carbide.Virtual.Values.Number.create(value));
	}
else 	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'boolean' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		this.setValue(name, Carbide.Virtual.Values.Bool.create(value));
	}
else 	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		this.setValue(name, Carbide.Virtual.Values.String.create(value));
	}
else 	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'function' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		this.setValue(name, Carbide.Virtual.Values.Function.create(value));
	}
}

Carbide.Virtual.Processor.prototype.build = function () {
	if (arguments.length == 0) {
		this.root.scope = this.scope;
		this.root.canOutput = true;
		this.root.build();
	}
}

Carbide.Virtual.Processor.prototype.run = function () {
	if (arguments.length == 0) {
		try {;
		if (this.root != null) {
			this.root.run(this.scope);
			}
		for (var i = 0; i < this.scripts.length; i++) {
			var script = this.scripts[i];
			script.run(this.scope);
			}
		} catch(err) {};
	}
}

Carbide.Virtual.Processor.prototype.addFunction = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Statements.Function) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var func = arguments[0];
		this.functionScope.push(func);
	}
}

Carbide.Virtual.Processor.prototype.addBlock = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Block) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var block = arguments[0];
		this.scripts.push(block);
	}
}

Carbide.Virtual.Processor.prototype.searchFunction = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.functionScope.length; i++) {
			var func = this.functionScope[i];
			if (func.name == name) {
				return func;
				}
			}
		var emp = null;
		return emp;
	}
}

Carbide.Virtual.Processor.prototype.runtimeError = function () {
	if (arguments.length == 4 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'number' || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var message = arguments[0];
		var location = arguments[1];
		var start = arguments[2];
		var end = arguments[3];
		this.hadError = true;
		this.notices.push(new Carbide.Notice(message, location, start, end, 4));
		throw new Error("Error in Carbide.Virtual.Runtime");
	}
}

Carbide.Virtual.Interface = function () {

	if (arguments.length == 0) {

	}

}

Carbide.Virtual.Interface.prototype.call = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var ___arguments = arguments[1];

	}
}

Carbide.Virtual.Value = function () {
	this.type = "null";

	this.value = 0;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Value.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Value.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

Carbide.Virtual.Value.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Value.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Value.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Value.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Value.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Value.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Value.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Value.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Value.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Value.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Value.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

Carbide.Virtual.Values.String = function () {
	this.type = "string";

	this.value = "";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.String.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbide.Virtual.Values.String.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.String.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.String(m);
		value.value = val;
		return value;
	}
}

Carbide.Virtual.Values.String.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i in this.value) {
			vKey.value.value = i;
			v.value = Carbide.Virtual.Values.String.create(this.value[i]);
			code.run(scope);
			}
	}
}

Carbide.Virtual.Values.String.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}
	}
}

Carbide.Virtual.Values.String.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "replace") {
			if (input.length == 2) {
				var what = input[0].value;
				var replace = input[1].value;
				return Carbide.Virtual.Values.String.create(this.value.replace(new RegExp(what.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'), 'g'), replace));
				}
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.String.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Values.String) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		if (operator == "=") {
			this.value = value.value;
			v = Carbide.Virtual.Values.Null.create();
			}else if (operator == "==") {
			v = Carbide.Virtual.Values.Bool.create(this.value == value.value);
			}else if (operator == "!=") {
			v = Carbide.Virtual.Values.Bool.create(this.value != value.value);
			}else if (operator == "+") {
			v = Carbide.Virtual.Values.String.create(this.value + value.value);
			}else if (operator == "+=") {
			this.value += value.value;
			v = Carbide.Virtual.Values.Null.create();
			}
		return v;
	}
}

Carbide.Virtual.Values.String.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return Carbide.Virtual.Values.String.create(this.value);
	}
}

Carbide.Virtual.Values.String.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.String.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.String.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.String.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.String.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.Number = function () {
	this.type = "number";

	this.value = 0;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.Number.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
		if (raw["negative"] != null) {
			var zero = 0;
			this.value = zero - this.value;
			}
	}
}

Carbide.Virtual.Values.Number.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.Number.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var scope = arguments[2];
		if (name == "toString") {
			return Carbide.Virtual.Values.String.create(this.value.toString());
			}
	}
}

Carbide.Virtual.Values.Number.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Values.Number) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		if (operator == "=") {
			this.value = value.value;
			v = Carbide.Virtual.Values.Null.create();
			}else if (operator == "==") {
			v = Carbide.Virtual.Values.Bool.create(this.value == value.value);
			}else if (operator == "!=") {
			v = Carbide.Virtual.Values.Bool.create(this.value != value.value);
			}else if (operator == "+") {
			v = Carbide.Virtual.Values.Number.create(this.value + value.value);
			}else if (operator == "-") {
			v = Carbide.Virtual.Values.Number.create(this.value - value.value);
			}else if (operator == "+=") {
			this.value+=value.value;
			v = Carbide.Virtual.Values.Null.create();
			}else if (operator == "*=") {
			this.value = this.value * value.value;
			v = Carbide.Virtual.Values.Null.create();
			}else if (operator == "-=") {
			this.value-=value.value;
			v = Carbide.Virtual.Values.Null.create();
			}else if (operator == "*") {
			v = Carbide.Virtual.Values.Number.create(this.value * value.value);
			}else if (operator == "/") {
			v = Carbide.Virtual.Values.Number.create(this.value / value.value);
			}else if (operator == ">") {
			v = Carbide.Virtual.Values.Bool.create(this.value > value.value);
			}else if (operator == ">=") {
			v = Carbide.Virtual.Values.Bool.create(this.value >= value.value);
			}else if (operator == "<") {
			v = Carbide.Virtual.Values.Bool.create(this.value < value.value);
			}else if (operator == "<=") {
			v = Carbide.Virtual.Values.Bool.create(this.value <= value.value);
			}
		return v;
	}
}

Carbide.Virtual.Values.Number.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var number = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.Number(m);
		value.value = number;
		return value;
	}
}

Carbide.Virtual.Values.Number.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return Carbide.Virtual.Values.Number.create(this.value);
	}
}

Carbide.Virtual.Values.Number.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.Number.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Number.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.Number.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Number.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Number.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.Number.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

Carbide.Virtual.Values.Array = function () {
	this.type = "array";

	this.value = [];

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.Array.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.Array.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Array.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.value[ind.value];
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var found = this.value.push(ind);
			}else if (name == "pop") {
			this.value.pop();
			}else if (name == "join") {
			var joins = "";
			var glue = input[0].value;
			for (var i = 0; i < this.value.length; i++) {
				var cast = this.value[i].value;
				if (i != this.value.length - 1) {
					joins += cast + glue;
					}else{
						joins += cast;
					}
				}
			return Carbide.Virtual.Values.String.create(joins);
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Array.create = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.Array(m);
		value.value = val;
		return value;
	}
}

Carbide.Virtual.Values.Array.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.value[i];
			code.run(scope);
			}
	}
}

Carbide.Virtual.Values.Array.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return Carbide.Virtual.Values.Array.create([]);
	}
}

Carbide.Virtual.Values.Array.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.Array.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Array.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Values.Array.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.Array.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Array.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.Array.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Map = function () {
	this.type = "map";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.Map.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbide.Virtual.Values.Map.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.Map.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.Map(m);
		value.value = val;
		return value;
	}
}

Carbide.Virtual.Values.Map.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var key in this.value) {
			var cast = vKey.value;
			cast.value = key;
			v.value = this.value[key];
			code.run(scope);
			}
	}
}

Carbide.Virtual.Values.Map.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		var f = this.value[name];
		if (f != null) {
			var rtn = this.value[name];
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Map.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "set") {
			var key = input[0];
			var ind = input[1];
			this.value[key.value] = ind;
			}else if (name == "index") {
			var ind = input[0];
			if (this.value[ind.value] != null) {
				var found = this.value[ind.value];
				return found;
				}
			}else{
				var ind = input[0];
				var found = this.value[name];
				return found.call(input, scope, this);
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Map.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

Carbide.Virtual.Values.Map.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return Carbide.Virtual.Values.Map.create({});
	}
}

Carbide.Virtual.Values.Map.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.Map.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Map.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.Map.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.Map.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Function = function () {
	this.type = "function";

	this.value = null;

	this.arguments = [];

	this.code = null;

	this.closure = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.Function.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Values.Function.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		return false;
	}
}

Carbide.Virtual.Values.Function.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'function' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var func = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.Function(m);
		var castValue = func;
		value.value = castValue;
		return value;
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'function' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var func = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.Function(m);
		var castValue = func;
		value.value = castValue;
		return value;
	}
else 	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Block) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var code = arguments[1];
		var m = {};
		var value = new Carbide.Virtual.Values.Function(m);
		value.arguments = args;
		value.code = code;
		return value;
	}
}

Carbide.Virtual.Values.Function.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		return this.call(args, scope, null);
	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];
		if (this.value != null) {
			var cast = this.value;
			return cast(args);
			}else{
				if (args.length != this.arguments.length) {

					}
				this.code.clear();
				var funcScope = new Carbide.Virtual.Scope(scope.parent);
				for (var i = 0; i < this.arguments.length; i++) {
					var value = args[i];
					var name = this.arguments[i];
					funcScope.addVariable(new Carbide.Virtual.Variable(name, value));
					}
				if (context != null) {
					funcScope.addVariable(new Carbide.Virtual.Variable("this", context));
					}
				if (this.closure != null) {
					funcScope.setParentScope(this.closure);
					}
				this.code.run(funcScope);
				var rtn = funcScope.search("functionReturn");
				if (rtn == null) {
					var retu = Carbide.Virtual.Values.Null.create();
					return retu;
					}else{
						return rtn.value;
					}
			}
	}
}

Carbide.Virtual.Values.Function.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.Function.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Function.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Function.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.Function.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Function.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Function.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Function.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Function.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

Carbide.Virtual.Values.Bool = function () {
	this.type = "bool";

	this.value = false;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.Bool.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbide.Virtual.Values.Bool.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.Bool.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'boolean' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.Bool(m);
		value.value = val;
		return value;
	}
}

Carbide.Virtual.Values.Bool.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Values.Bool) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		if (operator == "=") {
			this.value = value.value;
			}else if (operator == "==") {
			return Carbide.Virtual.Values.Bool.create(this.value == value.value);
			}else if (operator == "!=") {
			return Carbide.Virtual.Values.Bool.create(this.value != value.value);
			}
	}
}

Carbide.Virtual.Values.Bool.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return Carbide.Virtual.Values.Bool.create(this.value);
	}
}

Carbide.Virtual.Values.Bool.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.Bool.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Bool.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.Bool.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Bool.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Bool.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Bool.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.Bool.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

Carbide.Virtual.Values.ProxyMap = function () {
	this.type = "map";

	this.value = {};

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.ProxyMap.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.ProxyMap.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.ProxyMap(m);
		value.value = val;
		return value;
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var key in this.value) {
			var cast = vKey.value;
			cast.value = key;
			v.value = Carbide.Virtual.Value.primitiveToValue(this.value[key]);
			code.run(scope);
			}
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name in this.value) {
			var rtn = Carbide.Virtual.Value.primitiveToValue(this.value[name]);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "set") {
			var key = input[0];
			var ind = input[1];
			this.value[key.value] = ind.value;
			}else if (name == "index") {
			var ind = input[0];
			var found = Carbide.Virtual.Value.primitiveToValue(this.value[ind.value]);
			return found;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

Carbide.Virtual.Values.ProxyMap.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.ProxyMap.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.ProxyMap.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.ProxyMap.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.ProxyArray = function () {
	this.type = "array";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.ProxyArray.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.ProxyArray.create = function () {
	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		var m = {};
		var value = new Carbide.Virtual.Values.ProxyArray(m);
		value.value = val;
		return value;
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = Carbide.Virtual.Value.primitiveToValue(this.value[i]);
			code.run(scope);
			}
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = Carbide.Virtual.Value.primitiveToValue(this.value[ind.value]);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var found = this.value.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

Carbide.Virtual.Values.ProxyArray.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.ProxyArray.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.ProxyArray.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.ProxyArray.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.AutoArray = function () {
	this.type = "array";

	this.value = null;

	this.raw = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];
		this.value = value;
	}
else 	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.AutoArray.prototype.castCarbideValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var i = arguments[0];
		return Carbide.Virtual.Value.primitiveToValue(this.value[i]);
	}
}

Carbide.Virtual.Values.AutoArray.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.castCarbideValue(i);
			code.run(scope);
			}
	}
}

Carbide.Virtual.Values.AutoArray.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.AutoArray.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.castCarbideValue(ind.value);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = this.value;
			cast.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.AutoArray.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

Carbide.Virtual.Values.AutoArray.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.AutoArray.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

Carbide.Virtual.Values.AutoArray.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.AutoArray.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.AutoArray.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Values.AutoArray.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Values.AutoArray.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.AutoArray.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.AutoArray.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Null = function () {
	this.type = "null";

	this.value = false;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.Null.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.value = raw["value"];
	}
}

Carbide.Virtual.Values.Null.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		if (this.value == raw["value"]) {
			return true;
			}else{
				return false;
			}
	}
}

Carbide.Virtual.Values.Null.create = function () {
	if (arguments.length == 0) {
		var m = {};
		var value = new Carbide.Virtual.Values.Null(m);
		value.value = null;
		return value;
	}
}

Carbide.Virtual.Values.Null.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.Null.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Null.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Null.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.Null.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Null.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Null.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Null.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.Null.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Null.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

Carbide.Virtual.Values.Reference = function () {
	this.type = "null";

	this.id = -1;

	this.processor = null;

	this.value = 0;

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

Carbide.Virtual.Values.Reference.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this.processor.findOnHeap(this.id).value;
	}
}

Carbide.Virtual.Values.Reference.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Values.Reference.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

Carbide.Virtual.Values.Reference.create = function () {
	if (arguments.length == 0) {
		return null;
	}
}

Carbide.Virtual.Values.Reference.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

Carbide.Virtual.Values.Reference.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

Carbide.Virtual.Values.Reference.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

Carbide.Virtual.Values.Reference.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Reference.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Reference.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		return Carbide.Virtual.Values.Null.create();
	}
}

Carbide.Virtual.Values.Reference.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

Carbide.Virtual.Values.Reference.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

Carbide.Virtual.Values.Reference.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

Carbide.Virtual.Variable = function () {
	this.name = "";

	this.value = null;

	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var value = arguments[1];
		this.name = name;
		this.value = value;
	}

}

Carbide.Virtual.Scope = function () {
	this.parentScope = null;

	this.parent = null;

	this.data = [];

	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Processor) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbide.Virtual.Scope.prototype.setParentScope = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		this.parentScope = scope;
	}
}

Carbide.Virtual.Scope.prototype.setVariable = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var variable = arguments[0];
		for (var i = 0; i < this.data.length; i++) {
			var dat = this.data[i];
			if (dat.name == variable.name) {
				dat.value = variable.value;
				return null;
				}
			}
		this.addVariable(variable);
	}
}

Carbide.Virtual.Scope.prototype.addVariable = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var variable = arguments[0];
		this.data.push(variable);
	}
}

Carbide.Virtual.Scope.prototype.clear = function () {
	if (arguments.length == 0) {
		for (var i = this.data.length;i > 0;i--) {
			this.data.pop();
			}
	}
}

Carbide.Virtual.Scope.prototype.search = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		for (var i = 0; i < this.data.length; i++) {
			var variable = this.data[i];
			if (variable.name == name) {
				return variable;
				}
			}
		if (this.parentScope != null) {
			return this.parentScope.search(name);
			}
		var emp = null;
		return emp;
	}
}

Carbide.Virtual.Sub = function () {
	this.data = {};

	this.parent = null;

	this.type = 0;

	this.property = "";

	this.arguments = [];

	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Statement || (arguments[0] instanceof Carbide.Virtual.Statements.Define) || (arguments[0] instanceof Carbide.Virtual.Statements.Function) || (arguments[0] instanceof Carbide.Virtual.Statements.If) || (arguments[0] instanceof Carbide.Virtual.Statements.For) || (arguments[0] instanceof Carbide.Virtual.Statements.Raw) || (arguments[0] instanceof Carbide.Virtual.Statements.Lost) || (arguments[0] instanceof Carbide.Virtual.Statements.Var) || (arguments[0] instanceof Carbide.Virtual.Statements.Return) || (arguments[0] instanceof Carbide.Virtual.Statements.Out)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var parent = arguments[0];
		this.parent = parent;
	}

}

Carbide.Virtual.Sub.prototype.run = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		if (this.type == 1) {
			return on.property(this.property, scope);
			}else{
				var args = [];
				for (var i = 0; i < this.arguments.length; i++) {
					var arg = this.arguments[i];
					args.push(arg.run(scope));
					}
				if (this.type == 3) {
					return on.method("index", args, scope);
					}else{
						if (on.type == "function") {
							return on.call(args, scope);
							}else{
								return on.method(this.property, args, scope);
							}
					}
			}
	}
}

Carbide.Notice = function () {
	this.start = 0;

	this.end = 0;

	this.level = 0;

	this.location = "";

	this.message = "";

	if (arguments.length == 5 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null) && (typeof arguments[3] == 'number' || typeof arguments[3] == 'undefined' || arguments[3] === null) && (typeof arguments[4] == 'number' || typeof arguments[4] == 'undefined' || arguments[4] === null)) {
		var message = arguments[0];
		var location = arguments[1];
		var start = arguments[2];
		var end = arguments[3];
		var level = arguments[4];
		this.message = message;
		this.location = location;
		this.start = start;
		this.end = end;
		this.level = level;
	}

}

Carbide.Virtual.Data = function () {
	this.id = 0;

	this.refs = 0;

	this.value = null;

	if (arguments.length == 2 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var id = arguments[0];
		var val = arguments[1];
		this.id = id;
		this.value = val;
	}

}

Carbide.Virtual.Expression = function () {
	this.data = null;

	this.subs = [];

	this.parent = null;


}

Carbide.Virtual.Expression.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expression.prototype.setParent = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expression.prototype.buildSubs = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expression.prototype.runSubs = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			}
		return last;
	}
}

Carbide.Virtual.Expression.prototype.runSubsTo = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var to = arguments[2];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			if (to == i) {
				break;
				}
			}
		return last;
	}
}

Carbide.Virtual.Expression.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];

	}
}

Carbide.Virtual.Expression.prototype.runTo = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];

	}
}

Carbide.Virtual.Expressions.Operation = function () {
	this.head = null;

	this.tail = null;

	this.operator = "";

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Expression || (arguments[1] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[1] instanceof Carbide.Virtual.Expressions.Call) || (arguments[1] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[1] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Expression || (arguments[2] instanceof Carbide.Virtual.Expressions.Operation) || (arguments[2] instanceof Carbide.Virtual.Expressions.Call) || (arguments[2] instanceof Carbide.Virtual.Expressions.Raw) || (arguments[2] instanceof Carbide.Virtual.Expressions.Reference)) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var head = arguments[1];
		var tail = arguments[2];
		this.operator = operator;
		this.head = head;
		this.head.parent = this.parent;
		this.tail = tail;
		this.tail.parent = this.parent;
	}

}

Carbide.Virtual.Expressions.Operation.prototype.setParent = function () {
	if (arguments.length == 0) {
		this.tail.parent = this.parent;
		this.head.parent = this.parent;
	}
}

Carbide.Virtual.Expressions.Operation.prototype.runTo = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];
		return this.run(scope);
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];

	}
}

Carbide.Virtual.Expressions.Operation.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		this.setParent();
		var head = this.head.run(scope);
		var tail = this.tail.run(scope);
		if ((this.operator == "=") && (this.head.subs.length > 0)) {
			var top = this.head.runTo(scope, this.head.subs.length - 1);
			return top.dotSet(this.head.subs[this.head.subs.length - 1].property, tail, scope);
			}else{
				return head.operate(this.operator, tail, scope);
			}
	}
}

Carbide.Virtual.Expressions.Operation.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Operation.prototype.buildSubs = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Operation.prototype.runSubs = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			}
		return last;
	}
}

Carbide.Virtual.Expressions.Operation.prototype.runSubsTo = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var to = arguments[2];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			if (to == i) {
				break;
				}
			}
		return last;
	}
}

Carbide.Virtual.Expressions.Call = function () {
	this.name = "";

	this.arguments = [];

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'string' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var ___arguments = arguments[0];
		var name = arguments[1];
		this.name = name;
		this.arguments = ___arguments;
	}

}

Carbide.Virtual.Expressions.Call.prototype.setParent = function () {
	if (arguments.length == 0) {
		for (var i = 0; i < this.arguments.length; i++) {
			var arg = this.arguments[i];
			arg.parent = this.parent;
			arg.setParent();
			}
	}
}

Carbide.Virtual.Expressions.Call.prototype.runTo = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];
		return this.run(scope);
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];

	}
}

Carbide.Virtual.Expressions.Call.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		var call = this.parent.topParent.parent.searchFunction(this.name);
		if (call != null) {
			return this.runSubs(call.call(this.arguments, scope), scope);
			}else{
				var splits = this.name.split(".");
				var root = splits[0];
				var val = scope.search(root);
				if (val != null) {
					var realValue = val.value;
					if (splits.length > 2) {
						for (var i = 1;i < splits.length - 1;i++) {
							realValue = realValue.property(splits[i], scope);
							}
						}
					var args = [];
					for (var i = 0; i < this.arguments.length; i++) {
						var arg = this.arguments[i];
						args.push(arg.run(scope));
						}
					if (splits.length > 1) {
						return realValue.method(splits[splits.length - 1], args, scope);
						}else{
							return realValue.call(args, scope);
						}
					}else{
						var location = "anon";
						if (this.parent.parent.topBlock != null) {
							location = this.parent.parent.topBlock.label;
							}
						this.parent.topParent.parent.runtimeError("Unknown function '" + this.name + "'", location, 0, 0);
					}
			}
	}
}

Carbide.Virtual.Expressions.Call.prototype.build = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Call.prototype.buildSubs = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Call.prototype.runSubs = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			}
		return last;
	}
}

Carbide.Virtual.Expressions.Call.prototype.runSubsTo = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var to = arguments[2];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			if (to == i) {
				break;
				}
			}
		return last;
	}
}

Carbide.Virtual.Expressions.Raw = function () {
	this.value = null;

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		this.value = val;
	}

}

Carbide.Virtual.Expressions.Raw.prototype.build = function () {
	if (arguments.length == 0) {
		this.value = Carbide.Virtual.Value.make(this.data, this.parent.parent.parent);
	}
}

Carbide.Virtual.Expressions.Raw.prototype.runTo = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];
		if (this.value.type == "function") {
			var cast = this.value;
			cast.closure = scope;
			}
		return this.value.duplicate();
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];

	}
}

Carbide.Virtual.Expressions.Raw.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		if (this.value.type == "function") {
			var cast = this.value;
			cast.closure = scope;
			}
		return this.value.duplicate();
	}
}

Carbide.Virtual.Expressions.Raw.prototype.setParent = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Raw.prototype.buildSubs = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Raw.prototype.runSubs = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			}
		return last;
	}
}

Carbide.Virtual.Expressions.Raw.prototype.runSubsTo = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var to = arguments[2];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			if (to == i) {
				break;
				}
			}
		return last;
	}
}

Carbide.Virtual.Expressions.Reference = function () {
	this.name = "";

	this.data = null;

	this.subs = [];

	this.parent = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var name = arguments[0];
		this.name = name;
	}

}

Carbide.Virtual.Expressions.Reference.prototype.build = function () {
	if (arguments.length == 0) {
		this.buildSubs();
		this.name = this.data["value"];
	}
}

Carbide.Virtual.Expressions.Reference.prototype.runTo = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];
		var ref = scope.search(this.name);
		if (ref != null) {
			if (to == 0) {
				return ref.value.getValue();
				}
			return this.runSubsTo(ref.value.getValue(), scope, to);
			}else{
				var location = "anon";
				if (this.parent.parent.topBlock != null) {
					location = this.parent.parent.topBlock.label;
					}
				this.parent.topParent.parent.runtimeError("Undefined reference '" + this.name + "'", location, 0, 0);
			}
	}
else 	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null) && (typeof arguments[1] == 'number' || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var scope = arguments[0];
		var to = arguments[1];

	}
}

Carbide.Virtual.Expressions.Reference.prototype.run = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Carbide.Virtual.Scope) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var scope = arguments[0];
		var ref = scope.search(this.name);
		if (ref != null) {
			return this.runSubs(ref.value.getValue(), scope);
			}else{
				var location = "anon";
				if (this.parent.parent.topBlock != null) {
					location = this.parent.parent.topBlock.label;
					}
				this.parent.topParent.parent.runtimeError("Undefined reference '" + this.name + "'", location, 0, 0);
			}
	}
}

Carbide.Virtual.Expressions.Reference.prototype.setParent = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Reference.prototype.buildSubs = function () {
	if (arguments.length == 0) {

	}
}

Carbide.Virtual.Expressions.Reference.prototype.runSubs = function () {
	if (arguments.length == 2 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			}
		return last;
	}
}

Carbide.Virtual.Expressions.Reference.prototype.runSubsTo = function () {
	if (arguments.length == 3 && ((arguments[0] instanceof Carbide.Virtual.Value || (arguments[0] instanceof carbide_proxy_Carbonite_Context) || (arguments[0] instanceof Carbide.Virtual.Values.String) || (arguments[0] instanceof Carbide.Virtual.Values.Map) || (arguments[0] instanceof Carbide.Virtual.Values.Reference) || (arguments[0] instanceof Carbide.Virtual.Values.Number) || (arguments[0] instanceof Carbide.Virtual.Values.Bool) || (arguments[0] instanceof Carbide.Virtual.Values.Array) || (arguments[0] instanceof Carbide.Virtual.Values.Null) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[0] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[0] instanceof carbide_proxy_Carbonite_Class) || (arguments[0] instanceof carbide_proxy_Carbonite_Template) || (arguments[0] instanceof carbide_proxy_Carbonite_Body) || (arguments[0] instanceof carbide_proxy_Carbonite_Statement) || (arguments[0] instanceof carbide_proxy_Carbonite_Type) || (arguments[0] instanceof VirtualArguments) || (arguments[0] instanceof VirtualArgument) || (arguments[0] instanceof VirtualClass) || (arguments[0] instanceof VirtualClasses) || (arguments[0] instanceof VirtualMembers) || (arguments[0] instanceof VirtualMember) || (arguments[0] instanceof VirtualTypes) || (arguments[0] instanceof VirtualType) || (arguments[0] instanceof Carbide.Virtual.Values.Function) || (arguments[0] instanceof Carbide.Virtual.Values.AutoArray || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Template) || (arguments[0] instanceof carbide_valueArray_Carbonite_Class) || (arguments[0] instanceof carbide_valueArray_Carbonite_Type) || (arguments[0] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && (typeof arguments[2] == 'number' || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var on = arguments[0];
		var scope = arguments[1];
		var to = arguments[2];
		var last = on;
		for (var i = 0; i < this.subs.length; i++) {
			var sub = this.subs[i];
			last = sub.run(last, scope);
			if (to == i) {
				break;
				}
			}
		return last;
	}
}

carbide_proxy_Carbonite_Context = function () {
	this.value = null;

	this.type = "null";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

carbide_proxy_Carbonite_Context.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_proxy_Carbonite_Context.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Context(m);
		value.value = reference;
		return value;
	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Context) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Context(m);
		value.value = reference;
		return value;
	}
}

carbide_proxy_Carbonite_Context.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Context.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Context.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Context.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Context.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_proxy_Carbonite_Context.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_proxy_Carbonite_Context.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Context.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

carbide_proxy_Carbonite_Context.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var c_scope = arguments[2];
		if (name == "route") {
			var cast_cls = args[0].value;
			var insta = this.value;
			var carbide_rtn = insta.route(cast_cls);
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Context.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var c_scope = arguments[1];
		if (name == "type") {
			var insta = this.value;
			var carbide_rtn = insta.type;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "instance") {
			var insta = this.value;
			var carbide_rtn = insta.instance;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "reference") {
			var insta = this.value;
			var carbide_rtn = insta.reference;
			return carbide_proxy_Carbonite_Class.create(carbide_rtn);
			}else if (name == "arguments") {
			var insta = this.value;
			var carbide_rtn = insta.arguments;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "templates") {
			var insta = this.value;
			var carbide_rtn = insta.templates;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "parent") {
			var insta = this.value;
			var carbide_rtn = insta.parent;
			return carbide_proxy_Carbonite_Class.create(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Context.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var setTo = arguments[1];
		var c_scope = arguments[2];
		if (name == "type") {
			var c_setCast = setTo.value;
			this.value.type = c_setCast;
			}else if (name == "instance") {
			var c_setCast = setTo.value;
			this.value.instance = c_setCast;
			}else if (name == "reference") {
			var c_setCast = setTo.value;
			this.value.reference = c_setCast;
			}else if (name == "arguments") {
			var c_setCast = setTo.value;
			this.value.arguments = c_setCast;
			}else if (name == "templates") {
			var c_setCast = setTo.value;
			this.value.templates = c_setCast;
			}else if (name == "parent") {
			var c_setCast = setTo.value;
			this.value.parent = c_setCast;
			}
	}
}

carbide_proxy_Carbonite_Class = function () {
	this.value = null;

	this.type = "null";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

carbide_proxy_Carbonite_Class.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_proxy_Carbonite_Class.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Class(m);
		value.value = reference;
		return value;
	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Class) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Class(m);
		value.value = reference;
		return value;
	}
}

carbide_proxy_Carbonite_Class.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Class.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Class.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Class.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Class.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_proxy_Carbonite_Class.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_proxy_Carbonite_Class.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Class.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

carbide_proxy_Carbonite_Class.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var c_scope = arguments[2];
		if (name == "getRoute") {
			var cast_join = args[0].value;
			var insta = this.value;
			var carbide_rtn = insta.getRoute(cast_join);
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Class.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var c_scope = arguments[1];
		if (name == "uid") {
			var insta = this.value;
			var carbide_rtn = insta.uid;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "isFromHeader") {
			var insta = this.value;
			var carbide_rtn = insta.isFromHeader;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "primitiveValue") {
			var insta = this.value;
			var carbide_rtn = insta.primitiveValue;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "inherits") {
			var insta = this.value;
			var carbide_rtn = insta.inherits;
			return new carbide_valueArray_Carbonite_Class(carbide_rtn);
			}else if (name == "headerInherits") {
			var insta = this.value;
			var carbide_rtn = insta.headerInherits;
			return new carbide_valueArray_Carbonite_Class(carbide_rtn);
			}else if (name == "templates") {
			var insta = this.value;
			var carbide_rtn = insta.templates;
			return new carbide_valueArray_Carbonite_Template(carbide_rtn);
			}else if (name == "descendants") {
			var insta = this.value;
			var carbide_rtn = insta.descendants;
			return new carbide_valueArray_Carbonite_Class(carbide_rtn);
			}else if (name == "attributes") {
			var insta = this.value;
			var carbide_rtn = insta.attributes;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "reroute") {
			var insta = this.value;
			var carbide_rtn = insta.reroute;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "autoReroute") {
			var insta = this.value;
			var carbide_rtn = insta.autoReroute;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "link") {
			var insta = this.value;
			var carbide_rtn = insta.link;
			return carbide_proxy_Carbonite_Class.create(carbide_rtn);
			}else if (name == "alreadyBuilt") {
			var insta = this.value;
			var carbide_rtn = insta.alreadyBuilt;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "membersBuilt") {
			var insta = this.value;
			var carbide_rtn = insta.membersBuilt;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "codeBuilt") {
			var insta = this.value;
			var carbide_rtn = insta.codeBuilt;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "inherited") {
			var insta = this.value;
			var carbide_rtn = insta.inherited;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "templateClass") {
			var insta = this.value;
			var carbide_rtn = insta.templateClass;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "templateInstance") {
			var insta = this.value;
			var carbide_rtn = insta.templateInstance;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "templateBase") {
			var insta = this.value;
			var carbide_rtn = insta.templateBase;
			return carbide_proxy_Carbonite_Class.create(carbide_rtn);
			}else if (name == "resolvedTemplates") {
			var insta = this.value;
			var carbide_rtn = insta.resolvedTemplates;
			return new carbide_valueArray_Carbonite_Type(carbide_rtn);
			}else if (name == "base") {
			var insta = this.value;
			var carbide_rtn = insta.base;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "flags") {
			var insta = this.value;
			var carbide_rtn = insta.flags;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "route") {
			var insta = this.value;
			var carbide_rtn = insta.route;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "name") {
			var insta = this.value;
			var carbide_rtn = insta.name;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "leveled") {
			var insta = this.value;
			var carbide_rtn = insta.leveled;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Class.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var setTo = arguments[1];
		var c_scope = arguments[2];
		if (name == "uid") {
			var c_setCast = setTo.value;
			this.value.uid = c_setCast;
			}else if (name == "isFromHeader") {
			var c_setCast = setTo.value;
			this.value.isFromHeader = c_setCast;
			}else if (name == "primitiveValue") {
			var c_setCast = setTo.value;
			this.value.primitiveValue = c_setCast;
			}else if (name == "inherits") {
			var c_setCast = setTo.value;
			this.value.inherits = c_setCast;
			}else if (name == "headerInherits") {
			var c_setCast = setTo.value;
			this.value.headerInherits = c_setCast;
			}else if (name == "templates") {
			var c_setCast = setTo.value;
			this.value.templates = c_setCast;
			}else if (name == "descendants") {
			var c_setCast = setTo.value;
			this.value.descendants = c_setCast;
			}else if (name == "attributes") {
			var c_setCast = setTo.value;
			this.value.attributes = c_setCast;
			}else if (name == "reroute") {
			var c_setCast = setTo.value;
			this.value.reroute = c_setCast;
			}else if (name == "autoReroute") {
			var c_setCast = setTo.value;
			this.value.autoReroute = c_setCast;
			}else if (name == "link") {
			var c_setCast = setTo.value;
			this.value.link = c_setCast;
			}else if (name == "alreadyBuilt") {
			var c_setCast = setTo.value;
			this.value.alreadyBuilt = c_setCast;
			}else if (name == "membersBuilt") {
			var c_setCast = setTo.value;
			this.value.membersBuilt = c_setCast;
			}else if (name == "codeBuilt") {
			var c_setCast = setTo.value;
			this.value.codeBuilt = c_setCast;
			}else if (name == "inherited") {
			var c_setCast = setTo.value;
			this.value.inherited = c_setCast;
			}else if (name == "templateClass") {
			var c_setCast = setTo.value;
			this.value.templateClass = c_setCast;
			}else if (name == "templateInstance") {
			var c_setCast = setTo.value;
			this.value.templateInstance = c_setCast;
			}else if (name == "templateBase") {
			var c_setCast = setTo.value;
			this.value.templateBase = c_setCast;
			}else if (name == "resolvedTemplates") {
			var c_setCast = setTo.value;
			this.value.resolvedTemplates = c_setCast;
			}else if (name == "base") {
			var c_setCast = setTo.value;
			this.value.base = c_setCast;
			}else if (name == "flags") {
			var c_setCast = setTo.value;
			this.value.flags = c_setCast;
			}else if (name == "route") {
			var c_setCast = setTo.value;
			this.value.route = c_setCast;
			}else if (name == "name") {
			var c_setCast = setTo.value;
			this.value.name = c_setCast;
			}else if (name == "leveled") {
			var c_setCast = setTo.value;
			this.value.leveled = c_setCast;
			}
	}
}

carbide_proxy_Carbonite_Template = function () {
	this.value = null;

	this.type = "null";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

carbide_proxy_Carbonite_Template.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_proxy_Carbonite_Template.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Template) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Template(m);
		value.value = reference;
		return value;
	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Template) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Template(m);
		value.value = reference;
		return value;
	}
}

carbide_proxy_Carbonite_Template.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Template.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Template.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Template.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Template.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_proxy_Carbonite_Template.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_proxy_Carbonite_Template.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Template.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

carbide_proxy_Carbonite_Template.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var c_scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Template.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var c_scope = arguments[1];
		if (name == "name") {
			var insta = this.value;
			var carbide_rtn = insta.name;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}else if (name == "parent") {
			var insta = this.value;
			var carbide_rtn = insta.parent;
			return carbide_proxy_Carbonite_Class.create(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Template.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var setTo = arguments[1];
		var c_scope = arguments[2];
		if (name == "name") {
			var c_setCast = setTo.value;
			this.value.name = c_setCast;
			}else if (name == "parent") {
			var c_setCast = setTo.value;
			this.value.parent = c_setCast;
			}
	}
}

carbide_proxy_Carbonite_Body = function () {
	this.value = null;

	this.type = "null";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

carbide_proxy_Carbonite_Body.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_proxy_Carbonite_Body.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Body(m);
		value.value = reference;
		return value;
	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Body) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Body(m);
		value.value = reference;
		return value;
	}
}

carbide_proxy_Carbonite_Body.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Body.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Body.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Body.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Body.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_proxy_Carbonite_Body.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_proxy_Carbonite_Body.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Body.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

carbide_proxy_Carbonite_Body.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var c_scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Body.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var c_scope = arguments[1];
		if (name == "statements") {
			var insta = this.value;
			var carbide_rtn = insta.statements;
			return new carbide_valueArray_Carbonite_Statement(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Body.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var setTo = arguments[1];
		var c_scope = arguments[2];
		if (name == "statements") {
			var c_setCast = setTo.value;
			this.value.statements = c_setCast;
			}
	}
}

carbide_proxy_Carbonite_Statement = function () {
	this.value = null;

	this.type = "null";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

carbide_proxy_Carbonite_Statement.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_proxy_Carbonite_Statement.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Statement || (arguments[0] instanceof Carbonite.Statements.If) || (arguments[0] instanceof Carbonite.Statements.Return) || (arguments[0] instanceof Carbonite.Statements.Define) || (arguments[0] instanceof Carbonite.Statements.For) || (arguments[0] instanceof Carbonite.Statements.ForIn) || (arguments[0] instanceof Carbonite.Statements.While) || (arguments[0] instanceof Carbonite.Statements.Continue) || (arguments[0] instanceof Carbonite.Statements.Break) || (arguments[0] instanceof Carbonite.Statements.Try) || (arguments[0] instanceof Carbonite.Statements.Throw) || (arguments[0] instanceof Carbonite.Statements.Native) || (arguments[0] instanceof Carbonite.Statements.Expression) || (arguments[0] instanceof Carbonite.Statements.Yield)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Statement(m);
		value.value = reference;
		return value;
	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Statement || (arguments[0] instanceof Carbonite.Statements.If) || (arguments[0] instanceof Carbonite.Statements.Return) || (arguments[0] instanceof Carbonite.Statements.Define) || (arguments[0] instanceof Carbonite.Statements.For) || (arguments[0] instanceof Carbonite.Statements.ForIn) || (arguments[0] instanceof Carbonite.Statements.While) || (arguments[0] instanceof Carbonite.Statements.Continue) || (arguments[0] instanceof Carbonite.Statements.Break) || (arguments[0] instanceof Carbonite.Statements.Try) || (arguments[0] instanceof Carbonite.Statements.Throw) || (arguments[0] instanceof Carbonite.Statements.Native) || (arguments[0] instanceof Carbonite.Statements.Expression) || (arguments[0] instanceof Carbonite.Statements.Yield)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Statement(m);
		value.value = reference;
		return value;
	}
}

carbide_proxy_Carbonite_Statement.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Statement.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Statement.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Statement.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Statement.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_proxy_Carbonite_Statement.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_proxy_Carbonite_Statement.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Statement.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

carbide_proxy_Carbonite_Statement.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var c_scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Statement.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var c_scope = arguments[1];
		if (name == "type") {
			var insta = this.value;
			var carbide_rtn = insta.type;
			return Carbide.Virtual.Value.primitiveToValue(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Statement.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var setTo = arguments[1];
		var c_scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Type = function () {
	this.value = null;

	this.type = "null";

	this.raw = null;

	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];
		this.raw = raw;
	}

}

carbide_proxy_Carbonite_Type.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_proxy_Carbonite_Type.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Type(m);
		value.value = reference;
		return value;
	}
else 	if (arguments.length == 1 && ((arguments[0] instanceof Carbonite.Type || (arguments[0] instanceof Carbonite.ReferenceType)) || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var reference = arguments[0];
		var m = {};
		var value = new carbide_proxy_Carbonite_Type(m);
		value.value = reference;
		return value;
	}
}

carbide_proxy_Carbonite_Type.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Type.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_proxy_Carbonite_Type.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Type.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_proxy_Carbonite_Type.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_proxy_Carbonite_Type.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_proxy_Carbonite_Type.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Type.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var variableKey = arguments[0];
		var variable = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];

	}
}

carbide_proxy_Carbonite_Type.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var args = arguments[1];
		var c_scope = arguments[2];

	}
}

carbide_proxy_Carbonite_Type.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var c_scope = arguments[1];
		if (name == "reference") {
			var insta = this.value;
			var carbide_rtn = insta.reference;
			return carbide_proxy_Carbonite_Class.create(carbide_rtn);
			}
	}
}

carbide_proxy_Carbonite_Type.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var setTo = arguments[1];
		var c_scope = arguments[2];
		if (name == "reference") {
			var c_setCast = setTo.value;
			this.value.reference = c_setCast;
			}
	}
}

carbide_valueArray_Carbonite_Class = function () {
	this.value = null;

	this.type = "array";

	this.raw = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		this.value = val;
	}

}

carbide_valueArray_Carbonite_Class.prototype.castCarbideValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var i = arguments[0];
		return carbide_proxy_Carbonite_Class.create(this.value[i]);
	}
}

carbide_valueArray_Carbonite_Class.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.castCarbideValue(i);
			code.run(scope);
			}
	}
}

carbide_valueArray_Carbonite_Class.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Class.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.castCarbideValue(ind.value);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = this.value;
			cast.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Class.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

carbide_valueArray_Carbonite_Class.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_valueArray_Carbonite_Class.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Class.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Class.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_valueArray_Carbonite_Class.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_valueArray_Carbonite_Class.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_valueArray_Carbonite_Class = function () {
	this.value = null;

	this.type = "array";

	this.raw = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		this.value = val;
	}

}

carbide_valueArray_Carbonite_Class.prototype.castCarbideValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var i = arguments[0];
		return carbide_proxy_Carbonite_Class.create(this.value[i]);
	}
}

carbide_valueArray_Carbonite_Class.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.castCarbideValue(i);
			code.run(scope);
			}
	}
}

carbide_valueArray_Carbonite_Class.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Class.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.castCarbideValue(ind.value);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = this.value;
			cast.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Class.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

carbide_valueArray_Carbonite_Class.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_valueArray_Carbonite_Class.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Class.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Class.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_valueArray_Carbonite_Class.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_valueArray_Carbonite_Class.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_valueArray_Carbonite_Template = function () {
	this.value = null;

	this.type = "array";

	this.raw = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		this.value = val;
	}

}

carbide_valueArray_Carbonite_Template.prototype.castCarbideValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var i = arguments[0];
		return carbide_proxy_Carbonite_Template.create(this.value[i]);
	}
}

carbide_valueArray_Carbonite_Template.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.castCarbideValue(i);
			code.run(scope);
			}
	}
}

carbide_valueArray_Carbonite_Template.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Template.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.castCarbideValue(ind.value);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = this.value;
			cast.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Template.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

carbide_valueArray_Carbonite_Template.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_valueArray_Carbonite_Template.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

carbide_valueArray_Carbonite_Template.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Template.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Template.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Template.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Template.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_valueArray_Carbonite_Template.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_valueArray_Carbonite_Template.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_valueArray_Carbonite_Class = function () {
	this.value = null;

	this.type = "array";

	this.raw = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		this.value = val;
	}

}

carbide_valueArray_Carbonite_Class.prototype.castCarbideValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var i = arguments[0];
		return carbide_proxy_Carbonite_Class.create(this.value[i]);
	}
}

carbide_valueArray_Carbonite_Class.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.castCarbideValue(i);
			code.run(scope);
			}
	}
}

carbide_valueArray_Carbonite_Class.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Class.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.castCarbideValue(ind.value);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = this.value;
			cast.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Class.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

carbide_valueArray_Carbonite_Class.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_valueArray_Carbonite_Class.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Class.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Class.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Class.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_valueArray_Carbonite_Class.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_valueArray_Carbonite_Class.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_valueArray_Carbonite_Type = function () {
	this.value = null;

	this.type = "array";

	this.raw = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		this.value = val;
	}

}

carbide_valueArray_Carbonite_Type.prototype.castCarbideValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var i = arguments[0];
		return carbide_proxy_Carbonite_Type.create(this.value[i]);
	}
}

carbide_valueArray_Carbonite_Type.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.castCarbideValue(i);
			code.run(scope);
			}
	}
}

carbide_valueArray_Carbonite_Type.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Type.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.castCarbideValue(ind.value);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = this.value;
			cast.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Type.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

carbide_valueArray_Carbonite_Type.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_valueArray_Carbonite_Type.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

carbide_valueArray_Carbonite_Type.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Type.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Type.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Type.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Type.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_valueArray_Carbonite_Type.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_valueArray_Carbonite_Type.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

carbide_valueArray_Carbonite_Statement = function () {
	this.value = null;

	this.type = "array";

	this.raw = null;

	if (arguments.length == 1 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var val = arguments[0];
		this.value = val;
	}

}

carbide_valueArray_Carbonite_Statement.prototype.castCarbideValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var i = arguments[0];
		return carbide_proxy_Carbonite_Statement.create(this.value[i]);
	}
}

carbide_valueArray_Carbonite_Statement.prototype.iterate = function () {
	if (arguments.length == 4 && ((arguments[0] instanceof Carbide.Virtual.Variable) || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Variable) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Block) || typeof arguments[2] == 'undefined' || arguments[2] === null) && ((arguments[3] instanceof Carbide.Virtual.Scope) || typeof arguments[3] == 'undefined' || arguments[3] === null)) {
		var vKey = arguments[0];
		var v = arguments[1];
		var code = arguments[2];
		var scope = arguments[3];
		for (var i = 0; i < this.value.length; i++) {
			vKey.value.value = i;
			v.value = this.castCarbideValue(i);
			code.run(scope);
			}
	}
}

carbide_valueArray_Carbonite_Statement.prototype.property = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var name = arguments[0];
		var scope = arguments[1];
		if (name == "length") {
			var cast = this.value.length;
			var rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Statement.prototype.method = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && (arguments[1] instanceof Array || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var name = arguments[0];
		var input = arguments[1];
		var scope = arguments[2];
		if (name == "length") {
			var len = this.value.length;
			return Carbide.Virtual.Values.Number.create(len);
			}else if (name == "index") {
			var ind = input[0];
			var found = this.castCarbideValue(ind.value);
			return found;
			}else if (name == "push") {
			var ind = input[0];
			var cast = this.value;
			cast.push(ind.value);
			}else if (name == "pop") {
			this.value.pop();
			}
		return Carbide.Virtual.Values.Null.create();
	}
}

carbide_valueArray_Carbonite_Statement.prototype.dotSet = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var prop = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];
		var v = null;
		this.value[prop] = value.value;
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

carbide_valueArray_Carbonite_Statement.make = function () {
	if (arguments.length == 2 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Processor) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var data = arguments[0];
		var proc = arguments[1];
		var rtn = null;
		var type = data["type"];
		if (type == "string") {
			rtn = new Carbide.Virtual.Values.String(data);
			}else if (type == "map") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Map(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}else if (type == "number") {
			rtn = new Carbide.Virtual.Values.Number(data);
			}else if (type == "bool") {
			rtn = new Carbide.Virtual.Values.Bool(data);
			}else if (type == "array") {
			var v = new Carbide.Virtual.Data(proc.heapIndex, new Carbide.Virtual.Values.Array(data));
			v.value.setValue(data);
			proc.heapIndex++;
			proc.heap.push(v);
			var ref = new Carbide.Virtual.Values.Reference({});
			ref.processor = proc;
			ref.id = v.id;
			rtn = ref;
			}
		rtn.setValue(data);
		return rtn;
	}
}

carbide_valueArray_Carbonite_Statement.create = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'number' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var value = arguments[0];

	}
}

carbide_valueArray_Carbonite_Statement.prototype.getValue = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Statement.prototype.duplicate = function () {
	if (arguments.length == 0) {
		return this;
	}
}

carbide_valueArray_Carbonite_Statement.prototype.setValue = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Statement.prototype.compare = function () {
	if (arguments.length == 1 && (typeof arguments[0] == 'object' || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var raw = arguments[0];

	}
}

carbide_valueArray_Carbonite_Statement.primitiveToValue = function () {
	if (arguments.length == 1 && ((arguments[0] instanceof Array || typeof arguments[0] == 'boolean' || typeof arguments[0] == 'string' || typeof arguments[0] == 'number' || typeof arguments[0] == 'number' || typeof arguments[0] == 'object' || typeof arguments[0] == 'string') || typeof arguments[0] == 'undefined' || arguments[0] === null)) {
		var prim = arguments[0];
		if (prim == null) {
			return Carbide.Virtual.Values.Null.create();
			}
		var type = (typeof prim == 'object' ? (Array.isArray(prim) ? 'array' : 'map') : (typeof prim == 'number' ? 'float' : typeof prim));
		if (type == "array") {
			return Carbide.Virtual.Values.ProxyArray.create(prim);
			}else if (type == "map") {
			return Carbide.Virtual.Values.ProxyMap.create(prim);
			}else if (type == "string") {
			return Carbide.Virtual.Values.String.create(prim);
			}else if (type == "boolean") {
			return Carbide.Virtual.Values.Bool.create(prim);
			}else if ((type == "integer") || (type == "float")) {
			return Carbide.Virtual.Values.Number.create(prim);
			}
	}
}

carbide_valueArray_Carbonite_Statement.prototype.call = function () {
	if (arguments.length == 2 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null)) {
		var args = arguments[0];
		var scope = arguments[1];

	}
else 	if (arguments.length == 3 && (arguments[0] instanceof Array || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Scope) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Value || (arguments[2] instanceof carbide_proxy_Carbonite_Context) || (arguments[2] instanceof Carbide.Virtual.Values.String) || (arguments[2] instanceof Carbide.Virtual.Values.Map) || (arguments[2] instanceof Carbide.Virtual.Values.Reference) || (arguments[2] instanceof Carbide.Virtual.Values.Number) || (arguments[2] instanceof Carbide.Virtual.Values.Bool) || (arguments[2] instanceof Carbide.Virtual.Values.Array) || (arguments[2] instanceof Carbide.Virtual.Values.Null) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[2] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[2] instanceof carbide_proxy_Carbonite_Class) || (arguments[2] instanceof carbide_proxy_Carbonite_Template) || (arguments[2] instanceof carbide_proxy_Carbonite_Body) || (arguments[2] instanceof carbide_proxy_Carbonite_Statement) || (arguments[2] instanceof carbide_proxy_Carbonite_Type) || (arguments[2] instanceof VirtualArguments) || (arguments[2] instanceof VirtualArgument) || (arguments[2] instanceof VirtualClass) || (arguments[2] instanceof VirtualClasses) || (arguments[2] instanceof VirtualMembers) || (arguments[2] instanceof VirtualMember) || (arguments[2] instanceof VirtualTypes) || (arguments[2] instanceof VirtualType) || (arguments[2] instanceof Carbide.Virtual.Values.Function) || (arguments[2] instanceof Carbide.Virtual.Values.AutoArray || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Template) || (arguments[2] instanceof carbide_valueArray_Carbonite_Class) || (arguments[2] instanceof carbide_valueArray_Carbonite_Type) || (arguments[2] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var args = arguments[0];
		var scope = arguments[1];
		var context = arguments[2];

	}
}

carbide_valueArray_Carbonite_Statement.prototype.operate = function () {
	if (arguments.length == 3 && (typeof arguments[0] == 'string' || typeof arguments[0] == 'undefined' || arguments[0] === null) && ((arguments[1] instanceof Carbide.Virtual.Value || (arguments[1] instanceof carbide_proxy_Carbonite_Context) || (arguments[1] instanceof Carbide.Virtual.Values.String) || (arguments[1] instanceof Carbide.Virtual.Values.Map) || (arguments[1] instanceof Carbide.Virtual.Values.Reference) || (arguments[1] instanceof Carbide.Virtual.Values.Number) || (arguments[1] instanceof Carbide.Virtual.Values.Bool) || (arguments[1] instanceof Carbide.Virtual.Values.Array) || (arguments[1] instanceof Carbide.Virtual.Values.Null) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyArray) || (arguments[1] instanceof Carbide.Virtual.Values.ProxyMap) || (arguments[1] instanceof carbide_proxy_Carbonite_Class) || (arguments[1] instanceof carbide_proxy_Carbonite_Template) || (arguments[1] instanceof carbide_proxy_Carbonite_Body) || (arguments[1] instanceof carbide_proxy_Carbonite_Statement) || (arguments[1] instanceof carbide_proxy_Carbonite_Type) || (arguments[1] instanceof VirtualArguments) || (arguments[1] instanceof VirtualArgument) || (arguments[1] instanceof VirtualClass) || (arguments[1] instanceof VirtualClasses) || (arguments[1] instanceof VirtualMembers) || (arguments[1] instanceof VirtualMember) || (arguments[1] instanceof VirtualTypes) || (arguments[1] instanceof VirtualType) || (arguments[1] instanceof Carbide.Virtual.Values.Function) || (arguments[1] instanceof Carbide.Virtual.Values.AutoArray || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Template) || (arguments[1] instanceof carbide_valueArray_Carbonite_Class) || (arguments[1] instanceof carbide_valueArray_Carbonite_Type) || (arguments[1] instanceof carbide_valueArray_Carbonite_Statement))) || typeof arguments[1] == 'undefined' || arguments[1] === null) && ((arguments[2] instanceof Carbide.Virtual.Scope) || typeof arguments[2] == 'undefined' || arguments[2] === null)) {
		var operator = arguments[0];
		var value = arguments[1];
		var scope = arguments[2];

	}
}

module.exports = Carbonite;