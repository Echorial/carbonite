class VirtualClass inherits Carbide.Virtual.Value {
	override string type = "Carbon.Class";
	override Carbonite.Class value = null;

	fixed override <VirtualClass>function create(Carbonite.Class val) {
		var map m = new map();
		var  value = new VirtualClass(m);
		value.value = val;
		return value;
	}

	override <Carbide.Virtual.Value>function property(string name, Carbide.Virtual.Scope scope) {
		if (name == "name") {
			return Carbide.Virtual.Values.String.create(this.value.name);
		}else if (name == "route") {
			return Carbide.Virtual.Values.String.create(this.value.route);
		}else if (name == "reroute") {
			return Carbide.Virtual.Values.String.create(this.value.reroute);
		}else if (name == "base") {
			return Carbide.Virtual.Values.String.create(this.value.base);
		}else if (name == "attributes") {
			return Carbide.Virtual.Values.ProxyArray.create(this.value.attributes);
		}else if (name == "members") {
			return VirtualMembers.create(this.value.members);
		}else if (name == "descendants") {
			return VirtualClasses.create(this.value.descendants);
		}
		return Carbide.Virtual.Values.Null.create();
	}

	override <Carbide.Virtual.Value>function method(string name, <Carbide.Virtual.Value>array input, Carbide.Virtual.Scope scope) {
		if (name == "getAttribute") {
			if (input.length == 1) {
				var string find = input[0].value;
				return Carbide.Virtual.Value.primitiveToValue(this.value.getAttribute(this.value.attributes, find));
			}
		}else if (name == "hasMember") {
			if (input.length == 1) {
				var string find = input[0].value;
				return Carbide.Virtual.Values.Bool.create(this.value.hasMember(find));
			}
		}else if (name == "getMember") {
			if (input.length == 1) {
				var string find = input[0].value;
				return VirtualMember.create(this.value.getMember(find));
			}
		}else if (name == "descendantOf") {
			if (input.length == 1) {
				var VirtualClass desc = input[0];
				return Carbide.Virtual.Values.Bool.create(this.value.descendantOf(desc.value));
			}
		}else if (name == "getRoute") {
			return Carbide.Virtual.Values.String.create(this.value.getRoute());
		}
		return Carbide.Virtual.Values.Null.create();
	}

	override <Carbide.Virtual.Value>function dotSet(string prop, Carbide.Virtual.Value value,  Carbide.Virtual.Scope scope) {
		var Carbide.Virtual.Value v = empty;
		if (prop == "name") {
			var Carbide.Virtual.Values.String cast = value;
			this.value.name = cast.value;
		}else if (prop == "reroute") {
			var Carbide.Virtual.Values.String cast = value;
			this.value.reroute = cast.value;
		}
		
		v = Carbide.Virtual.Values.Null.create();
		return v;
	}
}

class VirtualClasses inherits Carbide.Virtual.Value {
	bound public override string type = "array";
	bound public override <Carbonite.Class>array value = null;

	fixed override VirtualClasses create(<Carbonite.Class>array val) {
		var map m = new map();
		var VirtualClasses value = new VirtualClasses(m);
		value.value = val;
		return value;
	}

	bound public override <void>function iterate(Carbide.Virtual.Variable vKey, Carbide.Virtual.Variable v, Carbide.Virtual.Block code, Carbide.Virtual.Scope scope) {
		for (var int i in this.value) {
			vKey.value.value = i;
			v.value = VirtualClass.create(this.value[i]);
			code.run(scope);
		}
	}

	bound public override <Carbide.Virtual.Value>function property(string name, Carbide.Virtual.Scope scope) {
		if (name == "length") {
			var float cast = this.value.length;
			var Carbide.Virtual.Values.Number rtn = Carbide.Virtual.Values.Number.create(cast);
			return rtn;
		}
		return Carbide.Virtual.Values.Null.create();
	}

	bound public override <Carbide.Virtual.Value>function method(string name, <Carbide.Virtual.Value>array input, Carbide.Virtual.Scope scope) {
		if (name == "length") {
			var float len = this.value.length();
			return Carbide.Virtual.Values.Number.create(len);
		}else if (name == "index") {
			var Carbide.Virtual.Value ind = input[0];
			var Carbide.Virtual.Value found = VirtualClass.create(this.value[ind.value]);
			return found;
		}else if (name == "push") {
			var Carbide.Virtual.Value ind = input[0];
			var Carbonite.Class cast = ind.value;
			var Carbide.Virtual.Value found = this.value.push(cast);
		}else if (name == "pop") {
			this.value.pop();
		}
		return Carbide.Virtual.Values.Null.create();
	}
}