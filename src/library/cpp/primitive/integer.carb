relative int inherits primitive {
	native inline void @construct() {return '0';}

	[operator="="] native inline void set(int what) {return context.instance + " = " + context.arguments[0];}
	[operator="+"] native inline int add(int what) {return context.instance + " + " + context.arguments[0];}
	[operator="==", order=5] native inline bool equal(int compare) {return context.instance + " == " + context.arguments[0];}
	[operator="!=", order=5] native inline bool notEqual(int compare) {return context.instance + " != " + context.arguments[0];}
	[operator="^", order=4] native inline int pow(int to) {return context.instance + " ^ " + context.arguments[0];}
	[operator="*", order=3] native inline int multiply(int what) {return context.instance + " * " + context.arguments[0];}
	[operator="/", order=3] native inline int divide(int what) {return context.instance + " / " + context.arguments[0];}
	[operator="-"] native inline int subtract(int what) {return context.instance + " - " + context.arguments[0];}
	[operator=">", order=5] native inline bool greater(int what) {return context.instance + " > " + context.arguments[0];}
	[operator="<", order=5] native inline bool lesser(int what) {return context.instance + " < " + context.arguments[0];}
	[operator="<=", order=5] native inline bool lesserOrEqual(int what) {return context.instance + " <= " + context.arguments[0];}
	[operator=">=", order=5] native inline bool greaterOrEqual(int what) {return context.instance + " >= " + context.arguments[0];}
	[operator="++"] native inline int increment() {return context.instance + "++";}
	[operator="--"] native inline int decrement() {return context.instance + "--";}
	[operator="+=", order=5] native inline bool plusEquals(int what) {return context.instance + "+=" + context.arguments[0];}
	[operator="-=", order=5] native inline bool minusEquals(int what) {return context.instance + "-=" + context.arguments[0];}

	fixed native inline bool mid(int val, int min, int max) {return context.arguments[0] + " >= " + context.arguments[1] + " && " + context.arguments[0] + " <= " + context.arguments[2];}

	native inline float @cast() {
		return "((float) " + context.instance + ")";
	}

	fixed native inline int parse(string value) {return "parseInt(" + context.arguments[0] + ")";}
}

[Reroute = "uint_t"]
relative uint inherits int {}

[Reroute = "uint8_t"]
relative uint8 inherits int {}

[Reroute = "int8_t"]
relative int8 inherits int {}

[Reroute = "uint16_t"]
relative uint16 inherits int {}

[Reroute = "int16_t"]
relative int16 inherits int {}

[Reroute = "uint64_t"]
relative uint64 inherits int {}

[Reroute = "int64_t"]
relative int64 inherits int {}