relative <class T = primitive>array inherits primitive {
	[operator="==", order=5] native inline bool equal(<T>array compare) {return context.instance + " == " + context.arguments[0];}
	[operator="!=", order=5] native inline bool notEqual(<T>array compare) {return context.instance + " != " + context.arguments[0];}

	native inline void @construct() {
		return "new std::vector<" + context.templates[0] + ">()";
	}

	native inline property int length() {return context.instance + "->size()";}
	native inline void pop() {return context.instance + "->pop_back()";}
	native inline int push(T element) {return context.instance + "->push_back(" + context.arguments[0] + ")";}
	
	native inline string join(string with) {
		let TClass = context.parent.resolvedTemplates[0];

		if (TClass.reference.route == "string")
			return "_c_join(" + context.instance + ", " + context.arguments[0] + ")";

		if (TClass.reference.route != "string")
			return "_c_join<" + context.route(TClass.reference) + ">(" + context.instance + ", " + context.arguments[0] + ")";
	}

	native inline void remove(int index) {return context.instance + "->erase(" + context.instance + "->begin() + " + context.arguments[0] + ")";}
	native inline void unshift(T item) {return context.instance + "->unshift(" + context.arguments[0] + ")";}
	native inline void shift() {return context.instance + "->shift()";}
	native inline void empty() {return context.instance + "->clear()";}

	native inline <T>array split(int index) {return context.instance + ".slice().splice(0, " + context.arguments[0] + ")";}
	native inline <T>array splice(int index) {return context.instance + ".slice().splice(" + context.arguments[0] + ")";}
	native inline <T>array clone() {return "JSON.parse(JSON.stringify(" + context.instance + "))";}

	native inline T move(int index) {
		var primitive = false;
		if (context.reference.primitiveValue)
			primitive = true;

		if (context.reference.route == "array")
			primitive = true;

		if (context.reference.route == "map")
			primitive = true;
		
		let rtn = "";

		if (primitive) {
			rtn = "_c_index<" + context.type + ">(" + context.instance + ", " + context.arguments[0] + ")";
		}
		
		if (primitive == false) {
			rtn = "_c_index_n_move<" + context.type + ">(" + context.instance + ", " + context.arguments[0] + ")";
		}

		return rtn;
	}

	native inline void @setIndex(int index, T value) {
		var primitive = false;
		if (context.reference.primitiveValue)
			primitive = true;

		if (context.reference.route == "array")
			primitive = true;

		if (context.reference.route == "map")
			primitive = true;
		
		let rtn = "";

		if (primitive) {
			rtn = "_c_index_set<" + context.type + ">(" + context.instance + ", " + context.arguments[0] + ")";
		}
		
		if (primitive == false) {
			let TType = context.parent.resolvedTemplates[0];
			rtn = "_c_index_n_set<std::unique_ptr<" + TType.reference.getRoute("::") + ">>(" + context.instance + ", " + context.arguments[0] + ", " + context.arguments[1] + ")";
		}

		return rtn;
	}

	native inline T& @index(int index) {
		var primitive = false;
		if (context.reference.primitiveValue)
			primitive = true;

		if (context.reference.route == "array")
			primitive = true;

		if (context.reference.route == "map")
			primitive = true;
		
		let rtn = "";

		if (primitive) {
			rtn = "_c_index<" + context.type + ">(" + context.instance + ", " + context.arguments[0] + ")";
		}
		
		if (primitive == false) {
			let TType = context.parent.resolvedTemplates[0];
			rtn = "_c_index_n<std::unique_ptr<" + TType.reference.getRoute("::") + ">>(" + context.instance + ", " + context.arguments[0] + ").get()";
		}

		return rtn;
	}

	native inline <T>array highToLow()
	{return context.instance + ".sort(function (a, b) {return b-a;})";}
}