[Primitive]
relative float inherits primitive {
	[operator="=", order = 10] native inline void set(float what) {return context.instance + " = " + context.arguments[0];}
	[operator="+"] native inline float add(float what) {return context.instance + " + " + context.arguments[0];}
	[operator="==", order=5] native inline bool equal(float compare) {return context.instance + " == " + context.arguments[0];}
	[operator="!=", order=5] native inline bool notEqual(float compare) {return context.instance + " != " + context.arguments[0];}
	[operator="^", order=4] native inline float pow(float to) {return context.instance + " ^ " + context.arguments[0];}
	[operator="*", order=3] native inline float multiply(float what) {return context.instance + " * " + context.arguments[0];}
	[operator="/", order=3] native inline float divide(float what) {return context.instance + " / " + context.arguments[0];}
	[operator="-"] native inline float subtract(float what) {return context.instance + " - " + context.arguments[0];}
	[operator=">", order=5] native inline bool greater(float what) {return context.instance + " > " + context.arguments[0];}
	[operator="<", order=5] native inline bool lesser(float what) {return context.instance + " < " + context.arguments[0];}
	[operator="<=", order=5] native inline bool lesserOrEqual(float what) {return context.instance + " <= " + context.arguments[0];}
	[operator=">=", order=5] native inline bool greaterOrEqual(float what) {return context.instance + " >= " + context.arguments[0];}
	[operator="++"] native inline bool increment() {return context.instance + "++";}
	[operator="--"] native inline bool decrement() {return context.instance + "--";}
	[operator="+="] native inline bool plusEquals(float what) {return context.instance + "+=" + context.arguments[0];}
	[operator="-="] native inline bool minusEquals(float what) {return context.instance + "-=" + context.arguments[0];}
	
	native inline bool isInteger() {return context.instance + " % 1 === 0";}
	
	fixed native inline float parse(string value) {return "floatval(" + context.arguments[0] + ")";}
	fixed native inline string toString() {return "strval(" + context.instance + ")";}
}