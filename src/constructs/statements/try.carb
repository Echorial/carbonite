class Carbonite.Statements.Try inherits Carbonite.Statement {
	fixed public override string type = "try";

	bound public Carbonite.Body body = empty;
	bound public <Carbonite.Catch>array catches = new <Carbonite.Catch>array();

	bound public override <void>function build(map raw, Carbonite.Body container) {
		this.body = new Carbonite.Body(container.parent, container.source, raw["body"]);
		this.body.inherit(container);

		var <map>array catches = raw["catch"];

		for (var int i in catches) {
			var cat = new Carbonite.Catch(container, catches[i]);
			this.catches.push(cat);
		}
		
		this.body.build();
	}
}

class Carbonite.Catch {
	Carbonite.Body body = null;
	Carbonite.Type overload = null;
	string name = "";

	Carbonite.Define define = null;

	void @construct(Carbonite.Body container, map raw) {

		this.name = raw["input"]["name"];

		this.body = new Carbonite.Body(container.parent, container.source, raw["body"]);
		this.body.inherit(container);

		this.overload = new Carbonite.Type(container.parent.parent.compiler, container.parent.parent);
		this.overload.loadFromRaw(raw["input"]["type"]);

		this.define = new Carbonite.Define(this.name, this.overload);
		this.define.output.isPure = true;

		this.define.container = this.body;

		if (this.body.scope.search(this.name) != null) {
			this.overload.buildError("'" + this.name + "' already defined");
		}

		this.body.scope.add(this.define);

		this.define.output.ownerDefine = this.define;

		this.body.build();
	}
}