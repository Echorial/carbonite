[Carbide]
class Carbonite.Body inherits object, Carbonite.Range {
	bound public Carbonite.Scope scope = empty;

	bound public int blockIndex = 0;

	[Expose]
	bound public <Carbonite.Statement>array statements = new <Carbonite.Statement>array();

	bound public map raw = empty;

	bound public Carbonite.Member parent = empty;
	bound public Carbonite.Type relativeOutput = empty;

	bound public Carbonite.Body parentBody = null;

	`Is this body apart of an async function or method.`
	bound public bool rootAsyncBody = false;

	`If this or its children contain an async statement.`
	bound public bool hasAsyncStatement = false;

	fixed public <Carbonite.Body>function @construct(Carbonite.Member parent, map raw) {
		this.parent = parent;
		this.raw = raw;
		this.loadLocation(parent.parent, raw);
		var Carbonite.Scope emp = empty;
		this.scope = new Carbonite.Scope(this, emp);
	}

	fixed public <Carbonite.Body>function @construct(Carbonite.Member parent, Carbonite.Class location, map raw) {
		this.parent = parent;
		this.raw = raw;
		this.loadLocation(location, raw);
		var Carbonite.Scope emp = empty;
		this.scope = new Carbonite.Scope(this, emp);
	}

	fixed public <Carbonite.Body>function @construct(Carbonite.Member parent, Carbonite.Source location, map raw) {
		this.parent = parent;
		this.raw = raw;
		this.loadLocation(location, raw);
		var Carbonite.Scope emp = empty;
		this.scope = new Carbonite.Scope(this, emp);
	}

	bound public <void>function build() {
		var <map>array statements = this.raw["code"];
		for (var int i in statements) {
			var map statement = statements[i];
			var Carbonite.Statement state = Carbonite.Statement.make(this, statement);
			state.loadFromRaw(statement);
			state.blockIndex = i;
			this.statements.push(state);
		}
	}

	bound public <void>function setHasAsyncStatement() {
		this.hasAsyncStatement = true;

		if (this.parentBody != null)
			this.parentBody.setHasAsyncStatement();
	}

	bound public <void>function inherit(Carbonite.Body parent) {
		this.scope.parent = parent.scope;
		this.relativeOutput = parent.relativeOutput;
		this.parentBody = parent;
		this.rootAsyncBody = parent.rootAsyncBody;
	}

	bound public <Carbonite.Body>function getRootBody() {
		if (this.parentBody != null)
			return this.parentBody.getRootBody();
		
		return this;
	}
}