class Carbonite.Pre.Values.Array inherits Carbonite.Pre.Value {
	bound public override string type = "array";
	bound public override <Carbonite.Pre.Value>array value = new <Carbonite.Pre.Value>array();

	bound public override <void>function setValue(map raw) {
		var <map>array arr = raw["value"];
		for (var int i in arr) {
			var map item = arr[i];
			var Carbonite.Pre.Expression val = Carbonite.Pre.Expression.make(null, item);
			val.build();
			this.value.push(val.run());
		}
	}

	bound public override <bool>function compare(map raw) {
		if (this.value == raw["value"]) {
			return true;
		}else{
			return false;
		}
	}

	bound public override <Carbonite.Pre.Value>function property(string name) {
		if (name == "length") {
			var float len = this.value.length();
			return Carbonite.Pre.Values.Number.create(len);
		}
		return Carbonite.Pre.Values.Null.create();
	}

	bound public override <Carbonite.Pre.Value>function method(string name, <Carbonite.Pre.Value>array input) {
		if (name == "length") {
			var float len = this.value.length();
			return Carbonite.Pre.Values.Number.create(len);
		}else if (name == "index") {
			var Carbonite.Pre.Value ind = input[0];
			var Carbonite.Pre.Value found = this.value[ind.value];
			return found;
		}else if (name == "push") {
			var Carbonite.Pre.Value ind = input[0];
			var Carbonite.Pre.Value found = this.value.push(ind);
		}else if (name == "pop") {
			this.value.pop();
		}
		return Carbonite.Pre.Values.Null.create();
	}

	fixed public override <Carbonite.Pre.Values.Array>function create(<Carbonite.Pre.Value>array val) {
		var map m = new map();
		var Carbonite.Pre.Values.Array value = new Carbonite.Pre.Values.Array(m);
		value.value = val;
		return value;
	}

	bound public override <void>function iterate(Carbonite.Pre.Variable vKey, Carbonite.Pre.Variable v, Carbonite.Pre.Block code) {
		for (var int i in this.value) {
			vKey.value.value = i;
			v.value = this.value[i];
			code.run();
		}
	}
}