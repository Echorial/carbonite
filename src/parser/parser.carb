class Carbonite.CarbonParserLocation inherits object {
bound public int offset = 0;
bound public int line = 1;
bound public int column = 0;
fixed public <Carbonite.CarbonParserLocation>function @construct(int offset, int line, int column) {
this.offset = offset; this.line = line; this.column = column;
}
}

class Carbonite.CarbonParserError inherits Carbonite.CarbonParserLocation {
bound public int code = 0;
bound public string found = 0;
bound public string expected = 0;
bound public int vested = 0;
bound public <Carbonite.CarbonParserError>array path = new <Carbonite.CarbonParserError>array();
}

class <class T>Carbonite.CarbonParserOutput inherits object {
	fixed public <Carbonite.CarbonParserOutput>function @construct(bool hadError, Carbonite.CarbonParserError error, map data) {this.hadError = hadError; this.error = error; this.data = data;}
	bound public Carbonite.CarbonParserError error = empty;
	bound public bool hadError = false;
	bound public map data = 
	new map();
}
class Carbonite.CarbonParser inherits Carbonite.CarbonParserLocation {
fixed public override <Carbonite.CarbonParser>function @construct() {}
fixed public <<map>Carbonite.CarbonParserOutput>function parse(string input) {	var <map>Carbonite.CarbonParser parser = new <map>Carbonite.CarbonParser();
	var map output = parser.start(input);
	if (parser.hadError and parser.error.found == "") {
		parser.error.found = "End of input";
}
	var <map>Carbonite.CarbonParserOutput rtn = new Carbonite.CarbonParserOutput(parser.hadError, parser.error, parser.data["data"]);
	return rtn;
}
bound public <Carbonite.CarbonParserError>array lastErrors = new <Carbonite.CarbonParserError>array();
bound public bool hadError = false;
bound public int parsedChars = 0;
bound public string currentInput = new string();
bound public map data = new map();
bound public Carbonite.CarbonParserError error = new Carbonite.CarbonParserError(0, 0, 0);
bound public <string>function assembleCodes(<int>array codes) {
	var string rtn = new string();
	for (var int i in codes) {
		rtn += string.fromCharCode(codes[i]);
	}
	return rtn;}
bound public <void>function giveError(int code, string expected, string found) {
this.hadError = true;
this.error.code = code;
this.error.expected = expected;
this.error.found = found;
this.error.offset = this.offset;
this.error.line = 1;
this.error.column = 0;
}

bound public <map>function start(string input) {
	this.currentInput = input;
	input += "";	this.data["data"] = new map();
	var map data = this.data["data"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = 0; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (c == 0 - 1) {if (currentChar != "") {this.giveError(2, "EOF", currentChar);}}
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Document(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Document(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["document"] = ruleOutCast0;
		c = 0 - 1;
		
	}
}		this.offset++; 
 this.column++;
		if (this.hadError) {break;}
	}
	for (var int i = 0; i < this.error.offset; i++) {
		this.error.column++;
		if (this.currentInput[i] == "\n") {this.error.line++; this.error.column = 0;}
	}
	if (false and this.hadError == false) {
		if (this.offset < input.length() - 1) {
			this.giveError("2", "EOF", input[this.offset + 1]);		}
	}
}
bound public <<map>Carbonite.CarbonParserOutput>function Document(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["roots"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Root(input, charPos);
	
if (ruleOut0.hadError) {
		
var <map>array castacroots0 = data["roots"];
var <map>array actionCap0roots = data["roots"];dataStore["data"]["type"] = "document";
dataStore["data"]["roots"] = actionCap0roots;
c = 0 - 1; charPos--; this.offset--;
		if (ruleOut0.error.vested > 1) {this.giveError(ruleOut0.error.code, ruleOut0.error.expected, ruleOut0.error.found);}
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array castroots0 = data["roots"];
castroots0.push(ruleOutCast0);

var <map>array castacroots0 = data["roots"];
var <map>array actionCap0roots = data["roots"];dataStore["data"]["type"] = "document";
dataStore["data"]["roots"] = actionCap0roots;

		c = 0;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function Safe_Name(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["after"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 95) {passed0 = true;}else if (currentCode == 64) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 97, 122)) {passed0 = true;}else if (int.mid(currentCode, 65, 90)) {passed0 = true;}
	}
	if (passed0) {
		data["start"] = currentChar;
c = 1;		this.error.vested++;

	}else{
		this.giveError(1, "a-z, A-Z, _, @", currentChar);
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 95) {passed1 = true;}else if (currentCode == 46) {passed1 = true;}
	if (passed1 == false) {
		if (int.mid(currentCode, 97, 122)) {passed1 = true;}else if (int.mid(currentCode, 65, 90)) {passed1 = true;}else if (int.mid(currentCode, 48, 57)) {passed1 = true;}
	}
	if (passed1) {
		data["after"] += currentChar;

var string castacafter1 = data["after"];
var string actionCap1start = data["start"];var string actionCap1after = data["after"];dataStore["data"] = actionCap1start + actionCap1after;
c = 1;		this.error.vested++;

	}else{
		
var string castacafter1 = data["after"];
var string actionCap1start = data["start"];var string actionCap1after = data["after"];dataStore["data"] = actionCap1start + actionCap1after;c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Template(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["types"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 60) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "<", currentChar);
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Type(input, charPos);
	
if (ruleOut1.hadError) {
		var <map>array casttypes1 = data["types"];
if (casttypes1.length() >= 1) {
c = 2; charPos--; this.offset--;}else{
this.giveError(1, "Type", currentChar);}

		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array casttypes1 = data["types"];
casttypes1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 2;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 62) {
			
var string castac3 = data[""];
var <map>array actionCap3types = data["types"];dataStore["data"]["types"] = actionCap3types;
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ">", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Template_Def(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>Carbonite.CarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
var string castac4 = data[""];
var string actionCap4name = data["name"];var string actionCap4type = data["type"];dataStore["data"]["name"] = actionCap4name;
dataStore["data"]["type"] = actionCap4type;

		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Template_Type(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["templates"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 60) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "<", currentChar);
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Template_Def(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		if (ruleOut1.error.vested > 1) {this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);}
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array casttemplates1 = data["templates"];
casttemplates1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 2;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 62) {
			
var string castac3 = data[""];
var <map>array actionCap3templates = data["templates"];dataStore["data"]["templates"] = actionCap3templates;
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ">", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Inherit(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["types"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [105, 110, 104, 101, 114, 105, 116, 115];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.__(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Type(input, charPos);
	
if (ruleOut2.hadError) {
		var <map>array casttypes2 = data["types"];
if (casttypes2.length() >= 1) {

var <map>array castactypes2 = data["types"];
var <map>array actionCap2types = data["types"];dataStore["data"]["types"] = actionCap2types;
c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "Type", currentChar);}

		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array casttypes2 = data["types"];
casttypes2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {

var <map>array castactypes2 = data["types"];
var <map>array actionCap2types = data["types"];dataStore["data"]["types"] = actionCap2types;
c = 0 - 1;
shiv.continue();}else {charPos++;}
var <map>array castactypes2 = data["types"];
var <map>array actionCap2types = data["types"];dataStore["data"]["types"] = actionCap2types;

		c = 2;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Root(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


data["templates"] = new <map>array();








data["members"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <int>array lit1 = [110, 97, 116, 105, 118, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			data["type"] = this.assembleCodes(lit1);
			c = 5;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	var <int>array lit2 = [99, 108, 97, 115, 115];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			data["type"] = this.assembleCodes(lit2);
			c = 5;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
	var <int>array lit3 = [101, 120, 116, 101, 110, 100];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			data["type"] = this.assembleCodes(lit3);
			c = 5;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 4; charPos--; this.offset--;
	}
}else if (c == 4) {
	var <int>array lit4 = [110, 97, 109, 101, 115, 112, 97, 99, 101];
	if (currentCode == lit4[literalChar]) {
		literalChar++;
		if (literalChar == 9) {
			data["type"] = this.assembleCodes(lit4);
			c = 5;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "native, class, extend, namespace", currentChar);
	}
}else if (c == 5) {
	var <string>Carbonite.CarbonParserOutput ruleOut5 = this.__(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>Carbonite.CarbonParserOutput ruleOut6 = this.Template_Type(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		if (ruleOut6.error.vested > 1) {this.giveError(ruleOut6.error.code, ruleOut6.error.expected, ruleOut6.error.found);}
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		var <map>array casttemplates6 = data["templates"];
casttemplates6.push(ruleOutCast6);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 6;
		this.error.vested++;
	}
}else if (c == 7) {
	var <string>Carbonite.CarbonParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	var <string>Carbonite.CarbonParserOutput ruleOut8 = this.Safe_Name(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "Safe_Name(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast8;
		c = 9;
		this.error.vested++;
	}
}else if (c == 9) {
	var <string>Carbonite.CarbonParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	var <map>Carbonite.CarbonParserOutput ruleOut10 = this.Inherit(input, charPos);
	
if (ruleOut10.hadError) {
		c = 11; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["inherits"] = ruleOutCast10;
		c = 11;
		this.error.vested++;
	}
}else if (c == 11) {
	var <string>Carbonite.CarbonParserOutput ruleOut11 = this._(input, charPos);
	
if (ruleOut11.hadError) {
		this.giveError(ruleOut11.error.code, "White space(optional)(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
		
	}else{
		var string ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		
		c = 12;
		
	}
}else if (c == 12) {
	if (currentCode == 123) {
			
			c = 13;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 13) {
	var <string>Carbonite.CarbonParserOutput ruleOut13 = this._(input, charPos);
	
if (ruleOut13.hadError) {
		this.giveError(ruleOut13.error.code, "White space(optional)(" + ruleOut13.error.expected + ")", ruleOut13.error.found);
		
	}else{
		var string ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		
		c = 14;
		
	}
}else if (c == 14) {
	var <map>Carbonite.CarbonParserOutput ruleOut14 = this.Member(input, charPos);
	
if (ruleOut14.hadError) {
		c = 15; charPos--; this.offset--;
		if (ruleOut14.error.vested > 1) {this.giveError(ruleOut14.error.code, ruleOut14.error.expected, ruleOut14.error.found);}
	}else{
		var map ruleOutCast14 = ruleOut14.data["data"];
charPos = this.offset;
		var <map>array castmembers14 = data["members"];
castmembers14.push(ruleOutCast14);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 14;
		this.error.vested++;
	}
}else if (c == 15) {
	var <string>Carbonite.CarbonParserOutput ruleOut15 = this._(input, charPos);
	
if (ruleOut15.hadError) {
		this.giveError(ruleOut15.error.code, "White space(optional)(" + ruleOut15.error.expected + ")", ruleOut15.error.found);
		
	}else{
		var string ruleOutCast15 = ruleOut15.data["data"];
charPos = this.offset;
		
		c = 16;
		
	}
}else if (c == 16) {
	if (currentCode == 125) {
			
var string castac16 = data[""];
var map actionCap16type = data["type"];var string actionCap16name = data["name"];var <map>array actionCap16members = data["members"];var map actionCap16inherits = data["inherits"];var <map>array actionCap16templates = data["templates"];dataStore["data"]["type"] = actionCap16type;
dataStore["data"]["name"] = actionCap16name;
dataStore["data"]["members"] = actionCap16members;
dataStore["data"]["inherits"] = actionCap16inherits;
dataStore["data"]["templates"] = actionCap16templates;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Type(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Template(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["template"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
var string castacname2 = data["name"];
var string actionCap2name = data["name"];var map actionCap2template = data["template"];
dataStore["data"]["name"] = actionCap2name;
if (actionCap2template != empty) {
	var <map>array tt = actionCap2template["types"];
	dataStore["data"]["template"] = tt;
}else{
	dataStore["data"]["template"] = false;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Parameter(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Type(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Type(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
var string castacname3 = data["name"];
var map actionCap3type = data["type"];var string actionCap3name = data["name"];dataStore["data"]["type"] = actionCap3type;
dataStore["data"]["name"] = actionCap3name;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Method(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["parameters"] = new <map>array();





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 40) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Parameter(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castparameters2 = data["parameters"];
castparameters2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 41) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 5) {
	var <string>Carbonite.CarbonParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>Carbonite.CarbonParserOutput ruleOut6 = this.Block(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Block(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast6;
var map castacbody6 = data["body"];
var <map>array actionCap6parameters = data["parameters"];var map actionCap6body = data["body"];dataStore["data"]["type"] = "method";
dataStore["data"]["parameters"] = actionCap6parameters;
dataStore["data"]["body"] = actionCap6body;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Property(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 61) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 59) {
			
var string castac4 = data[""];
var map actionCap4exp = data["exp"];dataStore["data"]["type"] = "property";
dataStore["data"]["value"] = actionCap4exp;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Member_Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Method(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast0;
var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Property(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "Method, Property", currentChar);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast1;
var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Member(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




data["flags"] = new <map>array();




data["templates"] = new <map>array();





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <int>array lit1 = [102, 105, 120, 101, 100];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			data["binding"] = this.assembleCodes(lit1);
			c = 3;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	var <int>array lit2 = [98, 111, 117, 110, 100];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			data["binding"] = this.assembleCodes(lit2);
			c = 3;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <int>array lit4 = [112, 117, 98, 108, 105, 99];
	if (currentCode == lit4[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			data["visibility"] = this.assembleCodes(lit4);
			c = 7;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 5; charPos--; this.offset--;
	}
}else if (c == 5) {
	var <int>array lit5 = [112, 114, 105, 118, 97, 116, 101];
	if (currentCode == lit5[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			data["visibility"] = this.assembleCodes(lit5);
			c = 7;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 6; charPos--; this.offset--;
	}
}else if (c == 6) {
	var <int>array lit6 = [112, 114, 111, 116, 101, 99, 116, 101, 100];
	if (currentCode == lit6[literalChar]) {
		literalChar++;
		if (literalChar == 9) {
			data["visibility"] = this.assembleCodes(lit6);
			c = 7;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 7; charPos--; this.offset--;
	}
}else if (c == 7) {
	var <string>Carbonite.CarbonParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	var <int>array lit8 = [111, 118, 101, 114, 114, 105, 100, 101];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			var <map>array castflags8 = data["flags"];
castflags8.push(this.assembleCodes(lit8));
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

			c = 8;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 9; charPos--; this.offset--;
	}
}else if (c == 9) {
	var <int>array lit9 = [105, 110, 106, 101, 99, 116];
	if (currentCode == lit9[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			var <map>array castflags8 = data["flags"];
castflags8.push(this.assembleCodes(lit9));
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

			c = 8;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 10; charPos--; this.offset--;
	}
}else if (c == 10) {
	var <string>Carbonite.CarbonParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		
		c = 11;
		
	}
}else if (c == 11) {
	var <map>Carbonite.CarbonParserOutput ruleOut11 = this.Type(input, charPos);
	
if (ruleOut11.hadError) {
		this.giveError(ruleOut11.error.code, "Type(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
		
	}else{
		var map ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast11;
		c = 12;
		this.error.vested++;
	}
}else if (c == 12) {
	var <string>Carbonite.CarbonParserOutput ruleOut12 = this.__(input, charPos);
	
if (ruleOut12.hadError) {
		this.giveError(ruleOut12.error.code, "White space(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
		
	}else{
		var string ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		
		c = 13;
		
	}
}else if (c == 13) {
	var <map>Carbonite.CarbonParserOutput ruleOut13 = this.Template_Type(input, charPos);
	
if (ruleOut13.hadError) {
		c = 14; charPos--; this.offset--;
		if (ruleOut13.error.vested > 1) {this.giveError(ruleOut13.error.code, ruleOut13.error.expected, ruleOut13.error.found);}
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		var <map>array casttemplates13 = data["templates"];
casttemplates13.push(ruleOutCast13);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 13;
		this.error.vested++;
	}
}else if (c == 14) {
	var <string>Carbonite.CarbonParserOutput ruleOut14 = this._(input, charPos);
	
if (ruleOut14.hadError) {
		this.giveError(ruleOut14.error.code, "White space(optional)(" + ruleOut14.error.expected + ")", ruleOut14.error.found);
		
	}else{
		var string ruleOutCast14 = ruleOut14.data["data"];
charPos = this.offset;
		
		c = 15;
		
	}
}else if (c == 15) {
	var <string>Carbonite.CarbonParserOutput ruleOut15 = this.Safe_Name(input, charPos);
	
if (ruleOut15.hadError) {
		this.giveError(ruleOut15.error.code, "Safe_Name(" + ruleOut15.error.expected + ")", ruleOut15.error.found);
		
	}else{
		var string ruleOutCast15 = ruleOut15.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast15;
		c = 16;
		this.error.vested++;
	}
}else if (c == 16) {
	var <string>Carbonite.CarbonParserOutput ruleOut16 = this._(input, charPos);
	
if (ruleOut16.hadError) {
		this.giveError(ruleOut16.error.code, "White space(optional)(" + ruleOut16.error.expected + ")", ruleOut16.error.found);
		
	}else{
		var string ruleOutCast16 = ruleOut16.data["data"];
charPos = this.offset;
		
		c = 17;
		
	}
}else if (c == 17) {
	var <map>Carbonite.CarbonParserOutput ruleOut17 = this.Member_Value(input, charPos);
	
if (ruleOut17.hadError) {
		this.giveError(ruleOut17.error.code, "Member_Value(" + ruleOut17.error.expected + ")", ruleOut17.error.found);
		
	}else{
		var map ruleOutCast17 = ruleOut17.data["data"];
charPos = this.offset;
		data["val"] = ruleOutCast17;
var map castacval17 = data["val"];
var map actionCap17val = data["val"];var map actionCap17binding = data["binding"];var map actionCap17visibility = data["visibility"];var map actionCap17type = data["type"];var string actionCap17name = data["name"];var <map>array actionCap17flags = data["flags"];var <map>array actionCap17templates = data["templates"];dataStore["data"]["type"] = actionCap17val["type"];
dataStore["data"]["binding"] = actionCap17binding;
dataStore["data"]["visibilty"] = actionCap17visibility;
dataStore["data"]["output"] = actionCap17type;
dataStore["data"]["name"] = actionCap17name;
dataStore["data"]["value"] = actionCap17val;
dataStore["data"]["flags"] = actionCap17flags;
dataStore["data"]["templates"] = actionCap17templates;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Group(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 40) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	if (currentCode == 41) {
			
var string castac2 = data[""];
var map actionCap2exp = data["exp"];dataStore["data"]["type"] = "group"; dataStore["data"]["expression"] = actionCap2exp;
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Constant(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this.Safe_Name(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast0;
var string castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"]["type"] = "constant";
dataStore["data"]["name"] = actionCap0name;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Literal_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["num"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 46) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["num"] += currentChar;

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "number";
dataStore["data"]["value"] = string.parseFloat(actionCap0num);

c = 0;		this.error.vested++;

	}else{
		var string castnum0 = data["num"];
if (castnum0.length() >= 1) {

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "number";
dataStore["data"]["value"] = string.parseFloat(actionCap0num);
c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, .", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Literal_Boolean(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [116, 114, 117, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
var string castacbool0 = data["bool"];
data["bool"] = true;
var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;

			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [102, 97, 108, 115, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
var string castacbool1 = data["bool"];
data["bool"] = false;
var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;

			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "true, false", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Literal_String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this.String(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;
var string castacstr0 = data["str"];
var string actionCap0str = data["str"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "string";
dataStore["data"]["value"] = actionCap0str;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Literal_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["arr"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		if (ruleOut1.error.vested > 1) {this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);}
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array castarr1 = data["arr"];
castarr1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 2;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 93) {
			
var string castac3 = data[""];
var <map>array actionCap3arr = data["arr"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "array";
dataStore["data"]["value"] = actionCap3arr;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Literal_Map_Key(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["key"] = ruleOutCast1;
		c = 3;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.String(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Safe_Name, String", currentChar);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["key"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 58) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, ":", currentChar);
	}
}else if (c == 5) {
	var <string>Carbonite.CarbonParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>Carbonite.CarbonParserOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast6;
var map castacvalue6 = data["value"];
var map actionCap6key = data["key"];var map actionCap6value = data["value"];dataStore["data"]["key"] = actionCap6key;
dataStore["data"]["value"] = actionCap6value;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Literal_Map(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["arr"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Literal_Map_Key(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castarr2 = data["arr"];
castarr2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 125) {
			
var string castac4 = data[""];
var <map>array actionCap4arr = data["arr"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "map";
dataStore["data"]["value"] = actionCap4arr;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Literal(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Literal_Number(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast0;
var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;
		c = 0 - 1;
		
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Literal_Boolean(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast1;
var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Literal_String(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast2;
var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>Carbonite.CarbonParserOutput ruleOut3 = this.Literal_Array(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast3;
var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.Literal_Map(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(1, "Literal_Number, Literal_Boolean, Literal_String, Literal_Array, Literal_Map", currentChar);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast4;
var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Prefix(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [110, 101, 119];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			data["pre"] = this.assembleCodes(lit0);
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.__(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;
var map castacexp2 = data["exp"];
var string actionCap2pre = data["pre"];var map actionCap2exp = data["exp"];dataStore["data"]["type"] = "prefix";
dataStore["data"]["prefix"] = actionCap2pre;
dataStore["data"]["expression"] = actionCap2exp;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Appendix_Dot(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	if (currentCode == 46) {
			
			c = 2;
			this.error.vested++;
	}else{
		this.giveError(1, ".", currentChar);
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
var string castacname3 = data["name"];
var string actionCap3name = data["name"];dataStore["data"]["type"] = "dot";
dataStore["data"]["name"] = actionCap3name;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Appendix_Call(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




data["exp"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Template(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["templates"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 40) {
			
			c = 4;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 4) {
	var <string>Carbonite.CarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.Expression(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		if (ruleOut5.error.vested > 1) {this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);}
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <map>array castexp5 = data["exp"];
castexp5.push(ruleOutCast5);
if (input.charCodeAt(charPos + 1) != 44) {
c = 6;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 5;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>Carbonite.CarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	if (currentCode == 41) {
			
var string castac7 = data[""];
var <map>array actionCap7exp = data["exp"];var map actionCap7templates = data["templates"];dataStore["data"]["type"] = "call";
dataStore["data"]["expression"] = actionCap7exp;
dataStore["data"]["templates"] = actionCap7templates;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Appendix_Index(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	if (currentCode == 91) {
			
			c = 2;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>Carbonite.CarbonParserOutput ruleOut3 = this.Expression(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Expression(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>Carbonite.CarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 93) {
			
var string castac5 = data[""];
var map actionCap5exp = data["exp"];dataStore["data"]["type"] = "index";
dataStore["data"]["expression"] = actionCap5exp;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Appendix_Code(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Block(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Block(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["code"] = ruleOutCast1;
var map castaccode1 = data["code"];
var map actionCap1code = data["code"];dataStore["data"]["type"] = "code";
dataStore["data"]["code"] = actionCap1code;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Appendix(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Appendix_Dot(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast0;
var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Appendix_Call(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast1;
var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Appendix_Index(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast2;
var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>Carbonite.CarbonParserOutput ruleOut3 = this.Appendix_Code(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(1, "Appendix_Dot, Appendix_Call, Appendix_Index, Appendix_Code", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast3;
var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Term(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["prefix"] = new string();



data["appendix"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 33) {passed0 = true;}else if (currentCode == 64) {passed0 = true;}else if (currentCode == 35) {passed0 = true;}else if (currentCode == 58) {passed0 = true;}else if (currentCode == 36) {passed0 = true;}else if (currentCode == 37) {passed0 = true;}else if (currentCode == 94) {passed0 = true;}else if (currentCode == 38) {passed0 = true;}else if (currentCode == 42) {passed0 = true;}else if (currentCode == 95) {passed0 = true;}else if (currentCode == 43) {passed0 = true;}else if (currentCode == 61) {passed0 = true;}else if (currentCode == 126) {passed0 = true;}else if (currentCode == 96) {passed0 = true;}else if (currentCode == 62) {passed0 = true;}else if (currentCode == 124) {passed0 = true;}else if (currentCode == 47) {passed0 = true;}else if (currentCode == 45) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		data["prefix"] += currentChar;
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

c = 0;		this.error.vested++;

	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Template(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["template"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Literal(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast2;
		c = 6;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>Carbonite.CarbonParserOutput ruleOut3 = this.Prefix(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast3;
		c = 6;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.Constant(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast4;
		c = 6;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.Group(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Literal, Prefix, Constant, Group", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>Carbonite.CarbonParserOutput ruleOut6 = this.Appendix(input, charPos);
	
if (ruleOut6.hadError) {
		
var <map>array castacappendix6 = data["appendix"];
var map actionCap6e = data["e"];var <map>array actionCap6appendix = data["appendix"];var map actionCap6template = data["template"];var string actionCap6prefix = data["prefix"];dataStore["data"] = actionCap6e; dataStore["data"]["appendix"] = actionCap6appendix; if (actionCap6template != empty) {dataStore["data"]["template"] = actionCap6template;} if (actionCap6prefix.length() > 0) {dataStore["data"]["prefix"] = actionCap6prefix;}c = 0 - 1; charPos--; this.offset--;
		if (ruleOut6.error.vested > 1) {this.giveError(ruleOut6.error.code, ruleOut6.error.expected, ruleOut6.error.found);}
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		var <map>array castappendix6 = data["appendix"];
castappendix6.push(ruleOutCast6);

var <map>array castacappendix6 = data["appendix"];
var map actionCap6e = data["e"];var <map>array actionCap6appendix = data["appendix"];var map actionCap6template = data["template"];var string actionCap6prefix = data["prefix"];dataStore["data"] = actionCap6e; dataStore["data"]["appendix"] = actionCap6appendix; if (actionCap6template != empty) {dataStore["data"]["template"] = actionCap6template;} if (actionCap6prefix.length() > 0) {dataStore["data"]["prefix"] = actionCap6prefix;}
		c = 6;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function Operand_Symbolic(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["operator"] = new string();


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 33) {passed1 = true;}else if (currentCode == 64) {passed1 = true;}else if (currentCode == 58) {passed1 = true;}else if (currentCode == 36) {passed1 = true;}else if (currentCode == 37) {passed1 = true;}else if (currentCode == 94) {passed1 = true;}else if (currentCode == 38) {passed1 = true;}else if (currentCode == 42) {passed1 = true;}else if (currentCode == 95) {passed1 = true;}else if (currentCode == 43) {passed1 = true;}else if (currentCode == 61) {passed1 = true;}else if (currentCode == 126) {passed1 = true;}else if (currentCode == 96) {passed1 = true;}else if (currentCode == 124) {passed1 = true;}else if (currentCode == 62) {passed1 = true;}else if (currentCode == 47) {passed1 = true;}else if (currentCode == 60) {passed1 = true;}else if (currentCode == 45) {passed1 = true;}
	if (passed1 == false) {
		
	}
	if (passed1) {
		data["operator"] += currentChar;

c = 1;		this.error.vested++;

	}else{
		var string castoperator1 = data["operator"];
if (castoperator1.length() >= 1) {
c = 2; charPos--; this.offset--;}else{
this.giveError(1, "!, @, :, $, %, ^, &, *, _, +, =, ~, `, |, >, /, <, -", currentChar);}

	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
var string castac2 = data[""];
var string actionCap2operator = data["operator"];dataStore["data"] = actionCap2operator;
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function Operand_Word(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["operator"] = new string();


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this.__(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 95) {passed1 = true;}else if (currentCode == 33) {passed1 = true;}else if (currentCode == 64) {passed1 = true;}else if (currentCode == 35) {passed1 = true;}else if (currentCode == 36) {passed1 = true;}else if (currentCode == 37) {passed1 = true;}else if (currentCode == 94) {passed1 = true;}else if (currentCode == 38) {passed1 = true;}else if (currentCode == 42) {passed1 = true;}else if (currentCode == 95) {passed1 = true;}else if (currentCode == 43) {passed1 = true;}else if (currentCode == 61) {passed1 = true;}else if (currentCode == 126) {passed1 = true;}else if (currentCode == 96) {passed1 = true;}else if (currentCode == 124) {passed1 = true;}else if (currentCode == 62) {passed1 = true;}else if (currentCode == 60) {passed1 = true;}else if (currentCode == 47) {passed1 = true;}else if (currentCode == 45) {passed1 = true;}
	if (passed1 == false) {
		if (int.mid(currentCode, 65, 90)) {passed1 = true;}else if (int.mid(currentCode, 97, 122)) {passed1 = true;}else if (int.mid(currentCode, 48, 57)) {passed1 = true;}
	}
	if (passed1) {
		data["operator"] += currentChar;

c = 1;		this.error.vested++;

	}else{
		var string castoperator1 = data["operator"];
if (castoperator1.length() >= 1) {
c = 2; charPos--; this.offset--;}else{
this.giveError(1, "A-Z, a-z, 0-9, _, !, @, #, $, %, ^, &, *, _, +, =, ~, `, |, >, <, /, -", currentChar);}

	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
var string castac2 = data[""];
var string actionCap2operator = data["operator"];dataStore["data"] = actionCap2operator;
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Operation(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Term(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Term(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["head"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.Operand_Symbolic(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["operator"] = ruleOutCast1;
var map castacoperator1 = data["operator"];
var map actionCap1operator = data["operator"];var map actionCap1head = data["head"];dataStore["data"]["operator"] = actionCap1operator;
dataStore["data"]["term"] = actionCap1head;

		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.Operand_Word(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Operand_Symbolic, Operand_Word", currentChar);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["operator"] = ruleOutCast2;
var map castacoperator1 = data["operator"];
var map actionCap1operator = data["operator"];var map actionCap1head = data["head"];dataStore["data"]["operator"] = actionCap1operator;
dataStore["data"]["term"] = actionCap1head;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Expression(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Expression_Operation(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Expression_Operation(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;
var map castacexp1 = data["exp"];
var map actionCap1exp = data["exp"];dataStore["data"] = actionCap1exp;
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Expression_Line(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Expression(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Expression(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 59) {
			
var string castac2 = data[""];
var map actionCap2exp = data["exp"];dataStore["data"] = actionCap2exp;
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Expression_Operation(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["exp"] = new <map>array();


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Operation(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		if (ruleOut0.error.vested > 1) {this.giveError(ruleOut0.error.code, ruleOut0.error.expected, ruleOut0.error.found);}
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array castexp0 = data["exp"];
castexp0.push(ruleOutCast0);

		c = 0;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Term(input, charPos);
	
if (ruleOut1.hadError) {
		c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["t"] = ruleOutCast1;
var map castact1 = data["t"];
var <map>array actionCap1exp = data["exp"];var map actionCap1t = data["t"];actionCap1exp.push(actionCap1t); dataStore["data"]["terms"] = actionCap1exp; dataStore["data"]["type"] = "expression";
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Block(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["code"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Statement(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castcode2 = data["code"];
castcode2.push(ruleOutCast2);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 125) {
			
var string castac4 = data[""];
var <map>array actionCap4code = data["code"];dataStore["data"]["type"] = "Block";
dataStore["data"]["code"] = actionCap4code;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Statement(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.If(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast1;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Define(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast2;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>Carbonite.CarbonParserOutput ruleOut3 = this.Define_Auto(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast3;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.For(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast4;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.For_In(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast5;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>Carbonite.CarbonParserOutput ruleOut6 = this.Break(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast6;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>Carbonite.CarbonParserOutput ruleOut7 = this.Continue(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast7;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 8) {
	var <map>Carbonite.CarbonParserOutput ruleOut8 = this.While(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast8;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 9) {
	var <map>Carbonite.CarbonParserOutput ruleOut9 = this.Return(input, charPos);
	
if (ruleOut9.hadError) {
		c = 10; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast9;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 10) {
	var <map>Carbonite.CarbonParserOutput ruleOut10 = this.Expression_Line(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(1, "If, Define, Define_Auto, For, For_In, Break, Continue, While, Return, Expression_Line", currentChar);
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast10;
var map castacstate1 = data["state"];
var map actionCap1state = data["state"];dataStore["data"] = actionCap1state;
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function If(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





data["alt"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [105, 102];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Group(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.Block(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast4;
		c = 6;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.Statement(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Block, Statement", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>Carbonite.CarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>Carbonite.CarbonParserOutput ruleOut7 = this.ElseIf(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		var <map>array castalt7 = data["alt"];
castalt7.push(ruleOutCast7);

var <map>array castacalt7 = data["alt"];
var <map>array actionCap7alt = data["alt"];var map actionCap7check = data["check"];var map actionCap7body = data["body"];dataStore["data"]["type"] = "if";
dataStore["data"]["alternatives"] = actionCap7alt;
dataStore["data"]["check"] = actionCap7check;
dataStore["data"]["body"] = actionCap7body;

		c = 7;
		this.error.vested++;
	}
}else if (c == 8) {
	var <map>Carbonite.CarbonParserOutput ruleOut8 = this.Else(input, charPos);
	
if (ruleOut8.hadError) {
		
var <map>array castacalt7 = data["alt"];
var <map>array actionCap7alt = data["alt"];var map actionCap7check = data["check"];var map actionCap7body = data["body"];dataStore["data"]["type"] = "if";
dataStore["data"]["alternatives"] = actionCap7alt;
dataStore["data"]["check"] = actionCap7check;
dataStore["data"]["body"] = actionCap7body;
c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		var <map>array castalt7 = data["alt"];
castalt7.push(ruleOutCast8);

var <map>array castacalt7 = data["alt"];
var <map>array actionCap7alt = data["alt"];var map actionCap7check = data["check"];var map actionCap7body = data["body"];dataStore["data"]["type"] = "if";
dataStore["data"]["alternatives"] = actionCap7alt;
dataStore["data"]["check"] = actionCap7check;
dataStore["data"]["body"] = actionCap7body;

		c = 7;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function ElseIf(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [101, 108, 115, 101, 32, 105, 102];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Group(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.Block(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast4;
var map castacbody4 = data["body"];
var map actionCap4check = data["check"];var map actionCap4body = data["body"];dataStore["data"]["type"] = "elseif";
dataStore["data"]["check"] = actionCap4check;
dataStore["data"]["body"] = actionCap4body;

		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.Statement(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Block, Statement", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast5;
var map castacbody4 = data["body"];
var map actionCap4check = data["check"];var map actionCap4body = data["body"];dataStore["data"]["type"] = "elseif";
dataStore["data"]["check"] = actionCap4check;
dataStore["data"]["body"] = actionCap4body;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Else(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [101, 108, 115, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Block(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast2;
var map castacbody2 = data["body"];
var map actionCap2body = data["body"];dataStore["data"]["type"] = "else";
dataStore["data"]["body"] = actionCap2body;

		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>Carbonite.CarbonParserOutput ruleOut3 = this.Statement(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(1, "Block, Statement", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast3;
var map castacbody2 = data["body"];
var map actionCap2body = data["body"];dataStore["data"]["type"] = "else";
dataStore["data"]["body"] = actionCap2body;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function For(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	












			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [102, 111, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 40) {
			
			c = 3;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.Define(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["define"] = ruleOutCast4;
		c = 6;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.Define_Auto(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Define, Define_Auto", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["define"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>Carbonite.CarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>Carbonite.CarbonParserOutput ruleOut7 = this.Expression(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Expression(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["iterate"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	if (currentCode == 59) {
			
			c = 9;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}else if (c == 9) {
	var <string>Carbonite.CarbonParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	var <map>Carbonite.CarbonParserOutput ruleOut10 = this.Expression(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "Expression(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast10;
		c = 11;
		this.error.vested++;
	}
}else if (c == 11) {
	if (currentCode == 41) {
			
			c = 12;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 12) {
	var <string>Carbonite.CarbonParserOutput ruleOut12 = this._(input, charPos);
	
if (ruleOut12.hadError) {
		this.giveError(ruleOut12.error.code, "White space(optional)(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
		
	}else{
		var string ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		
		c = 13;
		
	}
}else if (c == 13) {
	var <map>Carbonite.CarbonParserOutput ruleOut13 = this.Block(input, charPos);
	
if (ruleOut13.hadError) {
		c = 14; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast13;
var map castacbody13 = data["body"];
var map actionCap13define = data["define"];var map actionCap13iterate = data["iterate"];var map actionCap13check = data["check"];var map actionCap13body = data["body"];dataStore["data"]["type"] = "for";
dataStore["data"]["define"] = actionCap13define;
dataStore["data"]["iterate"] = actionCap13iterate;
dataStore["data"]["check"] = actionCap13check;
dataStore["data"]["body"] = actionCap13body;

		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 14) {
	var <map>Carbonite.CarbonParserOutput ruleOut14 = this.Statement(input, charPos);
	
if (ruleOut14.hadError) {
		this.giveError(1, "Block, Statement", currentChar);
		
	}else{
		var map ruleOutCast14 = ruleOut14.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast14;
var map castacbody13 = data["body"];
var map actionCap13define = data["define"];var map actionCap13iterate = data["iterate"];var map actionCap13check = data["check"];var map actionCap13body = data["body"];dataStore["data"]["type"] = "for";
dataStore["data"]["define"] = actionCap13define;
dataStore["data"]["iterate"] = actionCap13iterate;
dataStore["data"]["check"] = actionCap13check;
dataStore["data"]["body"] = actionCap13body;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function For_In(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	











			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [102, 111, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 40) {
			
			c = 3;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.Inline_Def(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "Inline_Def(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["define"] = ruleOutCast4;
		c = 5;
		this.error.vested++;
	}
}else if (c == 5) {
	var <string>Carbonite.CarbonParserOutput ruleOut5 = this.__(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <int>array lit6 = [105, 110];
	if (currentCode == lit6[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 7;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit6) + "", currentChar);
	}
}else if (c == 7) {
	var <string>Carbonite.CarbonParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	var <map>Carbonite.CarbonParserOutput ruleOut8 = this.Expression(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "Expression(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["iterate"] = ruleOutCast8;
		c = 9;
		this.error.vested++;
	}
}else if (c == 9) {
	if (currentCode == 41) {
			
			c = 10;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 10) {
	var <string>Carbonite.CarbonParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		
		c = 11;
		
	}
}else if (c == 11) {
	var <map>Carbonite.CarbonParserOutput ruleOut11 = this.Block(input, charPos);
	
if (ruleOut11.hadError) {
		c = 12; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast11;
var map castacbody11 = data["body"];
var map actionCap11define = data["define"];var map actionCap11iterate = data["iterate"];var map actionCap11body = data["body"];dataStore["data"]["type"] = "for";
dataStore["data"]["in"] = true;
dataStore["data"]["define"] = actionCap11define;
dataStore["data"]["iterate"] = actionCap11iterate;
dataStore["data"]["body"] = actionCap11body;

		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 12) {
	var <map>Carbonite.CarbonParserOutput ruleOut12 = this.Statement(input, charPos);
	
if (ruleOut12.hadError) {
		this.giveError(1, "Block, Statement", currentChar);
		
	}else{
		var map ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast12;
var map castacbody11 = data["body"];
var map actionCap11define = data["define"];var map actionCap11iterate = data["iterate"];var map actionCap11body = data["body"];dataStore["data"]["type"] = "for";
dataStore["data"]["in"] = true;
dataStore["data"]["define"] = actionCap11define;
dataStore["data"]["iterate"] = actionCap11iterate;
dataStore["data"]["body"] = actionCap11body;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Break(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [98, 114, 101, 97, 107];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 59) {
			
var string castac2 = data[""];
dataStore["data"]["type"] = "break";

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Continue(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [99, 111, 110, 116, 105, 110, 117, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 59) {
			
var string castac2 = data[""];
dataStore["data"]["type"] = "continue";

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function While(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [119, 104, 105, 108, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Group(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>Carbonite.CarbonParserOutput ruleOut4 = this.Block(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast4;
var map castacbody4 = data["body"];
var map actionCap4check = data["check"];var map actionCap4body = data["body"];dataStore["data"]["type"] = "while";
dataStore["data"]["check"] = actionCap4check;
dataStore["data"]["body"] = actionCap4body;

		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.Statement(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Block, Statement", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast5;
var map castacbody4 = data["body"];
var map actionCap4check = data["check"];var map actionCap4body = data["body"];dataStore["data"]["type"] = "while";
dataStore["data"]["check"] = actionCap4check;
dataStore["data"]["body"] = actionCap4body;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Return(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [114, 101, 116, 117, 114, 110];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 59) {
			
var string castac4 = data[""];
var map actionCap4exp = data["exp"];dataStore["data"]["type"] = "return";
dataStore["data"]["expression"] = actionCap4exp;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Define_Auto(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	










			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Type(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Type(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <string>Carbonite.CarbonParserOutput ruleOut4 = this.Safe_Name(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "Safe_Name(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast4;
		c = 5;
		this.error.vested++;
	}
}else if (c == 5) {
	var <string>Carbonite.CarbonParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	if (currentCode == 61) {
			
			c = 7;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 7) {
	var <string>Carbonite.CarbonParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	var <map>Carbonite.CarbonParserOutput ruleOut8 = this.Expression(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "Expression(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast8;
		c = 9;
		this.error.vested++;
	}
}else if (c == 9) {
	var <string>Carbonite.CarbonParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	if (currentCode == 59) {
			
var string castac10 = data[""];
var string actionCap10name = data["name"];var map actionCap10type = data["type"];var map actionCap10exp = data["exp"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap10name;
dataStore["data"]["valueType"] = actionCap10type;
dataStore["data"]["value"] = actionCap10exp;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Define(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	








			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 61) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 5) {
	var <string>Carbonite.CarbonParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>Carbonite.CarbonParserOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast6;
		c = 7;
		this.error.vested++;
	}
}else if (c == 7) {
	var <string>Carbonite.CarbonParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	if (currentCode == 59) {
			
var string castac8 = data[""];
var string actionCap8name = data["name"];var map actionCap8exp = data["exp"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap8name;
dataStore["data"]["valueType"] = "";
dataStore["data"]["auto"] = true;
dataStore["data"]["value"] = actionCap8exp;

			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Inline_Def(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>Carbonite.CarbonParserOutput ruleOut0 = this.Inline_Define(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["def"] = ruleOutCast0;
var map castacdef0 = data["def"];
var map actionCap0def = data["def"];dataStore["data"] = actionCap0def;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>Carbonite.CarbonParserOutput ruleOut1 = this.Inline_Define_Auto(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "Inline_Define, Inline_Define_Auto", currentChar);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["def"] = ruleOutCast1;
var map castacdef0 = data["def"];
var map actionCap0def = data["def"];dataStore["data"] = actionCap0def;
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Inline_Define(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.__(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>Carbonite.CarbonParserOutput ruleOut2 = this.Type(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Type(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this.__(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <string>Carbonite.CarbonParserOutput ruleOut4 = this.Safe_Name(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "Safe_Name(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast4;
var string castacname4 = data["name"];
var string actionCap4name = data["name"];var map actionCap4type = data["type"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap4name;
dataStore["data"]["valueType"] = actionCap4type;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Inline_Define_Auto(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.__(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
var string castacname2 = data["name"];
var string actionCap2name = data["name"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap2name;
dataStore["data"]["valueType"] = "";
dataStore["data"]["auto"] = true;

		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function _(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	data = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		
c = 0;		this.error.vested++;

	}else{
		c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function __(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	data["w"] = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		var <string>array castw0 = data["w"];
castw0.push(currentChar);

c = 0;		this.error.vested++;

	}else{
		var <string>array castw0 = data["w"];
if (castw0.length() >= 1) {
c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, " , 	, 
, 
", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this.String_Double(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;
var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this.String_Single(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "String_Double, String_Single", currentChar);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast1;
var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function String_Double(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 34) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "\"") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 34) {
			
var string castac2 = data[""];
var string actionCap2str = data["str"];dataStore["data"] = actionCap2str;
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>Carbonite.CarbonParserOutput>function String_Single(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 39) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "'") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 39) {
			
var string castac2 = data[""];
var string actionCap2str = data["str"];dataStore["data"] = actionCap2str;
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Json(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["keys"] = new <map>array();
var map captureRoot1 = new map();









			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>Carbonite.CarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this.String(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "String(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		captureRoot1["key"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>Carbonite.CarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 58) {
			
			c = 6;
			this.error.vested++;
	}else{
		this.giveError(1, ":", currentChar);
	}
}else if (c == 6) {
	var <string>Carbonite.CarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <int>Carbonite.CarbonParserOutput ruleOut7 = this.Json_Value(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Json_Value(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var int ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		captureRoot1["val"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>Carbonite.CarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		var <map>array castkeys2 = data["keys"];
castkeys2.push(captureRoot1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 9;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}
captureRoot1 = new map();







		c = 2;
		
	}
}else if (c == 9) {
	var <string>Carbonite.CarbonParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	if (currentCode == 125) {
			
var string castac10 = data[""];
var <map>array actionCap10keys = data["keys"];
for (var int i in actionCap10keys) {
    var map k = actionCap10keys[i];
    var string key = k["key"];
    dataStore["data"][key] = k["val"];
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Json_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["vals"] = new <int>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <int>Carbonite.CarbonParserOutput ruleOut2 = this.Json_Value(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var int ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <int>array castvals2 = data["vals"];
castvals2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;
shiv.continue();}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>Carbonite.CarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 93) {
			
var string castac4 = data[""];
var <int>array actionCap4vals = data["vals"];dataStore["data"] = actionCap4vals;
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<<map>array>Carbonite.CarbonParserOutput>function Json_EmptyArray(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new <map>array();
dataStore["temp"] = new map();
	var <map>array data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 93) {
			
var string castac2 = data[""];
data = new <map>array();
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>Carbonite.CarbonParserOutput>function Json_EmptyMap(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>Carbonite.CarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 125) {
			
var string castac2 = data[""];
data = new map();
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>Carbonite.CarbonParserOutput>function Json_Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>Carbonite.CarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <int>array lit1 = [110, 117, 108, 108];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
var string castacexp1 = data["exp"];
data["exp"] = empty;
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	var <int>array lit2 = [116, 114, 117, 101];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
var string castacexp2 = data["exp"];
data["exp"] = true;
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
	var <int>array lit3 = [102, 97, 108, 115, 101];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
var string castacexp3 = data["exp"];
data["exp"] = false;
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 4; charPos--; this.offset--;
	}
}else if (c == 4) {
	var <<map>array>Carbonite.CarbonParserOutput ruleOut4 = this.Json_EmptyArray(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var <map>array ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast4;
		c = 10;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>Carbonite.CarbonParserOutput ruleOut5 = this.Json_EmptyMap(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast5;
		c = 10;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>Carbonite.CarbonParserOutput ruleOut6 = this.Json_Array(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast6;
		c = 10;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>Carbonite.CarbonParserOutput ruleOut7 = this.Json(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast7;
		c = 10;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>Carbonite.CarbonParserOutput ruleOut8 = this.String(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast8;
		c = 10;
		this.error.vested++;
	}
}else if (c == 9) {
	var <int>Carbonite.CarbonParserOutput ruleOut9 = this.Json_Number(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", currentChar);
		
	}else{
		var int ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast9;
		c = 10;
		
	}
}else if (c == 10) {
	var <string>Carbonite.CarbonParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		
var string castac10 = data[""];
var map actionCap10exp = data["exp"];dataStore["data"] = actionCap10exp;
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>Carbonite.CarbonParserOutput>function Json_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	data["nums"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 46) {passed0 = true;}else if (currentCode == 45) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["nums"] += currentChar;

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);
c = 0;		this.error.vested++;

	}else{
		var string castnums0 = data["nums"];
if (castnums0.length() >= 1) {

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, ., -", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var Carbonite.CarbonParserOutput parseOutput = new Carbonite.CarbonParserOutput(this.hadError, object.clone(this.error), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
}