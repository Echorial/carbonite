class CarboniteCarbonParserLocation {
bound public int offset = 0;
bound public int line = 1;
bound public int column = 0;
fixed public <CarboniteCarbonParserLocation>function @construct(int offset, int line, int column) {
this.offset = offset; this.line = line; this.column = column;
}
}

class CarboniteCarbonParserError inherits CarboniteCarbonParserLocation {
bound public int code = 0;
bound public string found = 0;
bound public string expected = 0;
bound public int vested = 0;
bound public <CarboniteCarbonParserError>array path = new <CarboniteCarbonParserError>array();
bound public <CarboniteCarbonParserError>function clone() {var CarboniteCarbonParserError clone = new CarboniteCarbonParserError(this.offset, this.line, this.column); clone.code = this.code; clone.found = this.found; clone.expected = this.expected; clone.vested = this.vested; for (var int i in this.path) {var CarboniteCarbonParserError current = this.path[i]; clone.path.push(current.clone());} return clone;}}

class <class T>CarboniteCarbonParserOutput {
	fixed public <<T>CarboniteCarbonParserOutput>function @construct(bool hadError, CarboniteCarbonParserError error, map data) {this.hadError = hadError; this.error = error; this.data = data;}
	bound public CarboniteCarbonParserError error = empty;
	bound public bool hadError = false;
	bound public map data = new map();
}
class CarboniteCarbonParser inherits CarboniteCarbonParserLocation {
fixed public override <CarboniteCarbonParser>function @construct() {}
fixed public <<map>CarboniteCarbonParserOutput>function parse(string input) {	var <map>CarboniteCarbonParser parser = new <map>CarboniteCarbonParser();
	var map output = parser.start(input);
	if (parser.hadError and (parser.error.found == string.fromCharCode(0001))) {
		parser.error.found = "End of input";
}
	var <map>CarboniteCarbonParserOutput rtn = new <map>CarboniteCarbonParserOutput(parser.hadError, parser.error, parser.data["data"]);
	return rtn;
}
fixed public <<map>CarboniteCarbonParserOutput>function parse(string rule, string input) {	var <map>CarboniteCarbonParser parser = new <map>CarboniteCarbonParser();
	input += string.fromCharCode(0001);
	parser.currentInput = input;
	parser.data["data"] = new map();
	var <map>CarboniteCarbonParserOutput output = null;
	if (rule == "Document") {
	output = parser.Document(input, 0);
	}elseif (rule == "Safe_Name") {
	output = parser.Safe_Name(input, 0);
	}elseif (rule == "Safe_Name_Seg") {
	output = parser.Safe_Name_Seg(input, 0);
	}elseif (rule == "Template") {
	output = parser.Template(input, 0);
	}elseif (rule == "Template_Def") {
	output = parser.Template_Def(input, 0);
	}elseif (rule == "Template_Default") {
	output = parser.Template_Default(input, 0);
	}elseif (rule == "Template_Type") {
	output = parser.Template_Type(input, 0);
	}elseif (rule == "Inherit") {
	output = parser.Inherit(input, 0);
	}elseif (rule == "Root") {
	output = parser.Root(input, 0);
	}elseif (rule == "Implements") {
	output = parser.Implements(input, 0);
	}elseif (rule == "Type") {
	output = parser.Type(input, 0);
	}elseif (rule == "Flag") {
	output = parser.Flag(input, 0);
	}elseif (rule == "Member_Flag") {
	output = parser.Member_Flag(input, 0);
	}elseif (rule == "Optional") {
	output = parser.Optional(input, 0);
	}elseif (rule == "Parameter") {
	output = parser.Parameter(input, 0);
	}elseif (rule == "Method") {
	output = parser.Method(input, 0);
	}elseif (rule == "Property") {
	output = parser.Property(input, 0);
	}elseif (rule == "Attribute_Value") {
	output = parser.Attribute_Value(input, 0);
	}elseif (rule == "Attribute_Pair") {
	output = parser.Attribute_Pair(input, 0);
	}elseif (rule == "Attribute") {
	output = parser.Attribute(input, 0);
	}elseif (rule == "Interface") {
	output = parser.Interface(input, 0);
	}elseif (rule == "Member_Value") {
	output = parser.Member_Value(input, 0);
	}elseif (rule == "Member_Flagged") {
	output = parser.Member_Flagged(input, 0);
	}elseif (rule == "Member") {
	output = parser.Member(input, 0);
	}elseif (rule == "Any_Member") {
	output = parser.Any_Member(input, 0);
	}elseif (rule == "Group") {
	output = parser.Group(input, 0);
	}elseif (rule == "Constant") {
	output = parser.Constant(input, 0);
	}elseif (rule == "Literal_Number") {
	output = parser.Literal_Number(input, 0);
	}elseif (rule == "Literal_Boolean") {
	output = parser.Literal_Boolean(input, 0);
	}elseif (rule == "Literal_String") {
	output = parser.Literal_String(input, 0);
	}elseif (rule == "Literal_Array") {
	output = parser.Literal_Array(input, 0);
	}elseif (rule == "Literal_Map_Key") {
	output = parser.Literal_Map_Key(input, 0);
	}elseif (rule == "Literal_Map") {
	output = parser.Literal_Map(input, 0);
	}elseif (rule == "Literal") {
	output = parser.Literal(input, 0);
	}elseif (rule == "Prefix") {
	output = parser.Prefix(input, 0);
	}elseif (rule == "Appendix_Dot") {
	output = parser.Appendix_Dot(input, 0);
	}elseif (rule == "Appendix_Call") {
	output = parser.Appendix_Call(input, 0);
	}elseif (rule == "Appendix_Index") {
	output = parser.Appendix_Index(input, 0);
	}elseif (rule == "Appendix_Code") {
	output = parser.Appendix_Code(input, 0);
	}elseif (rule == "Appendix") {
	output = parser.Appendix(input, 0);
	}elseif (rule == "Term") {
	output = parser.Term(input, 0);
	}elseif (rule == "Operand_Symbolic") {
	output = parser.Operand_Symbolic(input, 0);
	}elseif (rule == "Operand_Word") {
	output = parser.Operand_Word(input, 0);
	}elseif (rule == "Operation") {
	output = parser.Operation(input, 0);
	}elseif (rule == "Anonymous_Function") {
	output = parser.Anonymous_Function(input, 0);
	}elseif (rule == "Expression") {
	output = parser.Expression(input, 0);
	}elseif (rule == "Expression_Line") {
	output = parser.Expression_Line(input, 0);
	}elseif (rule == "Expression_Function") {
	output = parser.Expression_Function(input, 0);
	}elseif (rule == "Expression_Operation") {
	output = parser.Expression_Operation(input, 0);
	}elseif (rule == "Expression_Operated") {
	output = parser.Expression_Operated(input, 0);
	}elseif (rule == "Block") {
	output = parser.Block(input, 0);
	}elseif (rule == "Statement") {
	output = parser.Statement(input, 0);
	}elseif (rule == "Single_Statement") {
	output = parser.Single_Statement(input, 0);
	}elseif (rule == "If") {
	output = parser.If(input, 0);
	}elseif (rule == "ElseIf") {
	output = parser.ElseIf(input, 0);
	}elseif (rule == "Else") {
	output = parser.Else(input, 0);
	}elseif (rule == "For") {
	output = parser.For(input, 0);
	}elseif (rule == "For_In") {
	output = parser.For_In(input, 0);
	}elseif (rule == "Break") {
	output = parser.Break(input, 0);
	}elseif (rule == "Continue") {
	output = parser.Continue(input, 0);
	}elseif (rule == "While") {
	output = parser.While(input, 0);
	}elseif (rule == "Try") {
	output = parser.Try(input, 0);
	}elseif (rule == "Catch") {
	output = parser.Catch(input, 0);
	}elseif (rule == "Throw") {
	output = parser.Throw(input, 0);
	}elseif (rule == "Return") {
	output = parser.Return(input, 0);
	}elseif (rule == "Native") {
	output = parser.Native(input, 0);
	}elseif (rule == "Define_Auto") {
	output = parser.Define_Auto(input, 0);
	}elseif (rule == "Define") {
	output = parser.Define(input, 0);
	}elseif (rule == "Inline_Def") {
	output = parser.Inline_Def(input, 0);
	}elseif (rule == "Define_List") {
	output = parser.Define_List(input, 0);
	}elseif (rule == "Inline_Define") {
	output = parser.Inline_Define(input, 0);
	}elseif (rule == "Multi_Define") {
	output = parser.Multi_Define(input, 0);
	}elseif (rule == "Inline_Define_Auto") {
	output = parser.Inline_Define_Auto(input, 0);
	}elseif (rule == "String_Tick") {
	output = parser.String_Tick(input, 0);
	}elseif (rule == "_") {
	output = parser._(input, 0);
	}elseif (rule == "__") {
	output = parser.__(input, 0);
	}elseif (rule == "String") {
	output = parser.String(input, 0);
	}elseif (rule == "String_Double") {
	output = parser.String_Double(input, 0);
	}elseif (rule == "String_Single") {
	output = parser.String_Single(input, 0);
	}elseif (rule == "Json") {
	output = parser.Json(input, 0);
	}elseif (rule == "Json_Array") {
	output = parser.Json_Array(input, 0);
	}elseif (rule == "Json_EmptyArray") {
	output = parser.Json_EmptyArray(input, 0);
	}elseif (rule == "Json_EmptyMap") {
	output = parser.Json_EmptyMap(input, 0);
	}elseif (rule == "Json_Value") {
	output = parser.Json_Value(input, 0);
	}elseif (rule == "Json_Number") {
	output = parser.Json_Number(input, 0);
	}
	if (parser.hadError and (parser.error.found == string.fromCharCode(0001))) {
		parser.error.found = "End of input";
	}
	for (var int i = 0; i < parser.error.offset; i++) {
		parser.error.column++;
		if (i < parser.currentInput.length)		if (parser.currentInput[i] == "\n") {parser.error.line++; parser.error.column = 0;}
	}
	var <map>CarboniteCarbonParserOutput rtn = new <map>CarboniteCarbonParserOutput(output.hadError, output.error, output.data);
	return rtn;
}
bound public <CarboniteCarbonParserError>array lastErrors = new <CarboniteCarbonParserError>array();
bound public bool hadError = false;
bound public int parsedChars = 0;
bound public string currentInput = new string();
bound public map data = new map();
bound public CarboniteCarbonParserError error = new CarboniteCarbonParserError(0, 0, 0);
bound public <string>function assembleCodes(<int>array codes) {
	var string rtn = new string();
	for (var int i in codes) {
		rtn += string.fromCharCode(codes[i]);
	}
	return rtn;}
bound public <void>function giveError(int code, string expected, string found) {
this.hadError = true;
this.error.code = code;
this.error.expected = expected;
this.error.found = found;
this.error.offset = this.offset;
this.error.line = 1;
this.error.column = 0;
}

bound public <void>function start(string input) {
	this.currentInput = input;
	input += string.fromCharCode(0001);	this.data["data"] = new map();
	var map data = this.data["data"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = 0; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (c == 0 - 1) {if (currentChar != string.fromCharCode(0001)) {this.giveError(2, "EOF", currentChar);}}
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Document(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Document(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["document"] = ruleOutCast0;
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; 
 this.column++;
		if (this.hadError) {break;}
	}
	for (var int i = 0; i < this.error.offset; i++) {
		this.error.column++;
		if (i < this.currentInput.length)		if (this.currentInput[i] == "\n") {this.error.line++; this.error.column = 0;}
	}
	if (false and this.hadError == false) {
		if (this.offset < input.length() - 1) {
			this.giveError(2, "EOF", input[this.offset + 1]);		}
	}
}
bound public <<map>CarboniteCarbonParserOutput>function Document(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["roots"] = new <map>array();


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Root(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array castroots0 = data["roots"];
castroots0.push(ruleOutCast0);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 0;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Implements(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array castroots0 = data["roots"];
castroots0.push(ruleOutCast1);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 0;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		if (true) {

var map castac0 = data;
var <map>array actionCap0roots = data["roots"];dataStore["data"]["type"] = "document";
dataStore["data"]["roots"] = actionCap0roots;
}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function Safe_Name(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["after"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 95) {passed0 = true;}else if (currentCode == 64) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 97, 122)) {passed0 = true;}else if (int.mid(currentCode, 65, 90)) {passed0 = true;}
	}
	if (passed0) {
		data["start"] = currentChar;
c = 1;		this.error.vested++;

	}else{
		this.giveError(1, "a-z, A-Z, _, @", currentChar);
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 95) {passed1 = true;}else if (currentCode == 46) {passed1 = true;}
	if (passed1 == false) {
		if (int.mid(currentCode, 97, 122)) {passed1 = true;}else if (int.mid(currentCode, 65, 90)) {passed1 = true;}else if (int.mid(currentCode, 48, 57)) {passed1 = true;}
	}
	if (passed1) {
		data["after"] += currentChar;
if (true) {

var map castacafter0 = data["after"];
var string actionCap0start = data["start"];var string actionCap0after = data["after"];
		var name = actionCap0start + actionCap0after;
		dataStore["data"] = name;
	}
c = 1;		this.error.vested++;

	}else{
		if (true) {

var map castacafter0 = data["after"];
var string actionCap0start = data["start"];var string actionCap0after = data["after"];
		var name = actionCap0start + actionCap0after;
		dataStore["data"] = name;
	}c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function Safe_Name_Seg(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	


data["after"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 44) {
			
			c = 1;
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var bool passed2 = false;
	if (currentCode == 95) {passed2 = true;}else if (currentCode == 64) {passed2 = true;}
	if (passed2 == false) {
		if (int.mid(currentCode, 97, 122)) {passed2 = true;}else if (int.mid(currentCode, 65, 90)) {passed2 = true;}
	}
	if (passed2) {
		data["start"] = currentChar;
c = 3;		this.error.vested++;

	}else{
		this.giveError(1, "a-z, A-Z, _, @", currentChar);
	}
}else if (c == 3) {
	var bool passed3 = false;
	if (currentCode == 95) {passed3 = true;}else if (currentCode == 46) {passed3 = true;}
	if (passed3 == false) {
		if (int.mid(currentCode, 97, 122)) {passed3 = true;}else if (int.mid(currentCode, 65, 90)) {passed3 = true;}else if (int.mid(currentCode, 48, 57)) {passed3 = true;}
	}
	if (passed3) {
		data["after"] += currentChar;
if (true) {

var map castacafter0 = data["after"];
var string actionCap0start = data["start"];var string actionCap0after = data["after"];
		var name = actionCap0start + actionCap0after;
		dataStore["data"] = name;
	}
c = 3;		this.error.vested++;

	}else{
		if (true) {

var map castacafter0 = data["after"];
var string actionCap0start = data["start"];var string actionCap0after = data["after"];
		var name = actionCap0start + actionCap0after;
		dataStore["data"] = name;
	}c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Template(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["types"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 60) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "<", currentChar);
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Type(input, charPos);
	
if (ruleOut1.hadError) {
		var <map>array casttypes1 = data["types"];
if (casttypes1.length() >= 1) {
c = 2; charPos--; this.offset--;}else{
this.giveError(1, "Type", currentChar);}

		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array casttypes1 = data["types"];
casttypes1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 2;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 62) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0types = data["types"];dataStore["data"]["types"] = actionCap0types;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ">", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Template_Def(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var string actionCap0type = data["type"];dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["type"] = actionCap0type;
}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Template_Default(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	








			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 61) {
			
			c = 6;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Type(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Type(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["default"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var string actionCap0type = data["type"];var map actionCap0default = data["default"];dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["type"] = actionCap0type;
dataStore["data"]["default"] = actionCap0default;
}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Template_Type(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["templates"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 60) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "<", currentChar);
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Template_Default(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array casttemplates1 = data["templates"];
casttemplates1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Template_Def(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array casttemplates1 = data["templates"];
casttemplates1.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 62) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0templates = data["templates"];dataStore["data"]["templates"] = actionCap0templates;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ">", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Inherit(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["types"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [105, 110, 104, 101, 114, 105, 116, 115];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.__(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Type(input, charPos);
	
if (ruleOut2.hadError) {
		var <map>array casttypes2 = data["types"];
if (casttypes2.length() >= 1) {
if (true) {

var map castactypes0 = data["types"];
var <map>array actionCap0types = data["types"];dataStore["data"]["types"] = actionCap0types;
}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "Type", currentChar);}

		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array casttypes2 = data["types"];
casttypes2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
if (true) {

var map castactypes0 = data["types"];
var <map>array actionCap0types = data["types"];dataStore["data"]["types"] = actionCap0types;
}c = 0 - 1;continue;}else {charPos++;}if (true) {

var map castactypes0 = data["types"];
var <map>array actionCap0types = data["types"];dataStore["data"]["types"] = actionCap0types;
}
		c = 2;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Root(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["doc"] = new <string>array();




data["flags"] = new <string>array();




data["templates"] = new <map>array();








data["members"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.String_Tick(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		if (ruleOut1.error.vested > 1) {this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);}
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <string>array castdoc1 = data["doc"];
castdoc1.push(ruleOutCast1);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Attribute(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["attr"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this.Flag(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		if (ruleOut5.error.vested > 1) {this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);}
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <string>array castflags5 = data["flags"];
castflags5.push(ruleOutCast5);
if (input.charCodeAt(charPos + 1) != 32) {
c = 6;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 5;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <int>array lit7 = [105, 110, 116, 101, 114, 102, 97, 99, 101];
	if (currentCode == lit7[literalChar]) {
		literalChar++;
		if (literalChar == 9) {
			data["type"] = this.assembleCodes(lit7);
			c = 12;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 8; charPos--; this.offset--;
	}
}else if (c == 8) {
	var <int>array lit8 = [114, 101, 108, 97, 116, 105, 118, 101];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			data["type"] = this.assembleCodes(lit8);
			c = 12;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 9; charPos--; this.offset--;
	}
}else if (c == 9) {
	var <int>array lit9 = [99, 108, 97, 115, 115];
	if (currentCode == lit9[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			data["type"] = this.assembleCodes(lit9);
			c = 12;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 10; charPos--; this.offset--;
	}
}else if (c == 10) {
	var <int>array lit10 = [101, 120, 116, 101, 110, 100];
	if (currentCode == lit10[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			data["type"] = this.assembleCodes(lit10);
			c = 12;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 11; charPos--; this.offset--;
	}
}else if (c == 11) {
	var <int>array lit11 = [110, 97, 109, 101, 115, 112, 97, 99, 101];
	if (currentCode == lit11[literalChar]) {
		literalChar++;
		if (literalChar == 9) {
			data["type"] = this.assembleCodes(lit11);
			c = 12;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "interface, relative, class, extend, namespace", currentChar);
	}
}else if (c == 12) {
	var <string>CarboniteCarbonParserOutput ruleOut12 = this.__(input, charPos);
	
if (ruleOut12.hadError) {
		this.giveError(ruleOut12.error.code, "White space(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
		
	}else{
		var string ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		
		c = 13;
		
	}
}else if (c == 13) {
	var <map>CarboniteCarbonParserOutput ruleOut13 = this.Template_Type(input, charPos);
	
if (ruleOut13.hadError) {
		c = 14; charPos--; this.offset--;
		if (ruleOut13.error.vested > 1) {this.giveError(ruleOut13.error.code, ruleOut13.error.expected, ruleOut13.error.found);}
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		var <map>array casttemplates13 = data["templates"];
casttemplates13.push(ruleOutCast13);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 13;
		this.error.vested++;
	}
}else if (c == 14) {
	var <string>CarboniteCarbonParserOutput ruleOut14 = this._(input, charPos);
	
if (ruleOut14.hadError) {
		this.giveError(ruleOut14.error.code, "White space(optional)(" + ruleOut14.error.expected + ")", ruleOut14.error.found);
		
	}else{
		var string ruleOutCast14 = ruleOut14.data["data"];
charPos = this.offset;
		
		c = 15;
		
	}
}else if (c == 15) {
	var <string>CarboniteCarbonParserOutput ruleOut15 = this.Safe_Name(input, charPos);
	
if (ruleOut15.hadError) {
		this.giveError(ruleOut15.error.code, "Safe_Name(" + ruleOut15.error.expected + ")", ruleOut15.error.found);
		
	}else{
		var string ruleOutCast15 = ruleOut15.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast15;
		c = 16;
		this.error.vested++;
	}
}else if (c == 16) {
	var <string>CarboniteCarbonParserOutput ruleOut16 = this._(input, charPos);
	
if (ruleOut16.hadError) {
		this.giveError(ruleOut16.error.code, "White space(optional)(" + ruleOut16.error.expected + ")", ruleOut16.error.found);
		
	}else{
		var string ruleOutCast16 = ruleOut16.data["data"];
charPos = this.offset;
		
		c = 17;
		
	}
}else if (c == 17) {
	var <map>CarboniteCarbonParserOutput ruleOut17 = this.Inherit(input, charPos);
	
if (ruleOut17.hadError) {
		c = 18; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast17 = ruleOut17.data["data"];
charPos = this.offset;
		data["inherits"] = ruleOutCast17;
		c = 18;
		this.error.vested++;
	}
}else if (c == 18) {
	var <string>CarboniteCarbonParserOutput ruleOut18 = this._(input, charPos);
	
if (ruleOut18.hadError) {
		this.giveError(ruleOut18.error.code, "White space(optional)(" + ruleOut18.error.expected + ")", ruleOut18.error.found);
		
	}else{
		var string ruleOutCast18 = ruleOut18.data["data"];
charPos = this.offset;
		
		c = 19;
		
	}
}else if (c == 19) {
	if (currentCode == 123) {
			
			c = 20;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 20) {
	var <string>CarboniteCarbonParserOutput ruleOut20 = this._(input, charPos);
	
if (ruleOut20.hadError) {
		this.giveError(ruleOut20.error.code, "White space(optional)(" + ruleOut20.error.expected + ")", ruleOut20.error.found);
		
	}else{
		var string ruleOutCast20 = ruleOut20.data["data"];
charPos = this.offset;
		
		c = 21;
		
	}
}else if (c == 21) {
	var <map>CarboniteCarbonParserOutput ruleOut21 = this.Member_Flagged(input, charPos);
	
if (ruleOut21.hadError) {
		c = 22; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast21 = ruleOut21.data["data"];
charPos = this.offset;
		var <map>array castmembers21 = data["members"];
castmembers21.push(ruleOutCast21);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 21;
		this.error.vested++;
	}
}else if (c == 22) {
	var <map>CarboniteCarbonParserOutput ruleOut22 = this.Member(input, charPos);
	
if (ruleOut22.hadError) {
		c = 23; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast22 = ruleOut22.data["data"];
charPos = this.offset;
		var <map>array castmembers21 = data["members"];
castmembers21.push(ruleOutCast22);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 21;
		this.error.vested++;
	}
}else if (c == 23) {
	var <string>CarboniteCarbonParserOutput ruleOut23 = this._(input, charPos);
	
if (ruleOut23.hadError) {
		this.giveError(ruleOut23.error.code, "White space(optional)(" + ruleOut23.error.expected + ")", ruleOut23.error.found);
		
	}else{
		var string ruleOutCast23 = ruleOut23.data["data"];
charPos = this.offset;
		
		c = 24;
		
	}
}else if (c == 24) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
var map actionCap0type = data["type"];var map actionCap0attr = data["attr"];var <string>array actionCap0doc = data["doc"];var <string>array actionCap0flags = data["flags"];var string actionCap0name = data["name"];var <map>array actionCap0members = data["members"];var map actionCap0inherits = data["inherits"];var <map>array actionCap0templates = data["templates"];dataStore["data"]["type"] = actionCap0type;
dataStore["data"]["attribute"] = actionCap0attr;
dataStore["data"]["doc"] = actionCap0doc;
dataStore["data"]["flags"] = actionCap0flags;
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["members"] = actionCap0members;
dataStore["data"]["inherits"] = actionCap0inherits;
dataStore["data"]["templates"] = actionCap0templates;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Implements(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	







			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["base"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <int>array lit3 = [105, 109, 112, 108, 101, 109, 101, 110, 116, 115];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 10) {
			
			c = 4;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit3) + "", currentChar);
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this.__(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this.Safe_Name(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["subject"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
var string actionCap0base = data["base"];var string actionCap0subject = data["subject"];dataStore["data"]["type"] = "implements";
dataStore["data"]["implementer"] = actionCap0base;
dataStore["data"]["implements"] = actionCap0subject;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Type(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


data["reference"] = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Template(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["template"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	if (currentCode == 38) {
			var <string>array castreference3 = data["reference"];
castreference3.push("&");
if (true) {

var map castacreference0 = data["reference"];
var string actionCap0name = data["name"];var <string>array actionCap0reference = data["reference"];var map actionCap0template = data["template"];
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["reference"] = actionCap0reference.length;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
if (actionCap0template != empty) {
	var <map>array tt = actionCap0template["types"];
	dataStore["data"]["template"] = tt;
}else{
	dataStore["data"]["template"] = false;
}}
			c = 3;
			this.error.vested++;
	}else{
		if (true) {

var map castacreference0 = data["reference"];
var string actionCap0name = data["name"];var <string>array actionCap0reference = data["reference"];var map actionCap0template = data["template"];
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["reference"] = actionCap0reference.length;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
if (actionCap0template != empty) {
	var <map>array tt = actionCap0template["types"];
	dataStore["data"]["template"] = tt;
}else{
	dataStore["data"]["template"] = false;
}}c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function Flag(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast1;if (true) {

var map castacstr0 = data["str"];
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;
	if (actionCap0str == "class") {this.giveError(1, "" + "" + "", "");}
	if (actionCap0str == "relative") {this.giveError(1, "" + "" + "", "");}
	if (actionCap0str == "extend") {this.giveError(1, "" + "" + "", "");}
	if (actionCap0str == "namespace") {this.giveError(1, "" + "" + "", "");}
	if (actionCap0str == "interface") {this.giveError(1, "" + "" + "", "");}
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function Member_Flag(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast1;if (true) {

var map castacstr0 = data["str"];
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Optional(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 61) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Parameter(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




data["op"] = new <map>array();


data["doc"] = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Type(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Type(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Optional(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		if (ruleOut5.error.vested > 1) {this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);}
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <map>array castop5 = data["op"];
castop5.push(ruleOutCast5);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 5;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <string>CarboniteCarbonParserOutput ruleOut7 = this.String_Tick(input, charPos);
	
if (ruleOut7.hadError) {
		if (true) {

var map castacdoc0 = data["doc"];
var map actionCap0type = data["type"];var <string>array actionCap0doc = data["doc"];var string actionCap0name = data["name"];var <map>array actionCap0op = data["op"];dataStore["data"]["type"] = actionCap0type;
dataStore["data"]["doc"] = actionCap0doc;
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["optional"] = actionCap0op;
}c = 0 - 1; charPos--; this.offset--;
		if (ruleOut7.error.vested > 1) {this.giveError(ruleOut7.error.code, ruleOut7.error.expected, ruleOut7.error.found);}
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		var <string>array castdoc7 = data["doc"];
castdoc7.push(ruleOutCast7);
if (true) {

var map castacdoc0 = data["doc"];
var map actionCap0type = data["type"];var <string>array actionCap0doc = data["doc"];var string actionCap0name = data["name"];var <map>array actionCap0op = data["op"];dataStore["data"]["type"] = actionCap0type;
dataStore["data"]["doc"] = actionCap0doc;
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["optional"] = actionCap0op;
}
		c = 7;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Method(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["parameters"] = new <map>array();





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 40) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Parameter(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castparameters2 = data["parameters"];
castparameters2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 41) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>CarboniteCarbonParserOutput ruleOut6 = this.Block(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast6;if (true) {

var map castacbody0 = data["body"];
var <map>array actionCap0parameters = data["parameters"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "method";
dataStore["data"]["parameters"] = actionCap0parameters;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Interface(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(1, "Block, Interface", currentChar);
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast7;if (true) {

var map castacbody0 = data["body"];
var <map>array actionCap0parameters = data["parameters"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "method";
dataStore["data"]["parameters"] = actionCap0parameters;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Property(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 61) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "property";
dataStore["data"]["value"] = actionCap0exp;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Attribute_Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	if (currentCode == 61) {
			
			c = 2;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <int>CarboniteCarbonParserOutput ruleOut3 = this.Json_Value(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Json_Value(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var int ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["val"] = ruleOutCast3;if (true) {

var map castacval0 = data["val"];
var int actionCap0val = data["val"];dataStore["data"] = actionCap0val;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Attribute_Pair(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["val"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["key"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Attribute_Value(input, charPos);
	
if (ruleOut2.hadError) {
		if (true) {

var map castacval0 = data["val"];
var string actionCap0key = data["key"];var <map>array actionCap0val = data["val"];dataStore["data"]["key"] = actionCap0key;
if (actionCap0val.length() > 0) {
	dataStore["data"]["value"] = actionCap0val[0];
}else{
	dataStore["data"]["value"] = true;
}}c = 0 - 1; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castval2 = data["val"];
castval2.push(ruleOutCast2);
if (true) {

var map castacval0 = data["val"];
var string actionCap0key = data["key"];var <map>array actionCap0val = data["val"];dataStore["data"]["key"] = actionCap0key;
if (actionCap0val.length() > 0) {
	dataStore["data"]["value"] = actionCap0val[0];
}else{
	dataStore["data"]["value"] = true;
}}
		c = 2;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Attribute(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["attrs"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Attribute_Pair(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castattrs2 = data["attrs"];
castattrs2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0attrs = data["attrs"];dataStore["data"] = actionCap0attrs;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Interface(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 59) {
			if (true) {

var string castac0 = data;
dataStore["data"]["type"] = "interface";
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Member_Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Method(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast0;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Property(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast1;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Interface(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Method, Property, Interface", currentChar);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast2;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Member_Flagged(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["doc"] = new <string>array();




data["flags"] = new <string>array();




data["templates"] = new <map>array();





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.String_Tick(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		if (ruleOut1.error.vested > 1) {this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);}
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <string>array castdoc1 = data["doc"];
castdoc1.push(ruleOutCast1);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Attribute(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["attr"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this.Member_Flag(input, charPos);
	
if (ruleOut5.hadError) {
		var <string>array castflags5 = data["flags"];
if (castflags5.length() >= 1) {
c = 6; charPos--; this.offset--;}else{
this.giveError(1, "Member_Flag", currentChar);}

		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <string>array castflags5 = data["flags"];
castflags5.push(ruleOutCast5);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 5;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Type(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		
		c = 9;
		
	}
}else if (c == 9) {
	var <map>CarboniteCarbonParserOutput ruleOut9 = this.Template_Type(input, charPos);
	
if (ruleOut9.hadError) {
		c = 10; charPos--; this.offset--;
		if (ruleOut9.error.vested > 1) {this.giveError(ruleOut9.error.code, ruleOut9.error.expected, ruleOut9.error.found);}
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		var <map>array casttemplates9 = data["templates"];
casttemplates9.push(ruleOutCast9);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 9;
		this.error.vested++;
	}
}else if (c == 10) {
	var <string>CarboniteCarbonParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		
		c = 11;
		
	}
}else if (c == 11) {
	var <string>CarboniteCarbonParserOutput ruleOut11 = this.Safe_Name(input, charPos);
	
if (ruleOut11.hadError) {
		c = 12; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast11;
		c = 12;
		this.error.vested++;
	}
}else if (c == 12) {
	var <string>CarboniteCarbonParserOutput ruleOut12 = this._(input, charPos);
	
if (ruleOut12.hadError) {
		this.giveError(ruleOut12.error.code, "White space(optional)(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
		
	}else{
		var string ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		
		c = 13;
		
	}
}else if (c == 13) {
	var <map>CarboniteCarbonParserOutput ruleOut13 = this.Member_Value(input, charPos);
	
if (ruleOut13.hadError) {
		this.giveError(ruleOut13.error.code, "Member_Value(" + ruleOut13.error.expected + ")", ruleOut13.error.found);
		
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		data["val"] = ruleOutCast13;if (true) {

var map castacval0 = data["val"];
var map actionCap0val = data["val"];var string actionCap0name = data["name"];var map actionCap0type = data["type"];var <string>array actionCap0flags = data["flags"];var <map>array actionCap0templates = data["templates"];var map actionCap0attr = data["attr"];var <string>array actionCap0doc = data["doc"];
dataStore["data"]["type"] = actionCap0val["type"];
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["value"] = actionCap0val;
if (actionCap0type == empty) {

	dataStore["data"]["output"] = new map();
	if (actionCap0flags.length() == 0) {
		this.giveError(1, "" + "" + "", "");
	}else if(actionCap0flags.length() >= 2){
		dataStore["data"]["name"] = actionCap0flags[actionCap0flags.length() - 1];
		actionCap0flags.pop();
		dataStore["data"]["output"]["name"] = actionCap0flags[actionCap0flags.length() - 1];
		actionCap0flags.pop();
	}
	dataStore["data"]["output"]["template"] = new <map>array();
	dataStore["data"]["flags"] = actionCap0flags;
}else{
	dataStore["data"]["flags"] = actionCap0flags;
	dataStore["data"]["output"] = actionCap0type;
}
dataStore["data"]["templates"] = actionCap0templates;
dataStore["data"]["start"] = startPos;
dataStore["data"]["attribute"] = actionCap0attr;
dataStore["data"]["doc"] = actionCap0doc;
dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Member(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["doc"] = new <string>array();






data["templates"] = new <map>array();





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.String_Tick(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		if (ruleOut1.error.vested > 1) {this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);}
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <string>array castdoc1 = data["doc"];
castdoc1.push(ruleOutCast1);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Attribute(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["attr"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Type(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Type(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this.__(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Template_Type(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		if (ruleOut7.error.vested > 1) {this.giveError(ruleOut7.error.code, ruleOut7.error.expected, ruleOut7.error.found);}
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		var <map>array casttemplates7 = data["templates"];
casttemplates7.push(ruleOutCast7);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 7;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		
		c = 9;
		
	}
}else if (c == 9) {
	var <string>CarboniteCarbonParserOutput ruleOut9 = this.Safe_Name(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "Safe_Name(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast9;
		c = 10;
		this.error.vested++;
	}
}else if (c == 10) {
	var <string>CarboniteCarbonParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		
		c = 11;
		
	}
}else if (c == 11) {
	var <map>CarboniteCarbonParserOutput ruleOut11 = this.Member_Value(input, charPos);
	
if (ruleOut11.hadError) {
		this.giveError(ruleOut11.error.code, "Member_Value(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
		
	}else{
		var map ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		data["val"] = ruleOutCast11;if (true) {

var map castacval0 = data["val"];
var map actionCap0val = data["val"];var map actionCap0attr = data["attr"];var <string>array actionCap0doc = data["doc"];var map actionCap0type = data["type"];var string actionCap0name = data["name"];var <map>array actionCap0templates = data["templates"];dataStore["data"]["type"] = actionCap0val["type"];
dataStore["data"]["attribute"] = actionCap0attr;
dataStore["data"]["doc"] = actionCap0doc;
dataStore["data"]["output"] = actionCap0type;
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["value"] = actionCap0val;
dataStore["data"]["flags"] = new <string>array();
dataStore["data"]["templates"] = actionCap0templates;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Any_Member(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Member_Flagged(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["mem"] = ruleOutCast0;if (true) {

var map castacmem0 = data["mem"];
var map actionCap0mem = data["mem"];dataStore["data"] = actionCap0mem;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Member(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "Member_Flagged, Member", currentChar);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["mem"] = ruleOutCast1;if (true) {

var map castacmem0 = data["mem"];
var map actionCap0mem = data["mem"];dataStore["data"] = actionCap0mem;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Group(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 40) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	if (currentCode == 41) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "group"; dataStore["data"]["expression"] = actionCap0exp;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Constant(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this.Safe_Name(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast0;if (true) {

var string castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"]["type"] = "constant";
dataStore["data"]["name"] = actionCap0name;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Literal_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["num"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 46) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["num"] += currentChar;
if (true) {

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "number";
var float num = string.parseFloat(actionCap0num);
dataStore["data"]["value"] = num;
if (num.isInteger()) {
dataStore["data"]["integer"] = true;
}else{
dataStore["data"]["integer"] = false;
}}
c = 0;		this.error.vested++;

	}else{
		var string castnum0 = data["num"];
if (castnum0.length() >= 1) {
if (true) {

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "number";
var float num = string.parseFloat(actionCap0num);
dataStore["data"]["value"] = num;
if (num.isInteger()) {
dataStore["data"]["integer"] = true;
}else{
dataStore["data"]["integer"] = false;
}}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, .", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Literal_Boolean(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [116, 114, 117, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacbool0 = data["bool"];
data["bool"] = true;}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [102, 97, 108, 115, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			if (true) {

var string castacbool1 = data["bool"];
data["bool"] = false;}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "true, false", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Literal_String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this.String(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var string castacstr0 = data["str"];
var string actionCap0str = data["str"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "string";
dataStore["data"]["value"] = actionCap0str;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Literal_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["arr"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		if (ruleOut1.error.vested > 1) {this.giveError(ruleOut1.error.code, ruleOut1.error.expected, ruleOut1.error.found);}
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array castarr1 = data["arr"];
castarr1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 2;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0arr = data["arr"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "array";
dataStore["data"]["value"] = actionCap0arr;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Literal_Map_Key(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["key"] = ruleOutCast1;
		c = 3;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.String(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Safe_Name, String", currentChar);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["key"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 58) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, ":", currentChar);
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	var <map>CarboniteCarbonParserOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast6;if (true) {

var map castacvalue0 = data["value"];
var map actionCap0key = data["key"];var map actionCap0value = data["value"];dataStore["data"]["key"] = actionCap0key;
dataStore["data"]["value"] = actionCap0value;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Literal_Map(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["arr"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Literal_Map_Key(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castarr2 = data["arr"];
castarr2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0arr = data["arr"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "map";
dataStore["data"]["value"] = actionCap0arr;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Literal(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Literal_Number(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast0;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Literal_Boolean(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast1;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Literal_String(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast2;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Literal_Array(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast3;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Literal_Map(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(1, "Literal_Number, Literal_Boolean, Literal_String, Literal_Array, Literal_Map", currentChar);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast4;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Prefix(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [110, 101, 119];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			data["pre"] = this.assembleCodes(lit0);
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.__(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;if (true) {

var map castacexp0 = data["exp"];
var string actionCap0pre = data["pre"];var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "prefix";
dataStore["data"]["prefix"] = actionCap0pre;
dataStore["data"]["expression"] = actionCap0exp;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Appendix_Dot(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	if (currentCode == 46) {
			
			c = 2;
			this.error.vested++;
	}else{
		this.giveError(1, ".", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;if (true) {

var map castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"]["type"] = "dot";
dataStore["data"]["name"] = actionCap0name;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Appendix_Call(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




data["exp"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Template(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["templates"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 40) {
			
			c = 4;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Expression(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		if (ruleOut5.error.vested > 1) {this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);}
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <map>array castexp5 = data["exp"];
castexp5.push(ruleOutCast5);
if (input.charCodeAt(charPos + 1) != 44) {
c = 6;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 5;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	if (currentCode == 41) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0exp = data["exp"];var map actionCap0templates = data["templates"];dataStore["data"]["type"] = "call";
dataStore["data"]["expression"] = actionCap0exp;
dataStore["data"]["templates"] = actionCap0templates;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Appendix_Index(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	if (currentCode == 91) {
			
			c = 2;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Expression(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Expression(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "index";
dataStore["data"]["expression"] = actionCap0exp;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Appendix_Code(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Block(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Block(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["code"] = ruleOutCast1;if (true) {

var map castaccode0 = data["code"];
var map actionCap0code = data["code"];dataStore["data"]["type"] = "code";
dataStore["data"]["code"] = actionCap0code;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Appendix(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Appendix_Dot(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast0;if (true) {

var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Appendix_Call(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast1;if (true) {

var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Appendix_Index(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast2;if (true) {

var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Appendix_Code(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(1, "Appendix_Dot, Appendix_Call, Appendix_Index, Appendix_Code", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["a"] = ruleOutCast3;if (true) {

var map castaca0 = data["a"];
var map actionCap0a = data["a"];dataStore["data"] = actionCap0a;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Term(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["prefix"] = new string();



data["appendix"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 33) {passed0 = true;}else if (currentCode == 64) {passed0 = true;}else if (currentCode == 35) {passed0 = true;}else if (currentCode == 58) {passed0 = true;}else if (currentCode == 36) {passed0 = true;}else if (currentCode == 37) {passed0 = true;}else if (currentCode == 94) {passed0 = true;}else if (currentCode == 38) {passed0 = true;}else if (currentCode == 42) {passed0 = true;}else if (currentCode == 95) {passed0 = true;}else if (currentCode == 43) {passed0 = true;}else if (currentCode == 61) {passed0 = true;}else if (currentCode == 126) {passed0 = true;}else if (currentCode == 96) {passed0 = true;}else if (currentCode == 62) {passed0 = true;}else if (currentCode == 124) {passed0 = true;}else if (currentCode == 47) {passed0 = true;}else if (currentCode == 45) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		data["prefix"] += currentChar;
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

c = 0;		this.error.vested++;

	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Template(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["template"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Anonymous_Function(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast2;
		c = 7;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Literal(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast3;
		c = 7;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Prefix(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast4;
		c = 7;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Constant(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast5;
		c = 7;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>CarboniteCarbonParserOutput ruleOut6 = this.Group(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(1, "Anonymous_Function, Literal, Prefix, Constant, Group", currentChar);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast6;
		c = 7;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Appendix(input, charPos);
	
if (ruleOut7.hadError) {
		if (true) {

var map castacappendix0 = data["appendix"];
var map actionCap0e = data["e"];var <map>array actionCap0appendix = data["appendix"];var map actionCap0template = data["template"];var string actionCap0prefix = data["prefix"];dataStore["data"] = actionCap0e;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos; dataStore["data"]["appendix"] = actionCap0appendix; if (actionCap0template != empty) {dataStore["data"]["template"] = actionCap0template;} if (actionCap0prefix.length() > 0) {dataStore["data"]["prefix"] = actionCap0prefix;}}c = 0 - 1; charPos--; this.offset--;
		if (ruleOut7.error.vested > 1) {this.giveError(ruleOut7.error.code, ruleOut7.error.expected, ruleOut7.error.found);}
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		var <map>array castappendix7 = data["appendix"];
castappendix7.push(ruleOutCast7);
if (true) {

var map castacappendix0 = data["appendix"];
var map actionCap0e = data["e"];var <map>array actionCap0appendix = data["appendix"];var map actionCap0template = data["template"];var string actionCap0prefix = data["prefix"];dataStore["data"] = actionCap0e;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos; dataStore["data"]["appendix"] = actionCap0appendix; if (actionCap0template != empty) {dataStore["data"]["template"] = actionCap0template;} if (actionCap0prefix.length() > 0) {dataStore["data"]["prefix"] = actionCap0prefix;}}
		c = 7;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function Operand_Symbolic(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["operator"] = new string();


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 33) {passed1 = true;}else if (currentCode == 64) {passed1 = true;}else if (currentCode == 58) {passed1 = true;}else if (currentCode == 36) {passed1 = true;}else if (currentCode == 37) {passed1 = true;}else if (currentCode == 94) {passed1 = true;}else if (currentCode == 38) {passed1 = true;}else if (currentCode == 42) {passed1 = true;}else if (currentCode == 95) {passed1 = true;}else if (currentCode == 43) {passed1 = true;}else if (currentCode == 61) {passed1 = true;}else if (currentCode == 126) {passed1 = true;}else if (currentCode == 96) {passed1 = true;}else if (currentCode == 124) {passed1 = true;}else if (currentCode == 62) {passed1 = true;}else if (currentCode == 47) {passed1 = true;}else if (currentCode == 60) {passed1 = true;}else if (currentCode == 45) {passed1 = true;}
	if (passed1 == false) {
		
	}
	if (passed1) {
		data["operator"] += currentChar;

c = 1;		this.error.vested++;

	}else{
		var string castoperator1 = data["operator"];
if (castoperator1.length() >= 1) {
c = 2; charPos--; this.offset--;}else{
this.giveError(1, "!, @, :, $, %, ^, &, *, _, +, =, ~, `, |, >, /, <, -", currentChar);}

	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		if (true) {

var map castac0 = data;
var string actionCap0operator = data["operator"];dataStore["data"] = actionCap0operator;}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function Operand_Word(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["operator"] = new string();


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this.__(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 95) {passed1 = true;}else if (currentCode == 33) {passed1 = true;}else if (currentCode == 64) {passed1 = true;}else if (currentCode == 35) {passed1 = true;}else if (currentCode == 36) {passed1 = true;}else if (currentCode == 37) {passed1 = true;}else if (currentCode == 94) {passed1 = true;}else if (currentCode == 38) {passed1 = true;}else if (currentCode == 42) {passed1 = true;}else if (currentCode == 95) {passed1 = true;}else if (currentCode == 43) {passed1 = true;}else if (currentCode == 61) {passed1 = true;}else if (currentCode == 126) {passed1 = true;}else if (currentCode == 96) {passed1 = true;}else if (currentCode == 124) {passed1 = true;}else if (currentCode == 62) {passed1 = true;}else if (currentCode == 60) {passed1 = true;}else if (currentCode == 47) {passed1 = true;}else if (currentCode == 45) {passed1 = true;}
	if (passed1 == false) {
		if (int.mid(currentCode, 65, 90)) {passed1 = true;}else if (int.mid(currentCode, 97, 122)) {passed1 = true;}else if (int.mid(currentCode, 48, 57)) {passed1 = true;}
	}
	if (passed1) {
		data["operator"] += currentChar;

c = 1;		this.error.vested++;

	}else{
		var string castoperator1 = data["operator"];
if (castoperator1.length() >= 1) {
c = 2; charPos--; this.offset--;}else{
this.giveError(1, "A-Z, a-z, 0-9, _, !, @, #, $, %, ^, &, *, _, +, =, ~, `, |, >, <, /, -", currentChar);}

	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		if (true) {

var map castac0 = data;
var string actionCap0operator = data["operator"];dataStore["data"] = actionCap0operator;}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Operation(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Term(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Term(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["head"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.Operand_Symbolic(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["operator"] = ruleOutCast1;if (true) {

var map castacoperator0 = data["operator"];
var map actionCap0operator = data["operator"];var map actionCap0head = data["head"];dataStore["data"]["operator"] = actionCap0operator;
dataStore["data"]["term"] = actionCap0head;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.Operand_Word(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Operand_Symbolic, Operand_Word", currentChar);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["operator"] = ruleOutCast2;if (true) {

var map castacoperator0 = data["operator"];
var map actionCap0operator = data["operator"];var map actionCap0head = data["head"];dataStore["data"]["operator"] = actionCap0operator;
dataStore["data"]["term"] = actionCap0head;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Anonymous_Function(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



data["parameters"] = new <map>array();







			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Type(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Type(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 40) {
			
			c = 3;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Parameter(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		if (ruleOut4.error.vested > 1) {this.giveError(ruleOut4.error.code, ruleOut4.error.expected, ruleOut4.error.found);}
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		var <map>array castparameters4 = data["parameters"];
castparameters4.push(ruleOutCast4);
if (input.charCodeAt(charPos + 1) != 44) {
c = 5;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 4;
		this.error.vested++;
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
}else if (c == 6) {
	if (currentCode == 41) {
			
			c = 7;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 7) {
	var <string>CarboniteCarbonParserOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
}else if (c == 8) {
	var <int>array lit8 = [61, 62];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 9;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
	}
}else if (c == 9) {
	var <string>CarboniteCarbonParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	var <map>CarboniteCarbonParserOutput ruleOut10 = this.Block(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "Block(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast10;if (true) {

var map castacbody0 = data["body"];
var map actionCap0type = data["type"];var <map>array actionCap0parameters = data["parameters"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "function";
dataStore["data"]["output"] = actionCap0type;
dataStore["data"]["parameters"] = actionCap0parameters;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Expression(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Expression_Function(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Expression_Operation(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Expression_Operated(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(1, "Expression_Function, Expression_Operation, Expression_Operated", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast3;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Expression_Line(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Expression(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Expression(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Expression_Function(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Anonymous_Function(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Anonymous_Function(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast0;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"]["terms"] = [actionCap0exp]; dataStore["data"]["type"] = "expression";}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Expression_Operation(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["exp"] = new <map>array();


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Operation(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		if (ruleOut0.error.vested > 1) {this.giveError(ruleOut0.error.code, ruleOut0.error.expected, ruleOut0.error.found);}
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array castexp0 = data["exp"];
castexp0.push(ruleOutCast0);

		c = 0;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Term(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Term(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["t"] = ruleOutCast1;if (true) {

var map castact0 = data["t"];
var <map>array actionCap0exp = data["exp"];var map actionCap0t = data["t"];actionCap0exp.push(actionCap0t); dataStore["data"]["terms"] = actionCap0exp; dataStore["data"]["type"] = "expression";}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Expression_Operated(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["exp"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Operation(input, charPos);
	
if (ruleOut0.hadError) {
		var <map>array castexp0 = data["exp"];
if (castexp0.length() >= 1) {
if (true) {

var <map>array castacexp0 = data["exp"];
var <map>array actionCap0exp = data["exp"];dataStore["data"]["terms"] = actionCap0exp; dataStore["data"]["type"] = "expression";}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "Operation", currentChar);}

		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array castexp0 = data["exp"];
castexp0.push(ruleOutCast0);
if (true) {

var <map>array castacexp0 = data["exp"];
var <map>array actionCap0exp = data["exp"];dataStore["data"]["terms"] = actionCap0exp; dataStore["data"]["type"] = "expression";}
		c = 0;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Block(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["code"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Statement(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castcode2 = data["code"];
castcode2.push(ruleOutCast2);
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0code = data["code"];dataStore["data"]["type"] = "block";
dataStore["data"]["code"] = actionCap0code;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Statement(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.If(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast1;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Define(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast2;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Define_Auto(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast3;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.For(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast4;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.For_In(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast5;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>CarboniteCarbonParserOutput ruleOut6 = this.Break(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast6;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Try(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast7;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 8) {
	var <map>CarboniteCarbonParserOutput ruleOut8 = this.Throw(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast8;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 9) {
	var <map>CarboniteCarbonParserOutput ruleOut9 = this.Continue(input, charPos);
	
if (ruleOut9.hadError) {
		c = 10; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast9;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 10) {
	var <map>CarboniteCarbonParserOutput ruleOut10 = this.While(input, charPos);
	
if (ruleOut10.hadError) {
		c = 11; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast10;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 11) {
	var <map>CarboniteCarbonParserOutput ruleOut11 = this.Return(input, charPos);
	
if (ruleOut11.hadError) {
		c = 12; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast11;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 12) {
	var <map>CarboniteCarbonParserOutput ruleOut12 = this.Native(input, charPos);
	
if (ruleOut12.hadError) {
		c = 13; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast12;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 13) {
	var <map>CarboniteCarbonParserOutput ruleOut13 = this.Expression_Line(input, charPos);
	
if (ruleOut13.hadError) {
		this.giveError(1, "If, Define, Define_Auto, For, For_In, Break, Try, Throw, Continue, While, Return, Native, Expression_Line", currentChar);
		
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast13;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"] = actionCap0state;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Single_Statement(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Statement(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Statement(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["state"] = ruleOutCast0;if (true) {

var map castacstate0 = data["state"];
var map actionCap0state = data["state"];dataStore["data"]["type"] = "block";
dataStore["data"]["code"] = [actionCap0state];
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function If(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





data["alt"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [105, 102];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Group(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Block(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast4;
		c = 6;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Single_Statement(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.ElseIf(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		var <map>array castalt7 = data["alt"];
castalt7.push(ruleOutCast7);
if (true) {

var map castacalt0 = data["alt"];
var <map>array actionCap0alt = data["alt"];var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "if";
dataStore["data"]["alternatives"] = actionCap0alt;
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 7;
		this.error.vested++;
	}
}else if (c == 8) {
	var <map>CarboniteCarbonParserOutput ruleOut8 = this.Else(input, charPos);
	
if (ruleOut8.hadError) {
		if (true) {

var map castacalt0 = data["alt"];
var <map>array actionCap0alt = data["alt"];var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "if";
dataStore["data"]["alternatives"] = actionCap0alt;
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		var <map>array castalt7 = data["alt"];
castalt7.push(ruleOutCast8);
if (true) {

var map castacalt0 = data["alt"];
var <map>array actionCap0alt = data["alt"];var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "if";
dataStore["data"]["alternatives"] = actionCap0alt;
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 7;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function ElseIf(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [101, 108, 115, 101, 32, 105, 102];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Group(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Block(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast4;if (true) {

var map castacbody0 = data["body"];
var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "elseif";
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Single_Statement(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast5;if (true) {

var map castacbody0 = data["body"];
var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "elseif";
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Else(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [101, 108, 115, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Block(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast2;if (true) {

var map castacbody0 = data["body"];
var map actionCap0body = data["body"];dataStore["data"]["type"] = "else";
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Single_Statement(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast3;if (true) {

var map castacbody0 = data["body"];
var map actionCap0body = data["body"];dataStore["data"]["type"] = "else";
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function For(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	












			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [102, 111, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 40) {
			
			c = 3;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Define(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["define"] = ruleOutCast4;
		c = 6;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Define_Auto(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Define, Define_Auto", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["define"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Expression(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Expression(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	if (currentCode == 59) {
			
			c = 9;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}else if (c == 9) {
	var <string>CarboniteCarbonParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	var <map>CarboniteCarbonParserOutput ruleOut10 = this.Expression(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "Expression(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["iterate"] = ruleOutCast10;
		c = 11;
		this.error.vested++;
	}
}else if (c == 11) {
	if (currentCode == 41) {
			
			c = 12;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 12) {
	var <string>CarboniteCarbonParserOutput ruleOut12 = this._(input, charPos);
	
if (ruleOut12.hadError) {
		this.giveError(ruleOut12.error.code, "White space(optional)(" + ruleOut12.error.expected + ")", ruleOut12.error.found);
		
	}else{
		var string ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		
		c = 13;
		
	}
}else if (c == 13) {
	var <map>CarboniteCarbonParserOutput ruleOut13 = this.Block(input, charPos);
	
if (ruleOut13.hadError) {
		c = 14; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast13;if (true) {

var map castacbody0 = data["body"];
var map actionCap0define = data["define"];var map actionCap0iterate = data["iterate"];var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "for";
dataStore["data"]["define"] = actionCap0define;
dataStore["data"]["iterate"] = actionCap0iterate;
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 14) {
	var <map>CarboniteCarbonParserOutput ruleOut14 = this.Single_Statement(input, charPos);
	
if (ruleOut14.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast14 = ruleOut14.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast14;if (true) {

var map castacbody0 = data["body"];
var map actionCap0define = data["define"];var map actionCap0iterate = data["iterate"];var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "for";
dataStore["data"]["define"] = actionCap0define;
dataStore["data"]["iterate"] = actionCap0iterate;
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function For_In(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	










			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [102, 111, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 40) {
			
			c = 3;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Inline_Define(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["define"] = ruleOutCast4;
		c = 6;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Multi_Define(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Inline_Define, Multi_Define", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["define"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this.__(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <int>array lit7 = [105, 110];
	if (currentCode == lit7[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["mode"] = this.assembleCodes(lit7);
			c = 9;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 8; charPos--; this.offset--;
	}
}else if (c == 8) {
	var <int>array lit8 = [111, 102];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			data["mode"] = this.assembleCodes(lit8);
			c = 9;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "in, of", currentChar);
	}
}else if (c == 9) {
	var <map>CarboniteCarbonParserOutput ruleOut9 = this.Expression(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "Expression(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["iterate"] = ruleOutCast9;
		c = 10;
		this.error.vested++;
	}
}else if (c == 10) {
	if (currentCode == 41) {
			
			c = 11;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 11) {
	var <string>CarboniteCarbonParserOutput ruleOut11 = this._(input, charPos);
	
if (ruleOut11.hadError) {
		this.giveError(ruleOut11.error.code, "White space(optional)(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
		
	}else{
		var string ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		
		c = 12;
		
	}
}else if (c == 12) {
	var <map>CarboniteCarbonParserOutput ruleOut12 = this.Block(input, charPos);
	
if (ruleOut12.hadError) {
		c = 13; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast12;if (true) {

var map castacbody0 = data["body"];
var map actionCap0define = data["define"];var map actionCap0iterate = data["iterate"];var map actionCap0body = data["body"];var map actionCap0mode = data["mode"];dataStore["data"]["type"] = "for";
dataStore["data"]["in"] = true;
dataStore["data"]["define"] = actionCap0define;
dataStore["data"]["iterate"] = actionCap0iterate;
dataStore["data"]["body"] = actionCap0body;
dataStore["data"]["mode"] = actionCap0mode;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 13) {
	var <map>CarboniteCarbonParserOutput ruleOut13 = this.Single_Statement(input, charPos);
	
if (ruleOut13.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast13;if (true) {

var map castacbody0 = data["body"];
var map actionCap0define = data["define"];var map actionCap0iterate = data["iterate"];var map actionCap0body = data["body"];var map actionCap0mode = data["mode"];dataStore["data"]["type"] = "for";
dataStore["data"]["in"] = true;
dataStore["data"]["define"] = actionCap0define;
dataStore["data"]["iterate"] = actionCap0iterate;
dataStore["data"]["body"] = actionCap0body;
dataStore["data"]["mode"] = actionCap0mode;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Break(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [98, 114, 101, 97, 107];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
dataStore["data"]["type"] = "break";
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Continue(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [99, 111, 110, 116, 105, 110, 117, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
dataStore["data"]["type"] = "continue";
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function While(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [119, 104, 105, 108, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Group(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Group(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["check"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	var <map>CarboniteCarbonParserOutput ruleOut4 = this.Block(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast4;if (true) {

var map castacbody0 = data["body"];
var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "while";
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Single_Statement(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast5;if (true) {

var map castacbody0 = data["body"];
var map actionCap0check = data["check"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "while";
dataStore["data"]["check"] = actionCap0check;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Try(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



data["catch"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [116, 114, 121];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Block(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast2;
		c = 4;
		this.error.vested++;
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Single_Statement(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Catch(input, charPos);
	
if (ruleOut5.hadError) {
		if (true) {

var map castaccatch0 = data["catch"];
var <map>array actionCap0catch = data["catch"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "try";
dataStore["data"]["catch"] = actionCap0catch;
dataStore["data"]["body"] = actionCap0body;
}c = 0 - 1; charPos--; this.offset--;
		if (ruleOut5.error.vested > 1) {this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);}
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <map>array castcatch5 = data["catch"];
castcatch5.push(ruleOutCast5);
if (true) {

var map castaccatch0 = data["catch"];
var <map>array actionCap0catch = data["catch"];var map actionCap0body = data["body"];dataStore["data"]["type"] = "try";
dataStore["data"]["catch"] = actionCap0catch;
dataStore["data"]["body"] = actionCap0body;
}
		c = 5;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Catch(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	









			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <int>array lit1 = [99, 97, 116, 99, 104];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit1) + "", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 40) {
			
			c = 4;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Parameter(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Parameter(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["input"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	if (currentCode == 41) {
			
			c = 8;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		
		c = 9;
		
	}
}else if (c == 9) {
	var <map>CarboniteCarbonParserOutput ruleOut9 = this.Block(input, charPos);
	
if (ruleOut9.hadError) {
		c = 10; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast9;if (true) {

var map castacbody0 = data["body"];
var map actionCap0input = data["input"];var map actionCap0body = data["body"];dataStore["data"]["input"] = actionCap0input;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 10) {
	var <map>CarboniteCarbonParserOutput ruleOut10 = this.Single_Statement(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(1, "Block, Single_Statement", currentChar);
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["body"] = ruleOutCast10;if (true) {

var map castacbody0 = data["body"];
var map actionCap0input = data["input"];var map actionCap0body = data["body"];dataStore["data"]["input"] = actionCap0input;
dataStore["data"]["body"] = actionCap0body;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Throw(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [116, 104, 114, 111, 119, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 6) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "throw";
dataStore["data"]["expression"] = actionCap0exp;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Return(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [114, 101, 116, 117, 114, 110, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <map>CarboniteCarbonParserOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Expression(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "return";
dataStore["data"]["expression"] = actionCap0exp;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Native(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




data["content"] = new string();


		
		var bool inString = false;
		var int open = 0;
		var bool escape = false;
		var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [110, 97, 116, 105, 118, 101, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["platform"] = ruleOutCast2;
		c = 3;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 123) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 5) {
	var string castnaccontent5 = data["content"];
	
	
	var bool doCap = true;
	var bool setEscape = false;
	var bool isString = false;
	if (currentChar == "\"") {isString = true;} if (currentChar == "'") {isString = true;} if (currentChar == "`") {isString = true;}
	if (currentChar == "{") {
		if (inString == false) {
			open++;
		}
	}else if (currentChar == "}") {
		if (inString == false) {
			if (open == 0) {
				c = 6; charPos--; this.offset--;
				doCap = false;
			}
			open--;
		}
	}else if (isString) {
		if (escape == false) {
			if (inString) {
				inString = false;
			}else{
				inString = true;
			}
		}
	}else if (currentChar == "\\") {
		if (escape == false) {
			setEscape = true;
		}
	}
	if (doCap) {
		data["content"] += currentChar;

	}
	escape = false;
	if (setEscape) {
		escape = true;
	}
	
}else if (c == 6) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
var string actionCap0platform = data["platform"];var string actionCap0content = data["content"];dataStore["data"]["type"] = "native";
dataStore["data"]["platform"] = actionCap0platform;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Define_Auto(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	










			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [108, 101, 116];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "var, let", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Type(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Type(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this.Safe_Name(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast5;
		c = 6;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	if (currentCode == 61) {
			
			c = 8;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		
		c = 9;
		
	}
}else if (c == 9) {
	var <map>CarboniteCarbonParserOutput ruleOut9 = this.Expression(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "Expression(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast9;
		c = 10;
		this.error.vested++;
	}
}else if (c == 10) {
	var <string>CarboniteCarbonParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		
		c = 11;
		
	}
}else if (c == 11) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var map actionCap0type = data["type"];var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["valueType"] = actionCap0type;
dataStore["data"]["value"] = actionCap0exp;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Define(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	








			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [108, 101, 116];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "var, let", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 61) {
			
			c = 6;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Expression(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Expression(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		this.giveError(ruleOut8.error.code, "White space(optional)(" + ruleOut8.error.expected + ")", ruleOut8.error.found);
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		
		c = 9;
		
	}
}else if (c == 9) {
	if (currentCode == 59) {
			if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["valueType"] = "";
dataStore["data"]["auto"] = true;
dataStore["data"]["value"] = actionCap0exp;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ";", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Inline_Def(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>CarboniteCarbonParserOutput ruleOut0 = this.Inline_Define(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["def"] = ruleOutCast0;if (true) {

var map castacdef0 = data["def"];
var map actionCap0def = data["def"];dataStore["data"] = actionCap0def;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>CarboniteCarbonParserOutput ruleOut1 = this.Inline_Define_Auto(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "Inline_Define, Inline_Define_Auto", currentChar);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["def"] = ruleOutCast1;if (true) {

var map castacdef0 = data["def"];
var map actionCap0def = data["def"];dataStore["data"] = actionCap0def;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Define_List(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	if (currentCode == 44) {
			
			c = 2;
			this.error.vested++;
	}else{
		c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Type(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Type(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this.__(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this.Safe_Name(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast5;if (true) {

var map castacname0 = data["name"];
var map actionCap0type = data["type"];var string actionCap0name = data["name"];dataStore["data"]["type"] = actionCap0type;
dataStore["data"]["name"] = actionCap0name;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Inline_Define(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [108, 101, 116];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "var, let", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <map>CarboniteCarbonParserOutput ruleOut3 = this.Type(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Type(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["type"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this.__(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <string>CarboniteCarbonParserOutput ruleOut5 = this.Safe_Name(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Safe_Name(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast5;if (true) {

var map castacname0 = data["name"];
var string actionCap0name = data["name"];var map actionCap0type = data["type"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["valueType"] = actionCap0type;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Multi_Define(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	






			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [108, 101, 116];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "var, let", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 44) {
			
			c = 6;
			this.error.vested++;
	}else{
		c = 6; charPos--; this.offset--;
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <string>CarboniteCarbonParserOutput ruleOut7 = this.Safe_Name(input, charPos);
	
if (ruleOut7.hadError) {
		c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["name2"] = ruleOutCast7;if (true) {

var map castacname20 = data["name2"];
var string actionCap0name = data["name"];var string actionCap0name2 = data["name2"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["name2"] = actionCap0name2;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Inline_Define_Auto(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [108, 101, 116];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "var, let", currentChar);
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;if (true) {

var map castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["valueType"] = "";
dataStore["data"]["auto"] = true;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function String_Tick(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 96) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "`", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "`") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 96) {
			if (true) {

var map castac0 = data;
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "`", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function _(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	data = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		
c = 0;		this.error.vested++;

	}else{
		c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function __(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	data["w"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		data["w"] += currentChar;

c = 0;		this.error.vested++;

	}else{
		var string castw0 = data["w"];
if (castw0.length() >= 1) {
c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, " , 	, \r, 
", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this.String_Double(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this.String_Single(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "String_Double, String_Single", currentChar);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast1;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function String_Double(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 34) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "\"") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 34) {
			if (true) {

var map castac0 = data;
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarboniteCarbonParserOutput>function String_Single(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 39) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "'") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 39) {
			if (true) {

var map castac0 = data;
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarboniteCarbonParserOutput parseOutput = new <string>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Json(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["keys"] = new <map>array();
var map captureRoot1 = new map();









			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>CarboniteCarbonParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this.String(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "String(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		captureRoot1["key"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
}else if (c == 4) {
	var <string>CarboniteCarbonParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	if (currentCode == 58) {
			
			c = 6;
			this.error.vested++;
	}else{
		this.giveError(1, ":", currentChar);
	}
}else if (c == 6) {
	var <string>CarboniteCarbonParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	var <int>CarboniteCarbonParserOutput ruleOut7 = this.Json_Value(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Json_Value(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var int ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		captureRoot1["val"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		var <map>array castkeys2 = data["keys"];
castkeys2.push(captureRoot1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 9;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}
captureRoot1 = new map();







		c = 2;
		
	}
}else if (c == 9) {
	var <string>CarboniteCarbonParserOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
}else if (c == 10) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0keys = data["keys"];
for (var int i in actionCap0keys) {
    var map k = actionCap0keys[i];
    var string key = k["key"];
    dataStore["data"][key] = k["val"];
}}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Json_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["vals"] = new <int>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <int>CarboniteCarbonParserOutput ruleOut2 = this.Json_Value(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found);}
	}else{
		var int ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <int>array castvals2 = data["vals"];
castvals2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
}else if (c == 3) {
	var <string>CarboniteCarbonParserOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
}else if (c == 4) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
var <int>array actionCap0vals = data["vals"];dataStore["data"] = actionCap0vals;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<<map>array>CarboniteCarbonParserOutput>function Json_EmptyArray(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new <map>array();
dataStore["temp"] = new map();
	var <map>array data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
data = new <map>array();}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <<map>array>CarboniteCarbonParserOutput parseOutput = new <<map>array>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarboniteCarbonParserOutput>function Json_EmptyMap(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	var <string>CarboniteCarbonParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
data = new map();}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarboniteCarbonParserOutput parseOutput = new <map>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>CarboniteCarbonParserOutput>function Json_Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>CarboniteCarbonParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <int>array lit1 = [110, 117, 108, 108];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacexp1 = data["exp"];
data["exp"] = empty;}
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	var <int>array lit2 = [116, 114, 117, 101];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacexp2 = data["exp"];
data["exp"] = true;}
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
	var <int>array lit3 = [102, 97, 108, 115, 101];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			if (true) {

var string castacexp3 = data["exp"];
data["exp"] = false;}
			c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 4; charPos--; this.offset--;
	}
}else if (c == 4) {
	var <<map>array>CarboniteCarbonParserOutput ruleOut4 = this.Json_EmptyArray(input, charPos);
	
if (ruleOut4.hadError) {
		c = 5; charPos--; this.offset--;
		
	}else{
		var <map>array ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast4;
		c = 10;
		this.error.vested++;
	}
}else if (c == 5) {
	var <map>CarboniteCarbonParserOutput ruleOut5 = this.Json_EmptyMap(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast5;
		c = 10;
		this.error.vested++;
	}
}else if (c == 6) {
	var <map>CarboniteCarbonParserOutput ruleOut6 = this.Json_Array(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast6;
		c = 10;
		this.error.vested++;
	}
}else if (c == 7) {
	var <map>CarboniteCarbonParserOutput ruleOut7 = this.Json(input, charPos);
	
if (ruleOut7.hadError) {
		c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast7;
		c = 10;
		this.error.vested++;
	}
}else if (c == 8) {
	var <string>CarboniteCarbonParserOutput ruleOut8 = this.String(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast8;
		c = 10;
		this.error.vested++;
	}
}else if (c == 9) {
	var <int>CarboniteCarbonParserOutput ruleOut9 = this.Json_Number(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", currentChar);
		
	}else{
		var int ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast9;
		c = 10;
		
	}
}else if (c == 10) {
	var <string>CarboniteCarbonParserOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <int>CarboniteCarbonParserOutput parseOutput = new <int>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>CarboniteCarbonParserOutput>function Json_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	data["nums"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 45) {passed0 = true;}else if (currentCode == 46) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["nums"] += currentChar;
if (true) {

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);}
c = 0;		this.error.vested++;

	}else{
		var string castnums0 = data["nums"];
if (castnums0.length() >= 1) {
if (true) {

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, -, .", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <int>CarboniteCarbonParserOutput parseOutput = new <int>CarboniteCarbonParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
}