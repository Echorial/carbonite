class CarbonitePreprocessorLocation {
bound public int offset = 0;
bound public int line = 1;
bound public int column = 0;
fixed public <CarbonitePreprocessorLocation>function @construct(int offset, int line, int column) {
this.offset = offset; this.line = line; this.column = column;
}
}

class CarbonitePreprocessorError inherits CarbonitePreprocessorLocation {
bound public int code = 0;
bound public string found = 0;
bound public string expected = 0;
bound public int vested = 0;
bound public int depth = 0;
bound public <CarbonitePreprocessorError>array path = new <CarbonitePreprocessorError>array();
bound public <CarbonitePreprocessorError>function clone() {var CarbonitePreprocessorError clone = new CarbonitePreprocessorError(this.offset, this.line, this.column); clone.code = this.code; clone.found = this.found; clone.expected = this.expected; clone.vested = this.vested; for (var int i in this.path) {var CarbonitePreprocessorError current = this.path[i]; clone.path.push(current.clone());} return clone;}}

class <class T>CarbonitePreprocessorOutput {
	fixed public <<T>CarbonitePreprocessorOutput>function @construct(bool hadError, CarbonitePreprocessorError error, map data) {this.hadError = hadError; this.error = error; this.data = data;}
	bound public CarbonitePreprocessorError error = empty;
	bound public bool hadError = false;
	bound public map data = new map();
}
class CarbonitePreprocessor inherits CarbonitePreprocessorLocation {
fixed public override <CarbonitePreprocessor>function @construct() {}
fixed public <<map>CarbonitePreprocessorOutput>function parse(string input) {	var <map>CarbonitePreprocessor parser = new <map>CarbonitePreprocessor();
	var map output = parser.start(input);
	parser.error = parser.deepError;
	if (parser.hadError and (parser.error.found == string.fromCharCode(0001))) {
		parser.error.found = "End of input";
	}
	for (var int i = 0; i < parser.error.offset; i++) {
		parser.error.column++;
		if (i < parser.currentInput.length)		if (parser.currentInput[i] == "\n") {parser.error.line++; parser.error.column = 0;}
	}
	var <map>CarbonitePreprocessorOutput rtn = new <map>CarbonitePreprocessorOutput(parser.hadError, parser.error, parser.data["data"]);
	return rtn;
}
fixed public <<map>CarbonitePreprocessorOutput>function parse(string rule, string input) {	var <map>CarbonitePreprocessor parser = new <map>CarbonitePreprocessor();
	input += string.fromCharCode(0001);
	parser.currentInput = input;
	parser.data["data"] = new map();
	var <map>CarbonitePreprocessorOutput output = null;
	if (rule == "Source") {
	output = parser.Source(input, 0);
	}elseif (rule == "Pre") {
	output = parser.Pre(input, 0);
	}elseif (rule == "Raw") {
	output = parser.Raw(input, 0);
	}elseif (rule == "SourceLine") {
	output = parser.SourceLine(input, 0);
	}elseif (rule == "RawLine") {
	output = parser.RawLine(input, 0);
	}elseif (rule == "If") {
	output = parser.If(input, 0);
	}elseif (rule == "As") {
	output = parser.As(input, 0);
	}elseif (rule == "Include") {
	output = parser.Include(input, 0);
	}elseif (rule == "Output") {
	output = parser.Output(input, 0);
	}elseif (rule == "Return") {
	output = parser.Return(input, 0);
	}elseif (rule == "On") {
	output = parser.On(input, 0);
	}elseif (rule == "DocName") {
	output = parser.DocName(input, 0);
	}elseif (rule == "DocNameLine") {
	output = parser.DocNameLine(input, 0);
	}elseif (rule == "Doc") {
	output = parser.Doc(input, 0);
	}elseif (rule == "Doc_Line") {
	output = parser.Doc_Line(input, 0);
	}elseif (rule == "Script") {
	output = parser.Script(input, 0);
	}elseif (rule == "Function") {
	output = parser.Function(input, 0);
	}elseif (rule == "For") {
	output = parser.For(input, 0);
	}elseif (rule == "ForIn") {
	output = parser.ForIn(input, 0);
	}elseif (rule == "Define") {
	output = parser.Define(input, 0);
	}elseif (rule == "Var") {
	output = parser.Var(input, 0);
	}elseif (rule == "Backslash") {
	output = parser.Backslash(input, 0);
	}elseif (rule == "Lost") {
	output = parser.Lost(input, 0);
	}elseif (rule == "Sub") {
	output = parser.Sub(input, 0);
	}elseif (rule == "_Expression") {
	output = parser._Expression(input, 0);
	}elseif (rule == "Expression") {
	output = parser.Expression(input, 0);
	}elseif (rule == "If_Expression") {
	output = parser.If_Expression(input, 0);
	}elseif (rule == "Safe_Name") {
	output = parser.Safe_Name(input, 0);
	}elseif (rule == "Argument") {
	output = parser.Argument(input, 0);
	}elseif (rule == "Literal_Map") {
	output = parser.Literal_Map(input, 0);
	}elseif (rule == "Value") {
	output = parser.Value(input, 0);
	}elseif (rule == "Literal_String") {
	output = parser.Literal_String(input, 0);
	}elseif (rule == "Number") {
	output = parser.Number(input, 0);
	}elseif (rule == "Literal_Array") {
	output = parser.Literal_Array(input, 0);
	}elseif (rule == "Bool") {
	output = parser.Bool(input, 0);
	}elseif (rule == "Constant") {
	output = parser.Constant(input, 0);
	}elseif (rule == "Group") {
	output = parser.Group(input, 0);
	}elseif (rule == "Operation") {
	output = parser.Operation(input, 0);
	}elseif (rule == "Check") {
	output = parser.Check(input, 0);
	}elseif (rule == "Call") {
	output = parser.Call(input, 0);
	}elseif (rule == "_") {
	output = parser._(input, 0);
	}elseif (rule == "__") {
	output = parser.__(input, 0);
	}elseif (rule == "String") {
	output = parser.String(input, 0);
	}elseif (rule == "String_Double") {
	output = parser.String_Double(input, 0);
	}elseif (rule == "String_Single") {
	output = parser.String_Single(input, 0);
	}elseif (rule == "Json") {
	output = parser.Json(input, 0);
	}elseif (rule == "Json_Array") {
	output = parser.Json_Array(input, 0);
	}elseif (rule == "Json_EmptyArray") {
	output = parser.Json_EmptyArray(input, 0);
	}elseif (rule == "Json_EmptyMap") {
	output = parser.Json_EmptyMap(input, 0);
	}elseif (rule == "Json_Value") {
	output = parser.Json_Value(input, 0);
	}elseif (rule == "Json_Number") {
	output = parser.Json_Number(input, 0);
	}	parser.error = parser.deepError;

	if (parser.lastErrors.length > 0) {parser.error = parser.lastErrors[0];}
	if (parser.hadError and (parser.error.found == string.fromCharCode(0001))) {
		parser.error.found = "End of input";
	}
	for (var int i = 0; i < parser.error.offset; i++) {
		parser.error.column++;
		if (i < parser.currentInput.length)		if (parser.currentInput[i] == "\n") {parser.error.line++; parser.error.column = 0;}
	}
	var <map>CarbonitePreprocessorOutput rtn = new <map>CarbonitePreprocessorOutput(output.hadError, output.error, output.data);
	return rtn;
}
bound public <CarbonitePreprocessorError>array lastErrors = new <CarbonitePreprocessorError>array();
bound public bool hadError = false;
bound public int parsedChars = 0;
bound public int depth = 0;
bound public string currentInput = new string();
bound public map data = new map();
bound public CarbonitePreprocessorError deepError = new CarbonitePreprocessorError(0, 0, 0);
bound public CarbonitePreprocessorError error = new CarbonitePreprocessorError(0, 0, 0);
bound public <<CarbonitePreprocessorError>array>array errors = new <<CarbonitePreprocessorError>array>array();
bound public <string>function assembleCodes(<int>array codes) {
	var string rtn = new string();
	for (var int i in codes) {
		rtn += string.fromCharCode(codes[i]);
	}
	return rtn;}
bound public <void>function groupErrors() {
	}
bound public <void>function popGroup() {
	}
bound public <void>function giveError(int code, string expected, string found) {
	this.hadError = true;
	this.error.code = code;
	this.error.expected = expected;
	this.error.found = found;
	this.error.offset = this.offset;
	this.error.line = 1;
	this.error.column = 0;
	if (this.deepError == null or this.depth > this.deepError.depth) {
		var err = new CarbonitePreprocessorError(0, 0, 0);
		err.code = code;
		err.expected = expected;
		err.found = found;
		err.offset = this.offset;
		err.line = 1;
		err.column = 0;
		err.depth = this.depth;
		this.deepError = err;
	}
}

bound public <void>function start(string input) {
	this.currentInput = input;
	input += string.fromCharCode(0001);	this.data["data"] = new map();
	var map data = this.data["data"];
	var int c = 0;
	
			var int literalChar = 0;
	Exception.try();
	for (var int charPos = 0; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (c == 0 - 1) {if (currentChar != string.fromCharCode(0001)) {this.giveError(2, "EOF", currentChar);}}
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Source(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Source(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["document"] = ruleOutCast0;
		c = 0 - 1;
		
	}
 this.depth--;}		this.offset++; 
 this.column++;
		if (this.hadError) {break;}
	}
	Exception.endTry();
	for (var int i = 0; i < this.error.offset; i++) {
		this.error.column++;
		if (i < this.currentInput.length)		if (this.currentInput[i] == "\n") {this.error.line++; this.error.column = 0;}
	}
	if (false and this.hadError == false) {
		if (this.offset < input.length() - 1) {
			this.giveError(2, "EOF", input[this.offset + 1]);		}
	}
}
bound public <<map>CarbonitePreprocessorOutput>function Source(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["s"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Raw(input, charPos);
	
if (ruleOut0.hadError) {
		this.depth--; c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array casts0 = data["s"];
casts0.push(ruleOutCast0);
if (true) {

var <map>array castacs0 = data["s"];
var <map>array actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
		c = 0;
		
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Pre(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; if (true) {

var <map>array castacs0 = data["s"];
var <map>array actionCap0s = data["s"];dataStore["data"] = actionCap0s;}c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array casts0 = data["s"];
casts0.push(ruleOutCast1);
if (true) {

var <map>array castacs0 = data["s"];
var <map>array actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
		c = 0;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Pre(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut0 = this.If(input, charPos);
	
if (ruleOut0.hadError) {
		this.depth--; c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast0;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Define(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast1;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Return(input, charPos);
	
if (ruleOut2.hadError) {
		this.depth--; c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast2;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Doc(input, charPos);
	
if (ruleOut3.hadError) {
		this.depth--; c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast3;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 4) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut4 = this.Doc_Line(input, charPos);
	
if (ruleOut4.hadError) {
		this.depth--; c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast4;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 5) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut5 = this.Output(input, charPos);
	
if (ruleOut5.hadError) {
		this.depth--; c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast5;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 6) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Function(input, charPos);
	
if (ruleOut6.hadError) {
		this.depth--; c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast6;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 7) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut7 = this.On(input, charPos);
	
if (ruleOut7.hadError) {
		this.depth--; c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast7;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 8) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut8 = this.Script(input, charPos);
	
if (ruleOut8.hadError) {
		this.depth--; c = 9; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast8;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 9) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut9 = this.Var(input, charPos);
	
if (ruleOut9.hadError) {
		this.depth--; c = 10; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast9;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 10) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut10 = this.Include(input, charPos);
	
if (ruleOut10.hadError) {
		this.depth--; c = 11; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast10;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 11) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut11 = this.For(input, charPos);
	
if (ruleOut11.hadError) {
		this.depth--; c = 12; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast11;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 12) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut12 = this.ForIn(input, charPos);
	
if (ruleOut12.hadError) {
		this.depth--; c = 13; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast12 = ruleOut12.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast12;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 13) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut13 = this.Lost(input, charPos);
	
if (ruleOut13.hadError) {
		this.depth--; c = 14; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast13 = ruleOut13.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast13;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 14) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut14 = this.Backslash(input, charPos);
	
if (ruleOut14.hadError) {
		this.depth--; this.giveError(1, "If, Define, Return, Doc, Doc_Line, Output, Function, On, Script, Var, Include, For, ForIn, Lost, Backslash", currentChar);
		
	}else{
		var map ruleOutCast14 = ruleOut14.data["data"];
charPos = this.offset;
		data["p"] = ruleOutCast14;if (true) {

var map castacp0 = data["p"];
var map actionCap0p = data["p"];dataStore["data"] = actionCap0p;dataStore["data"]["offset"] = charPos;dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Raw(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["c"] = new string();

		var string inString = ""; var bool checkPre = false; var bool lineComment = false;var bool checkComment = false;var bool openComment = false;	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var string castnacc0 = data["c"];
	
	
if (checkComment and openComment == false) {
	if (currentChar == "*" and inString == "") {
		openComment = true;
		data["c"] += " ";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
	}else if (currentChar == "/" and inString == "") {
		openComment = true;
		lineComment = true;
		data["c"] += " ";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
	}else{
		data["c"] += "/" + currentChar;
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
		
		if (inString.length != 0) {
			if (inString == currentChar) {
				inString = "";
			}
		}
	}
	checkComment = false;
}else if (openComment) {
	if (lineComment) {
		if (currentCode == 10) {
			data["c"] += "\n";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
			openComment = false;
			lineComment = false;
		}else{
			data["c"] += " ";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
		}
	}else{
		if (checkComment) {
			if (currentCode == 47) {
				data["c"] += " ";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
				openComment = false;
			}
			checkComment = false;
		}else{
			if (currentCode == 10) {
				data["c"] += "\n";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
			}else if (currentChar == "*") {
				checkComment = true;
				data["c"] += " ";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
			}else{
				data["c"] += " ";
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
			}
		}
	}
}else{
	if (currentCode == 47) {
		checkComment = true;
	}else if (currentCode == 35) {
		if (inString == "") {
			var string castc0 = data["c"];
if (castc0.length() >= 1) {
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "Native", currentChar);}

		}else{
			data["c"] += currentChar;
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
		}
	}else if (currentCode == 1) {
		var string castc0 = data["c"];
if (castc0.length() >= 1) {
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "Native", currentChar);}

	}else{
		data["c"] += currentChar;
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["offset"] = charPos;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["content"] = actionCap0c;
}
		if (currentCode == 34) {
			if (inString == "") {
				inString = "\"";
			}else{
				if (inString == "\"") {
					inString = "";
				}
			}
		}else if (currentCode == 39) {
			if (inString == "") {
				inString = "'";
			}else{
				if (inString == "'") {
					inString = "";
				}
			}
		}
	}
}

}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function SourceLine(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["s"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut0 = this.RawLine(input, charPos);
	
if (ruleOut0.hadError) {
		this.depth--; c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array casts0 = data["s"];
casts0.push(ruleOutCast0);
if (true) {

var <map>array castacs0 = data["s"];
var <map>array actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
		c = 0;
		
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Lost(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; if (true) {

var <map>array castacs0 = data["s"];
var <map>array actionCap0s = data["s"];dataStore["data"] = actionCap0s;}c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array casts0 = data["s"];
casts0.push(ruleOutCast1);
if (true) {

var <map>array castacs0 = data["s"];
var <map>array actionCap0s = data["s"];dataStore["data"] = actionCap0s;}
		c = 0;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function RawLine(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["c"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 35) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		var string castc0 = data["c"];
if (castc0.length() >= 1) {
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["content"] = actionCap0c;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["offset"] = charPos;
}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "#, nl", currentChar);}
		this.error.vested++;

	}else{
		data["c"] += currentChar;
if (true) {

var string castacc0 = data["c"];
var string actionCap0c = data["c"];dataStore["data"]["type"] = "raw";
dataStore["data"]["content"] = actionCap0c;
dataStore["data"]["startOffset"] = startPos;
dataStore["data"]["offset"] = charPos;
}
c = 0;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function If(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["checks"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 105, 102];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut1 = this.If_Expression(input, charPos);
	
if (ruleOut1.hadError) {
		var <map>array castchecks1 = data["checks"];
if (castchecks1.length() >= 1) {
c = 2; charPos--; this.offset--;}else{
this.giveError(1, "If_Expression", currentChar);}

		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array castchecks1 = data["checks"];
castchecks1.push(ruleOutCast1);
if (input.charCodeAt(charPos + 1) != 97) {
c = 2;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Source(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Source(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast2;
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
		var <int>array lit3 = [35, 101, 110, 100, 32, 105, 102];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0checks = data["checks"];var map actionCap0content = data["content"];dataStore["data"]["type"] = "if";
dataStore["data"]["checks"] = actionCap0checks;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit3) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function As(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
 this.depth--;}else if (c == 1) {
		var <int>array lit1 = [97, 115];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 2;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit1) + "", currentChar);
	}
}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this.__(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this.Safe_Name(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Safe_Name(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast3;if (true) {

var map castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
		c = 0 - 1;
		
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Include(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["as"] = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 105, 110, 99, 108, 117, 100, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["file"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this.As(input, charPos);
	
if (ruleOut2.hadError) {
		if (true) {

var map castacas0 = data["as"];
var <string>array actionCap0as = data["as"];var map actionCap0file = data["file"];dataStore["data"]["type"] = "include";
dataStore["data"]["as"] = actionCap0as;
dataStore["data"]["file"] = actionCap0file;
}c = 0 - 1; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found); Exception.throw('Vested error');}
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <string>array castas2 = data["as"];
castas2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
if (true) {

var map castacas0 = data["as"];
var <string>array actionCap0as = data["as"];var map actionCap0file = data["file"];dataStore["data"]["type"] = "include";
dataStore["data"]["as"] = actionCap0as;
dataStore["data"]["file"] = actionCap0file;
}c = 0 - 1;continue;}else {charPos++;}if (true) {

var map castacas0 = data["as"];
var <string>array actionCap0as = data["as"];var map actionCap0file = data["file"];dataStore["data"]["type"] = "include";
dataStore["data"]["as"] = actionCap0as;
dataStore["data"]["file"] = actionCap0file;
}
		c = 2;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Output(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 111, 117, 116, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut1 = this.SourceLine(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "SourceLine(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast1;if (true) {

var map castaccontent0 = data["content"];
var map actionCap0content = data["content"];dataStore["data"]["type"] = "output";
dataStore["data"]["content"] = actionCap0content;
}
		c = 0 - 1;
		
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Return(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 114, 101, 116, 117, 114, 110, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"]["type"] = "return";
dataStore["data"]["expression"] = actionCap0exp;
}
		c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function On(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 111, 110, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Source(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Source(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast2;
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
		var <int>array lit3 = [35, 101, 110, 100, 32, 111, 110];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];var map actionCap0content = data["content"];dataStore["data"]["type"] = "on";
dataStore["data"]["expression"] = actionCap0exp;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit3) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function DocName(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.groupErrors(); this.depth++;
	var <int>array lit0 = [110, 97, 118, 68, 114, 111, 112];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			data["name"] = this.assembleCodes(lit0);if (true) {

var map castacname0 = data["name"];
var map actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	this.groupErrors(); this.depth++;
	var <int>array lit1 = [116, 114, 101, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			data["name"] = this.assembleCodes(lit1);if (true) {

var map castacname0 = data["name"];
var map actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	this.groupErrors(); this.depth++;
	var <int>array lit2 = [112, 97, 103, 101];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			data["name"] = this.assembleCodes(lit2);if (true) {

var map castacname0 = data["name"];
var map actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; this.giveError(1, "navDrop, tree, page", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function DocNameLine(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.groupErrors(); this.depth++;
	var <int>array lit0 = [110, 97, 118, 76, 105, 110, 107];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			data["name"] = this.assembleCodes(lit0);if (true) {

var map castacname0 = data["name"];
var map actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	this.groupErrors(); this.depth++;
	var <int>array lit1 = [105, 110, 99, 108, 117, 100, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			data["name"] = this.assembleCodes(lit1);if (true) {

var map castacname0 = data["name"];
var map actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
	this.groupErrors(); this.depth++;
	var <int>array lit2 = [116, 97, 103];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 3) {
			data["name"] = this.assembleCodes(lit2);if (true) {

var map castacname0 = data["name"];
var map actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; this.giveError(1, "navLink, include, tag", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Doc(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


data["arguments"] = new string();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 100, 111, 99, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this.DocName(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "DocName(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["opt"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	var bool passed3 = false;
	if (currentCode == 10) {passed3 = true;}
	if (passed3 == false) {
		
	}
	if (passed3) {
		c = 4; charPos--; this.offset--;		this.error.vested++;

	}else{
		data["arguments"] += currentChar;
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

c = 3;
	}
}else if (c == 4) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut4 = this.Source(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "Source(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast4;
		c = 5;
		
	}
 this.depth--;}else if (c == 5) {
		var <int>array lit5 = [35, 101, 110, 100, 32, 100, 111, 99];
	if (currentCode == lit5[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			if (true) {

var map castac0 = data;
var string actionCap0opt = data["opt"];var string actionCap0arguments = data["arguments"];var map actionCap0content = data["content"];dataStore["data"]["type"] = "doc";
dataStore["data"]["name"] = actionCap0opt;
dataStore["data"]["arguments"] = actionCap0arguments;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit5) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Doc_Line(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


data["arguments"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 100, 111, 99, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this.DocNameLine(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "DocNameLine(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["opt"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	var bool passed3 = false;
	if (currentCode == 10) {passed3 = true;}
	if (passed3 == false) {
		
	}
	if (passed3) {
		if (true) {

var map castacarguments0 = data["arguments"];
var string actionCap0opt = data["opt"];var string actionCap0arguments = data["arguments"];dataStore["data"]["type"] = "doc";
dataStore["data"]["name"] = actionCap0opt;
dataStore["data"]["arguments"] = actionCap0arguments;
}c = 0 - 1; charPos--; this.offset--;		this.error.vested++;

	}else{
		data["arguments"] += currentChar;
if (true) {

var map castacarguments0 = data["arguments"];
var string actionCap0opt = data["opt"];var string actionCap0arguments = data["arguments"];dataStore["data"]["type"] = "doc";
dataStore["data"]["name"] = actionCap0opt;
dataStore["data"]["arguments"] = actionCap0arguments;
}
c = 3;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Script(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["language"] = new string();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 115, 99, 114, 105, 112, 116];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	var bool passed2 = false;
	
	if (passed2 == false) {
		if (int.mid(currentCode, 97, 122)) {passed2 = true;}else if (int.mid(currentCode, 65, 90)) {passed2 = true;}else if (int.mid(currentCode, 48, 57)) {passed2 = true;}
	}
	if (passed2) {
		data["language"] += currentChar;
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

c = 2;		this.error.vested++;

	}else{
		c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Source(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "Source(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast3;
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
		var <int>array lit4 = [35, 101, 110, 100, 32, 115, 99, 114, 105, 112, 116];
	if (currentCode == lit4[literalChar]) {
		literalChar++;
		if (literalChar == 11) {
			if (true) {

var map castac0 = data;
var string actionCap0language = data["language"];var map actionCap0content = data["content"];dataStore["data"]["type"] = "script";
dataStore["data"]["language"] = actionCap0language;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit4) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Function(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





data["args"] = new <string>array();





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 102, 117, 110, 99, 116, 105, 111, 110];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 9) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
	if (currentCode == 40) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 5) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
 this.depth--;}else if (c == 6) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut6 = this.Argument(input, charPos);
	
if (ruleOut6.hadError) {
		c = 7; charPos--; this.offset--;
		if (ruleOut6.error.vested > 1) {this.giveError(ruleOut6.error.code, ruleOut6.error.expected, ruleOut6.error.found); Exception.throw('Vested error');}
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		var <string>array castargs6 = data["args"];
castargs6.push(ruleOutCast6);
if (input.charCodeAt(charPos + 1) != 44) {
c = 7;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 6;
		this.error.vested++;
	}
 this.depth--;}else if (c == 7) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
 this.depth--;}else if (c == 8) {
	if (currentCode == 41) {
			
			c = 9;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}else if (c == 9) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut9 = this.Source(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "Source(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var map ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast9;
		c = 10;
		
	}
 this.depth--;}else if (c == 10) {
		var <int>array lit10 = [35, 101, 110, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110];
	if (currentCode == lit10[literalChar]) {
		literalChar++;
		if (literalChar == 13) {
			if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var <string>array actionCap0args = data["args"];var map actionCap0content = data["content"];dataStore["data"]["type"] = "function";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["arguments"] = actionCap0args;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit10) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function For(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	












			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 102, 111, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
	if (currentCode == 61) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 5) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
 this.depth--;}else if (c == 6) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["start"] = ruleOutCast6;
		c = 7;
		this.error.vested++;
	}
 this.depth--;}else if (c == 7) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut7 = this._(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "White space(optional)(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var string ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		
		c = 8;
		
	}
 this.depth--;}else if (c == 8) {
		var <int>array lit8 = [116, 111];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 9;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
	}
}else if (c == 9) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
 this.depth--;}else if (c == 10) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut10 = this.Expression(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "Expression(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var map ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		data["end"] = ruleOutCast10;
		c = 11;
		this.error.vested++;
	}
 this.depth--;}else if (c == 11) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut11 = this.Source(input, charPos);
	
if (ruleOut11.hadError) {
		this.giveError(ruleOut11.error.code, "Source(" + ruleOut11.error.expected + ")", ruleOut11.error.found);
		
	}else{
		var map ruleOutCast11 = ruleOut11.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast11;
		c = 12;
		
	}
 this.depth--;}else if (c == 12) {
		var <int>array lit12 = [35, 101, 110, 100, 32, 102, 111, 114];
	if (currentCode == lit12[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var map actionCap0start = data["start"];var map actionCap0end = data["end"];var map actionCap0content = data["content"];dataStore["data"]["type"] = "for";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["start"] = actionCap0start;
dataStore["data"]["end"] = actionCap0end;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit12) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function ForIn(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	








			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 102, 111, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this.__(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
		var <int>array lit4 = [105, 110];
	if (currentCode == lit4[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			
			c = 5;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit4) + "", currentChar);
	}
}else if (c == 5) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut5 = this.__(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
 this.depth--;}else if (c == 6) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast6;
		c = 7;
		this.error.vested++;
	}
 this.depth--;}else if (c == 7) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut7 = this.Source(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Source(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["content"] = ruleOutCast7;
		c = 8;
		
	}
 this.depth--;}else if (c == 8) {
		var <int>array lit8 = [35, 101, 110, 100, 32, 102, 111, 114];
	if (currentCode == lit8[literalChar]) {
		literalChar++;
		if (literalChar == 8) {
			if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var map actionCap0exp = data["exp"];var map actionCap0content = data["content"];dataStore["data"]["type"] = "forin";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["in"] = actionCap0exp;
dataStore["data"]["content"] = actionCap0content;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit8) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Define(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	






			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 100, 101, 102, 105, 110, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 7) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
	if (currentCode == 61) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 5) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
 this.depth--;}else if (c == 6) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast6;if (true) {

var map castacvalue0 = data["value"];
var string actionCap0name = data["name"];var map actionCap0value = data["value"];dataStore["data"]["type"] = "define";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["value"] = actionCap0value;
}
		c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Var(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	






			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 118, 97, 114];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			
			c = 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
	if (currentCode == 61) {
			
			c = 5;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 5) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
 this.depth--;}else if (c == 6) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Expression(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "Expression(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast6;if (true) {

var map castacvalue0 = data["value"];
var string actionCap0name = data["name"];var map actionCap0value = data["value"];dataStore["data"]["type"] = "var";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["value"] = actionCap0value;
}
		c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Backslash(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [35, 32];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 2) {
			if (true) {

var string castac0 = data;
dataStore["data"]["type"] = "raw";
dataStore["data"]["content"] = "# ";
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "" + this.assembleCodes(lit0) + "", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Lost(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 35) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "#", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut1 = this._Expression(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "_Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];
var bool doSet = true;
if (actionCap0exp["type"] == "constant") {
if (actionCap0exp["value"] == "end") {
this.giveError(1, "" + "" + "", "");
doSet = false;
}
}
if (doSet) {
dataStore["data"]["type"] = "lost";
dataStore["data"]["value"] = actionCap0exp;
}
}
		c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Sub(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 46) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, ".", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Call(input, charPos);
	
if (ruleOut2.hadError) {
		this.depth--; c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast2;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Value(input, charPos);
	
if (ruleOut3.hadError) {
		this.depth--; this.giveError(1, "Call, Value", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast3;if (true) {

var map castacexp0 = data["exp"];
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function _Expression(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["subs"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Operation(input, charPos);
	
if (ruleOut0.hadError) {
		this.depth--; c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast0;
		this.depth--;c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Call(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast1;
		this.depth--;c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Value(input, charPos);
	
if (ruleOut2.hadError) {
		this.depth--; this.giveError(1, "Operation, Call, Value", currentChar);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast2;
		this.depth--;c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Sub(input, charPos);
	
if (ruleOut3.hadError) {
		this.depth--; c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		var <map>array castsubs3 = data["subs"];
castsubs3.push(ruleOutCast3);
if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;dataStore["data"]["offset"] = charPos;}
		c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 4) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut4 = this.Literal_Array(input, charPos);
	
if (ruleOut4.hadError) {
		this.depth--; if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;dataStore["data"]["offset"] = charPos;}c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		var <map>array castsubs3 = data["subs"];
castsubs3.push(ruleOutCast4);
if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;dataStore["data"]["offset"] = charPos;}
		c = 3;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Expression(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["subs"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Operation(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast1;
		this.depth--;c = 4;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Call(input, charPos);
	
if (ruleOut2.hadError) {
		this.depth--; c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast2;
		this.depth--;c = 4;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Value(input, charPos);
	
if (ruleOut3.hadError) {
		this.depth--; this.giveError(1, "Operation, Call, Value", currentChar);
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast3;
		this.depth--;c = 4;
		this.error.vested++;
	}
 this.depth--;}else if (c == 4) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut4 = this.Sub(input, charPos);
	
if (ruleOut4.hadError) {
		this.depth--; c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		var <map>array castsubs4 = data["subs"];
castsubs4.push(ruleOutCast4);
if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;dataStore["data"]["offset"] = charPos;}
		c = 4;
		this.error.vested++;
	}
 this.depth--;}else if (c == 5) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut5 = this.Literal_Array(input, charPos);
	
if (ruleOut5.hadError) {
		this.depth--; if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;dataStore["data"]["offset"] = charPos;}c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <map>array castsubs4 = data["subs"];
castsubs4.push(ruleOutCast5);
if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;dataStore["data"]["offset"] = charPos;}
		c = 4;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function If_Expression(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["subs"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Operation(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast1;
		this.depth--;c = 5;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Call(input, charPos);
	
if (ruleOut2.hadError) {
		this.depth--; c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast2;
		this.depth--;c = 5;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Check(input, charPos);
	
if (ruleOut3.hadError) {
		this.depth--; c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast3;
		this.depth--;c = 5;
		this.error.vested++;
	}
 this.depth--;}else if (c == 4) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut4 = this.Value(input, charPos);
	
if (ruleOut4.hadError) {
		this.depth--; this.giveError(1, "Operation, Call, Check, Value", currentChar);
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["e"] = ruleOutCast4;
		this.depth--;c = 5;
		this.error.vested++;
	}
 this.depth--;}else if (c == 5) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut5 = this.Sub(input, charPos);
	
if (ruleOut5.hadError) {
		this.depth--; c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <map>array castsubs5 = data["subs"];
castsubs5.push(ruleOutCast5);
if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;}
		c = 5;
		this.error.vested++;
	}
 this.depth--;}else if (c == 6) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Literal_Array(input, charPos);
	
if (ruleOut6.hadError) {
		this.depth--; if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;}c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		var <map>array castsubs5 = data["subs"];
castsubs5.push(ruleOutCast6);
if (true) {

var map castacsubs0 = data["subs"];
var map actionCap0e = data["e"];var <map>array actionCap0subs = data["subs"];dataStore["data"] = actionCap0e;dataStore["data"]["subs"] = actionCap0subs; dataStore["data"]["startOffset"] = startPos;}
		c = 5;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function Safe_Name(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	data["a"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 95) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 65, 90)) {passed0 = true;}else if (int.mid(currentCode, 97, 122)) {passed0 = true;}else if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["a"] += currentChar;
if (true) {

var string castaca0 = data["a"];
var string actionCap0a = data["a"];dataStore["data"] = actionCap0a;}
c = 0;		this.error.vested++;

	}else{
		var string casta0 = data["a"];
if (casta0.length() >= 1) {
if (true) {

var string castaca0 = data["a"];
var string actionCap0a = data["a"];dataStore["data"] = actionCap0a;}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "A-Z, a-z, 0-9, _", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function Argument(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["a"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
 this.depth--;}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 95) {passed1 = true;}
	if (passed1 == false) {
		if (int.mid(currentCode, 65, 90)) {passed1 = true;}else if (int.mid(currentCode, 97, 122)) {passed1 = true;}else if (int.mid(currentCode, 48, 57)) {passed1 = true;}
	}
	if (passed1) {
		data["a"] += currentChar;
if (true) {

var map castaca0 = data["a"];
var string actionCap0a = data["a"];dataStore["data"] = actionCap0a;}
c = 1;		this.error.vested++;

	}else{
		var string casta1 = data["a"];
if (casta1.length() >= 1) {
if (true) {

var map castaca0 = data["a"];
var string actionCap0a = data["a"];dataStore["data"] = actionCap0a;}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "A-Z, a-z, 0-9, _", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Literal_Map(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Json(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Json(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["m"] = ruleOutCast0;if (true) {

var map castacm0 = data["m"];
var map actionCap0m = data["m"];dataStore["data"]["type"] = "map";
dataStore["data"]["value"] = actionCap0m;
}
		c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Literal_String(input, charPos);
	
if (ruleOut0.hadError) {
		this.depth--; c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast0;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;dataStore["data"]["offset"] = charPos; dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Number(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast1;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;dataStore["data"]["offset"] = charPos; dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Literal_Array(input, charPos);
	
if (ruleOut2.hadError) {
		this.depth--; c = 3; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast2;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;dataStore["data"]["offset"] = charPos; dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Literal_Map(input, charPos);
	
if (ruleOut3.hadError) {
		this.depth--; c = 4; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast3;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;dataStore["data"]["offset"] = charPos; dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 4) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut4 = this.Bool(input, charPos);
	
if (ruleOut4.hadError) {
		this.depth--; c = 5; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast4;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;dataStore["data"]["offset"] = charPos; dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 5) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut5 = this.Constant(input, charPos);
	
if (ruleOut5.hadError) {
		this.depth--; this.giveError(1, "Literal_String, Number, Literal_Array, Literal_Map, Bool, Constant", currentChar);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["v"] = ruleOutCast5;if (true) {

var map castacv0 = data["v"];
var map actionCap0v = data["v"];dataStore["data"] = actionCap0v;dataStore["data"]["offset"] = charPos; dataStore["data"]["startOffset"] = startPos;}
		this.depth--;c = 0 - 1;
		
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Literal_String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut0 = this.String(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var string castacstr0 = data["str"];
var string actionCap0str = data["str"];dataStore["data"]["type"] = "string";
dataStore["data"]["value"] = actionCap0str;
}
		c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
data["n"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 45) {
			data["neg"] = "-";
			c = 1;
			this.error.vested++;
	}else{
		this.popGroup(); c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var bool passed1 = false;
	if (currentCode == 46) {passed1 = true;}
	if (passed1 == false) {
		if (int.mid(currentCode, 48, 57)) {passed1 = true;}
	}
	if (passed1) {
		data["n"] += currentChar;
if (true) {

var map castacn0 = data["n"];
var string actionCap0neg = data["neg"];var string actionCap0n = data["n"];dataStore["data"]["type"] = "number";
dataStore["data"]["negative"] = actionCap0neg;
dataStore["data"]["value"] = string.parseFloat(actionCap0n);
}
c = 1;		this.error.vested++;

	}else{
		var string castn1 = data["n"];
if (castn1.length() >= 1) {
if (true) {

var map castacn0 = data["n"];
var string actionCap0neg = data["neg"];var string actionCap0n = data["n"];dataStore["data"]["type"] = "number";
dataStore["data"]["negative"] = actionCap0neg;
dataStore["data"]["value"] = string.parseFloat(actionCap0n);
}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, .", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Literal_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["items"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Expression(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found); Exception.throw('Vested error');}
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <map>array castitems2 = data["items"];
castitems2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0items = data["items"];dataStore["data"]["type"] = "array";
dataStore["data"]["value"] = actionCap0items;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Bool(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
		var <int>array lit0 = [116, 114, 117, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacvalue0 = data["value"];
data["value"] = true;}if (true) {

var map castacvalue0 = data["value"];
var map actionCap0value = data["value"];dataStore["data"]["type"] = "bool";
dataStore["data"]["value"] = actionCap0value;
}if (true) {

var map castacvalue0 = data["value"];
var map actionCap0value = data["value"];dataStore["data"]["type"] = "bool";
dataStore["data"]["value"] = actionCap0value;
}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
		var <int>array lit1 = [102, 97, 108, 115, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			if (true) {

var string castacvalue1 = data["value"];
data["value"] = false;}if (true) {

var map castacvalue0 = data["value"];
var map actionCap0value = data["value"];dataStore["data"]["type"] = "bool";
dataStore["data"]["value"] = actionCap0value;
}if (true) {

var map castacvalue0 = data["value"];
var map actionCap0value = data["value"];dataStore["data"]["type"] = "bool";
dataStore["data"]["value"] = actionCap0value;
}
			this.depth--;c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; this.giveError(1, "true, false", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Constant(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut0 = this.Safe_Name(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Safe_Name(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast0;if (true) {

var string castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"]["type"] = "constant";
dataStore["data"]["value"] = actionCap0name;
}
		c = 0 - 1;
		
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Group(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 40) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Expression(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Expression(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast1;
		c = 2;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	if (currentCode == 41) {
			if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Operation(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["o"] = new string();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Group(input, charPos);
	
if (ruleOut0.hadError) {
		this.depth--; c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["head"] = ruleOutCast0;
		this.depth--;c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut1 = this.Call(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["head"] = ruleOutCast1;
		this.depth--;c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 2) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Value(input, charPos);
	
if (ruleOut2.hadError) {
		this.depth--; this.giveError(1, "Group, Call, Value", currentChar);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["head"] = ruleOutCast2;
		this.depth--;c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
	var bool passed4 = false;
	if (currentCode == 33) {passed4 = true;}else if (currentCode == 64) {passed4 = true;}else if (currentCode == 36) {passed4 = true;}else if (currentCode == 37) {passed4 = true;}else if (currentCode == 38) {passed4 = true;}else if (currentCode == 94) {passed4 = true;}else if (currentCode == 43) {passed4 = true;}else if (currentCode == 42) {passed4 = true;}else if (currentCode == 45) {passed4 = true;}else if (currentCode == 47) {passed4 = true;}else if (currentCode == 63) {passed4 = true;}else if (currentCode == 62) {passed4 = true;}else if (currentCode == 60) {passed4 = true;}else if (currentCode == 124) {passed4 = true;}else if (currentCode == 61) {passed4 = true;}
	if (passed4 == false) {
		
	}
	if (passed4) {
		data["o"] += currentChar;
if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

c = 4;		this.error.vested++;

	}else{
		var string casto4 = data["o"];
if (casto4.length() >= 1) {
c = 5; charPos--; this.offset--;}else{
this.giveError(1, "!, @, $, %, &, ^, +, *, -, /, ?, >, <, |, =", currentChar);}

	}
}else if (c == 5) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut5 = this._(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "White space(optional)(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var string ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		
		c = 6;
		
	}
 this.depth--;}else if (c == 6) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Group(input, charPos);
	
if (ruleOut6.hadError) {
		this.depth--; c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["tail"] = ruleOutCast6;if (true) {

var map castactail0 = data["tail"];
var map actionCap0head = data["head"];var string actionCap0o = data["o"];var map actionCap0tail = data["tail"];dataStore["data"]["type"] = "operation";
dataStore["data"]["head"] = actionCap0head;
dataStore["data"]["operator"] = actionCap0o;
dataStore["data"]["tail"] = actionCap0tail;
}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 7) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut7 = this.Call(input, charPos);
	
if (ruleOut7.hadError) {
		this.depth--; c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["tail"] = ruleOutCast7;if (true) {

var map castactail0 = data["tail"];
var map actionCap0head = data["head"];var string actionCap0o = data["o"];var map actionCap0tail = data["tail"];dataStore["data"]["type"] = "operation";
dataStore["data"]["head"] = actionCap0head;
dataStore["data"]["operator"] = actionCap0o;
dataStore["data"]["tail"] = actionCap0tail;
}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 8) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut8 = this.Value(input, charPos);
	
if (ruleOut8.hadError) {
		this.depth--; this.giveError(1, "Group, Call, Value", currentChar);
		
	}else{
		var map ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["tail"] = ruleOutCast8;if (true) {

var map castactail0 = data["tail"];
var map actionCap0head = data["head"];var string actionCap0o = data["o"];var map actionCap0tail = data["tail"];dataStore["data"]["type"] = "operation";
dataStore["data"]["head"] = actionCap0head;
dataStore["data"]["operator"] = actionCap0o;
dataStore["data"]["tail"] = actionCap0tail;
}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Check(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Value(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Value(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["what"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this.__(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut2 = this.Value(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Value(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["against"] = ruleOutCast2;if (true) {

var map castacagainst0 = data["against"];
var map actionCap0what = data["what"];var map actionCap0against = data["against"];dataStore["data"]["type"] = "check";
dataStore["data"]["what"] = actionCap0what;
dataStore["data"]["against"] = actionCap0against;
}
		c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Call(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


data["params"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut0 = this.Value(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "Value(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["term"] = ruleOutCast0;
		c = 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	if (currentCode == 40) {
			
			c = 3;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 3) {
	this.depth++; 	var <map>CarbonitePreprocessorOutput ruleOut3 = this.Expression(input, charPos);
	
if (ruleOut3.hadError) {
		c = 4; charPos--; this.offset--;
		if (ruleOut3.error.vested > 1) {this.giveError(ruleOut3.error.code, ruleOut3.error.expected, ruleOut3.error.found); Exception.throw('Vested error');}
	}else{
		var map ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		var <map>array castparams3 = data["params"];
castparams3.push(ruleOutCast3);
if (input.charCodeAt(charPos + 1) != 44) {
c = 4;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 3;
		this.error.vested++;
	}
 this.depth--;}else if (c == 4) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
 this.depth--;}else if (c == 5) {
	if (currentCode == 41) {
			if (true) {

var map castac0 = data;
var map actionCap0term = data["term"];var <map>array actionCap0params = data["params"];dataStore["data"]["type"] = "call";
dataStore["data"]["term"] = actionCap0term;
dataStore["data"]["args"] = actionCap0params;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function _(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	data = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		
c = 0;		this.error.vested++;

	}else{
		c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function __(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	data["w"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		data["w"] += currentChar;

c = 0;		this.error.vested++;

	}else{
		var string castw0 = data["w"];
if (castw0.length() >= 1) {
c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, " , 	, rc, nl", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; this.groupErrors(); this.depth++;
	var <string>CarbonitePreprocessorOutput ruleOut0 = this.String_Double(input, charPos);
	
if (ruleOut0.hadError) {
		this.depth--; c = 1; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}else if (c == 1) {
	this.depth++; this.groupErrors(); this.depth++;
	var <string>CarbonitePreprocessorOutput ruleOut1 = this.String_Single(input, charPos);
	
if (ruleOut1.hadError) {
		this.depth--; this.giveError(1, "String_Double, String_Single", currentChar);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast1;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		this.depth--;c = 0 - 1;
		this.error.vested++;
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function String_Double(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 34) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}else if (c == 1) {
		var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "\"") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 34) {
			if (true) {

var map castac0 = data;
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>CarbonitePreprocessorOutput>function String_Single(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var string data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 39) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}else if (c == 1) {
		var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "'") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 39) {
			if (true) {

var map castac0 = data;
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>CarbonitePreprocessorOutput parseOutput = new <string>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Json(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["keys"] = new <map>array();
var map captureRoot1 = new map();









			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this.String(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "String(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		captureRoot1["key"] = ruleOutCast3;
		c = 4;
		this.error.vested++;
	}
 this.depth--;}else if (c == 4) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
 this.depth--;}else if (c == 5) {
	if (currentCode == 58) {
			
			c = 6;
			this.error.vested++;
	}else{
		this.giveError(1, ":", currentChar);
	}
}else if (c == 6) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
 this.depth--;}else if (c == 7) {
	this.depth++; 	var <int>CarbonitePreprocessorOutput ruleOut7 = this.Json_Value(input, charPos);
	
if (ruleOut7.hadError) {
		this.giveError(ruleOut7.error.code, "Json_Value(" + ruleOut7.error.expected + ")", ruleOut7.error.found);
		
	}else{
		var int ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		captureRoot1["val"] = ruleOutCast7;
		c = 8;
		this.error.vested++;
	}
 this.depth--;}else if (c == 8) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut8 = this._(input, charPos);
	
if (ruleOut8.hadError) {
		c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		var <map>array castkeys2 = data["keys"];
castkeys2.push(captureRoot1);
if (input.charCodeAt(charPos + 1) != 44) {
c = 9;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}
captureRoot1 = new map();







		c = 2;
		
	}
 this.depth--;}else if (c == 9) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut9 = this._(input, charPos);
	
if (ruleOut9.hadError) {
		this.giveError(ruleOut9.error.code, "White space(optional)(" + ruleOut9.error.expected + ")", ruleOut9.error.found);
		
	}else{
		var string ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		
		c = 10;
		
	}
 this.depth--;}else if (c == 10) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
var <map>array actionCap0keys = data["keys"];
for (var int i in actionCap0keys) {
    var map k = actionCap0keys[i];
    var string key = k["key"];
    dataStore["data"][key] = k["val"];
}}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Json_Array(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

data["vals"] = new <int>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	this.depth++; 	var <int>CarbonitePreprocessorOutput ruleOut2 = this.Json_Value(input, charPos);
	
if (ruleOut2.hadError) {
		c = 3; charPos--; this.offset--;
		if (ruleOut2.error.vested > 1) {this.giveError(ruleOut2.error.code, ruleOut2.error.expected, ruleOut2.error.found); Exception.throw('Vested error');}
	}else{
		var int ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		var <int>array castvals2 = data["vals"];
castvals2.push(ruleOutCast2);
if (input.charCodeAt(charPos + 1) != 44) {
c = 3;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 2;
		this.error.vested++;
	}
 this.depth--;}else if (c == 3) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut3 = this._(input, charPos);
	
if (ruleOut3.hadError) {
		this.giveError(ruleOut3.error.code, "White space(optional)(" + ruleOut3.error.expected + ")", ruleOut3.error.found);
		
	}else{
		var string ruleOutCast3 = ruleOut3.data["data"];
charPos = this.offset;
		
		c = 4;
		
	}
 this.depth--;}else if (c == 4) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
var <int>array actionCap0vals = data["vals"];dataStore["data"] = actionCap0vals;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<<map>array>CarbonitePreprocessorOutput>function Json_EmptyArray(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new <map>array();
dataStore["temp"] = new map();
	var <map>array data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 91) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "[", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	if (currentCode == 93) {
			if (true) {

var map castac0 = data;
data = new <map>array();}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "]", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <<map>array>CarbonitePreprocessorOutput parseOutput = new <<map>array>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>CarbonitePreprocessorOutput>function Json_EmptyMap(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 123) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "{", currentChar);
	}
}else if (c == 1) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
 this.depth--;}else if (c == 2) {
	if (currentCode == 125) {
			if (true) {

var map castac0 = data;
data = new map();}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "}", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>CarbonitePreprocessorOutput parseOutput = new <map>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>CarbonitePreprocessorOutput>function Json_Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
 this.depth--;}else if (c == 1) {
		var <int>array lit1 = [110, 117, 108, 108];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacexp1 = data["exp"];
data["exp"] = empty;}
			this.depth--;c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 2; charPos--; this.offset--;
	}
}else if (c == 2) {
		var <int>array lit2 = [116, 114, 117, 101];
	if (currentCode == lit2[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacexp2 = data["exp"];
data["exp"] = true;}
			this.depth--;c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 3; charPos--; this.offset--;
	}
}else if (c == 3) {
		var <int>array lit3 = [102, 97, 108, 115, 101];
	if (currentCode == lit3[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			if (true) {

var string castacexp3 = data["exp"];
data["exp"] = false;}
			this.depth--;c = 10;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.depth--; c = 4; charPos--; this.offset--;
	}
}else if (c == 4) {
	this.depth++; this.groupErrors(); this.depth++;
	var <<map>array>CarbonitePreprocessorOutput ruleOut4 = this.Json_EmptyArray(input, charPos);
	
if (ruleOut4.hadError) {
		this.depth--; c = 5; charPos--; this.offset--;
		
	}else{
		var <map>array ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast4;
		this.depth--;c = 10;
		this.error.vested++;
	}
 this.depth--;}else if (c == 5) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut5 = this.Json_EmptyMap(input, charPos);
	
if (ruleOut5.hadError) {
		this.depth--; c = 6; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast5;
		this.depth--;c = 10;
		this.error.vested++;
	}
 this.depth--;}else if (c == 6) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut6 = this.Json_Array(input, charPos);
	
if (ruleOut6.hadError) {
		this.depth--; c = 7; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast6;
		this.depth--;c = 10;
		this.error.vested++;
	}
 this.depth--;}else if (c == 7) {
	this.depth++; this.groupErrors(); this.depth++;
	var <map>CarbonitePreprocessorOutput ruleOut7 = this.Json(input, charPos);
	
if (ruleOut7.hadError) {
		this.depth--; c = 8; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast7 = ruleOut7.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast7;
		this.depth--;c = 10;
		this.error.vested++;
	}
 this.depth--;}else if (c == 8) {
	this.depth++; this.groupErrors(); this.depth++;
	var <string>CarbonitePreprocessorOutput ruleOut8 = this.String(input, charPos);
	
if (ruleOut8.hadError) {
		this.depth--; c = 9; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast8 = ruleOut8.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast8;
		this.depth--;c = 10;
		this.error.vested++;
	}
 this.depth--;}else if (c == 9) {
	this.depth++; this.groupErrors(); this.depth++;
	var <int>CarbonitePreprocessorOutput ruleOut9 = this.Json_Number(input, charPos);
	
if (ruleOut9.hadError) {
		this.depth--; this.giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", currentChar);
		
	}else{
		var int ruleOutCast9 = ruleOut9.data["data"];
charPos = this.offset;
		data["exp"] = ruleOutCast9;
		this.depth--;c = 10;
		
	}
 this.depth--;}else if (c == 10) {
	this.depth++; 	var <string>CarbonitePreprocessorOutput ruleOut10 = this._(input, charPos);
	
if (ruleOut10.hadError) {
		this.giveError(ruleOut10.error.code, "White space(optional)(" + ruleOut10.error.expected + ")", ruleOut10.error.found);
		
	}else{
		var string ruleOutCast10 = ruleOut10.data["data"];
charPos = this.offset;
		if (true) {

var map castac0 = data;
var map actionCap0exp = data["exp"];dataStore["data"] = actionCap0exp;}
		c = 0 - 1;
		
	}
 this.depth--;}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <int>CarbonitePreprocessorOutput parseOutput = new <int>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<int>CarbonitePreprocessorOutput>function Json_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new int();
dataStore["temp"] = new map();
	var int data = dataStore["temp"];
	var int c = 0;
	data["nums"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 45) {passed0 = true;}else if (currentCode == 46) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["nums"] += currentChar;
if (true) {

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);}
c = 0;		this.error.vested++;

	}else{
		var string castnums0 = data["nums"];
if (castnums0.length() >= 1) {
if (true) {

var string castacnums0 = data["nums"];
var string actionCap0nums = data["nums"];dataStore["data"] = string.parseInt(actionCap0nums);}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, -, .", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <int>CarbonitePreprocessorOutput parseOutput = new <int>CarbonitePreprocessorOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
}