class PipelineParserLocation {
bound public int offset = 0;
bound public int line = 1;
bound public int column = 0;
fixed public <PipelineParserLocation>function @construct(int offset, int line, int column) {
this.offset = offset; this.line = line; this.column = column;
}
}

class PipelineParserError inherits PipelineParserLocation {
bound public int code = 0;
bound public string found = 0;
bound public string expected = 0;
bound public int vested = 0;
bound public <PipelineParserError>array path = new <PipelineParserError>array();
bound public <PipelineParserError>function clone() {var PipelineParserError clone = new PipelineParserError(this.offset, this.line, this.column); clone.code = this.code; clone.found = this.found; clone.expected = this.expected; clone.vested = this.vested; for (var int i in this.path) {var PipelineParserError current = this.path[i]; clone.path.push(current.clone());} return clone;}}

class <class T>PipelineParserOutput {
	fixed public <<T>PipelineParserOutput>function @construct(bool hadError, PipelineParserError error, map data) {this.hadError = hadError; this.error = error; this.data = data;}
	bound public PipelineParserError error = empty;
	bound public bool hadError = false;
	bound public map data = new map();
}
class PipelineParser inherits PipelineParserLocation {
fixed public override <PipelineParser>function @construct() {}
fixed public <<map>PipelineParserOutput>function parse(string input) {	var <map>PipelineParser parser = new <map>PipelineParser();
	var map output = parser.start(input);
	if (parser.hadError and (parser.error.found == string.fromCharCode(0001))) {
		parser.error.found = "End of input";
}
	var <map>PipelineParserOutput rtn = new <map>PipelineParserOutput(parser.hadError, parser.error, parser.data["data"]);
	return rtn;
}
fixed public <<map>PipelineParserOutput>function parse(string rule, string input) {	var <map>PipelineParser parser = new <map>PipelineParser();
	input += string.fromCharCode(0001);
	parser.currentInput = input;
	parser.data["data"] = new map();
	var <map>PipelineParserOutput output = null;
	if (rule == "Call") {
	output = parser.Call(input, 0);
	}elseif (rule == "Rule") {
	output = parser.Rule(input, 0);
	}elseif (rule == "Safe_Name") {
	output = parser.Safe_Name(input, 0);
	}elseif (rule == "Value") {
	output = parser.Value(input, 0);
	}elseif (rule == "Literal_Boolean") {
	output = parser.Literal_Boolean(input, 0);
	}elseif (rule == "Literal_String") {
	output = parser.Literal_String(input, 0);
	}elseif (rule == "Literal_Number") {
	output = parser.Literal_Number(input, 0);
	}elseif (rule == "Literal") {
	output = parser.Literal(input, 0);
	}elseif (rule == "Reference") {
	output = parser.Reference(input, 0);
	}elseif (rule == "_") {
	output = parser._(input, 0);
	}elseif (rule == "__") {
	output = parser.__(input, 0);
	}elseif (rule == "String") {
	output = parser.String(input, 0);
	}elseif (rule == "String_Double") {
	output = parser.String_Double(input, 0);
	}elseif (rule == "String_Single") {
	output = parser.String_Single(input, 0);
	}
	if (parser.hadError and (parser.error.found == string.fromCharCode(0001))) {
		parser.error.found = "End of input";
	}
	for (var int i = 0; i < parser.error.offset; i++) {
		parser.error.column++;
		if (parser.currentInput[i] == "\n") {parser.error.line++; parser.error.column = 0;}
	}
	var <map>PipelineParserOutput rtn = new <map>PipelineParserOutput(output.hadError, output.error, output.data);
	return rtn;
}
bound public <PipelineParserError>array lastErrors = new <PipelineParserError>array();
bound public bool hadError = false;
bound public int parsedChars = 0;
bound public string currentInput = new string();
bound public map data = new map();
bound public PipelineParserError error = new PipelineParserError(0, 0, 0);
bound public <string>function assembleCodes(<int>array codes) {
	var string rtn = new string();
	for (var int i in codes) {
		rtn += string.fromCharCode(codes[i]);
	}
	return rtn;}
bound public <void>function giveError(int code, string expected, string found) {
this.hadError = true;
this.error.code = code;
this.error.expected = expected;
this.error.found = found;
this.error.offset = this.offset;
this.error.line = 1;
this.error.column = 0;
}

bound public <map>function start(string input) {
	this.currentInput = input;
	input += string.fromCharCode(0001);	this.data["data"] = new map();
	var map data = this.data["data"];
	var int c = 0;
	data["rules"] = new <map>array();

			var int literalChar = 0;
	for (var int charPos = 0; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (c == 0 - 1) {if (currentChar != string.fromCharCode(0001)) {this.giveError(2, "EOF", currentChar);}}
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>PipelineParserOutput ruleOut0 = this.Rule(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		var <map>array castrules0 = data["rules"];
castrules0.push(ruleOutCast0);

		c = 0;
		this.error.vested++;
	}
}else if (c == 1) {
	var <map>PipelineParserOutput ruleOut1 = this.Call(input, charPos);
	
if (ruleOut1.hadError) {
		c = 0 - 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		var <map>array castrules0 = data["rules"];
castrules0.push(ruleOutCast1);

		c = 0;
		this.error.vested++;
	}
}		this.offset++; 
 this.column++;
		if (this.hadError) {break;}
	}
	for (var int i = 0; i < this.error.offset; i++) {
		this.error.column++;
		if (this.currentInput[i] == "\n") {this.error.line++; this.error.column = 0;}
	}
	if (false and this.hadError == false) {
		if (this.offset < input.length() - 1) {
			this.giveError(2, "EOF", input[this.offset + 1]);		}
	}
}
bound public <<map>PipelineParserOutput>function Call(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	




data["values"] = new <map>array();



			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>PipelineParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>PipelineParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast1;
		c = 2;
		
	}
}else if (c == 2) {
	var <string>PipelineParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 40) {
			
			c = 4;
			this.error.vested++;
	}else{
		this.giveError(1, "(", currentChar);
	}
}else if (c == 4) {
	var <string>PipelineParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>PipelineParserOutput ruleOut5 = this.Value(input, charPos);
	
if (ruleOut5.hadError) {
		c = 6; charPos--; this.offset--;
		if (ruleOut5.error.vested > 1) {this.giveError(ruleOut5.error.code, ruleOut5.error.expected, ruleOut5.error.found);}
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		var <map>array castvalues5 = data["values"];
castvalues5.push(ruleOutCast5);
if (input.charCodeAt(charPos + 1) != 44) {
c = 6;continue;}else {charPos++;}if (charPos == input.length() - 1) {this.giveError(2, "EOF", currentChar);}

		c = 5;
		this.error.vested++;
	}
}else if (c == 6) {
	var <string>PipelineParserOutput ruleOut6 = this._(input, charPos);
	
if (ruleOut6.hadError) {
		this.giveError(ruleOut6.error.code, "White space(optional)(" + ruleOut6.error.expected + ")", ruleOut6.error.found);
		
	}else{
		var string ruleOutCast6 = ruleOut6.data["data"];
charPos = this.offset;
		
		c = 7;
		
	}
}else if (c == 7) {
	if (currentCode == 41) {
			if (true) {

var map castac0 = data;
var string actionCap0name = data["name"];var <map>array actionCap0values = data["values"];dataStore["data"]["type"] = "call";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["arguments"] = actionCap0values;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, ")", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>PipelineParserOutput>function Rule(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	





			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>PipelineParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <string>PipelineParserOutput ruleOut1 = this.Safe_Name(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "Safe_Name(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast1;
		c = 2;
		
	}
}else if (c == 2) {
	var <string>PipelineParserOutput ruleOut2 = this._(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "White space(optional)(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		
		c = 3;
		
	}
}else if (c == 3) {
	if (currentCode == 61) {
			
			c = 4;
			this.error.vested++;
	}else{
		this.giveError(1, "=", currentChar);
	}
}else if (c == 4) {
	var <string>PipelineParserOutput ruleOut4 = this._(input, charPos);
	
if (ruleOut4.hadError) {
		this.giveError(ruleOut4.error.code, "White space(optional)(" + ruleOut4.error.expected + ")", ruleOut4.error.found);
		
	}else{
		var string ruleOutCast4 = ruleOut4.data["data"];
charPos = this.offset;
		
		c = 5;
		
	}
}else if (c == 5) {
	var <map>PipelineParserOutput ruleOut5 = this.Value(input, charPos);
	
if (ruleOut5.hadError) {
		this.giveError(ruleOut5.error.code, "Value(" + ruleOut5.error.expected + ")", ruleOut5.error.found);
		
	}else{
		var map ruleOutCast5 = ruleOut5.data["data"];
charPos = this.offset;
		data["value"] = ruleOutCast5;if (true) {

var map castacvalue0 = data["value"];
var string actionCap0name = data["name"];var map actionCap0value = data["value"];dataStore["data"]["type"] = "rule";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["value"] = actionCap0value;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>PipelineParserOutput>function Safe_Name(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var data = dataStore["temp"];
	var int c = 0;
	data["name"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 95) {passed0 = true;}else if (currentCode == 46) {passed0 = true;}else if (currentCode == 64) {passed0 = true;}else if (currentCode == 36) {passed0 = true;}else if (currentCode == 33) {passed0 = true;}else if (currentCode == 37) {passed0 = true;}else if (currentCode == 94) {passed0 = true;}else if (currentCode == 38) {passed0 = true;}else if (currentCode == 42) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 65, 90)) {passed0 = true;}else if (int.mid(currentCode, 97, 122)) {passed0 = true;}else if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["name"] += currentChar;
if (true) {

var string castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"] = actionCap0name;}
c = 0;		this.error.vested++;

	}else{
		var string castname0 = data["name"];
if (castname0.length() >= 1) {
if (true) {

var string castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"] = actionCap0name;}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "A-Z, a-z, 0-9, _, ., @, $, !, %, ^, &, *", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>PipelineParserOutput parseOutput = new <string>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>PipelineParserOutput>function Value(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>PipelineParserOutput ruleOut0 = this._(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "White space(optional)(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		
		c = 1;
		
	}
}else if (c == 1) {
	var <map>PipelineParserOutput ruleOut1 = this.Literal(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["val"] = ruleOutCast1;if (true) {

var map castacval0 = data["val"];
var map actionCap0val = data["val"];dataStore["data"] = actionCap0val;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>PipelineParserOutput ruleOut2 = this.Reference(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Literal, Reference", currentChar);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["val"] = ruleOutCast2;if (true) {

var map castacval0 = data["val"];
var map actionCap0val = data["val"];dataStore["data"] = actionCap0val;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>PipelineParserOutput>function Literal_Boolean(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <int>array lit0 = [116, 114, 117, 101];
	if (currentCode == lit0[literalChar]) {
		literalChar++;
		if (literalChar == 4) {
			if (true) {

var string castacbool0 = data["bool"];
data["bool"] = true;}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		c = 1; charPos--; this.offset--;
	}
}else if (c == 1) {
	var <int>array lit1 = [102, 97, 108, 115, 101];
	if (currentCode == lit1[literalChar]) {
		literalChar++;
		if (literalChar == 5) {
			if (true) {

var string castacbool1 = data["bool"];
data["bool"] = false;}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}if (true) {

var map castacbool0 = data["bool"];
var map actionCap0bool = data["bool"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "boolean";
dataStore["data"]["value"] = actionCap0bool;
}
			c = 0 - 1;
			literalChar = 0;
}
			this.error.vested++;
	}else{
		this.giveError(1, "true, false", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>PipelineParserOutput>function Literal_String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>PipelineParserOutput ruleOut0 = this.String(input, charPos);
	
if (ruleOut0.hadError) {
		this.giveError(ruleOut0.error.code, "String(" + ruleOut0.error.expected + ")", ruleOut0.error.found);
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var string castacstr0 = data["str"];
var string actionCap0str = data["str"];dataStore["data"]["type"] = "literal";
dataStore["data"]["literalType"] = "string";
dataStore["data"]["value"] = actionCap0str;
}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>PipelineParserOutput>function Literal_Number(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	data["num"] = new string();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 46) {passed0 = true;}
	if (passed0 == false) {
		if (int.mid(currentCode, 48, 57)) {passed0 = true;}
	}
	if (passed0) {
		data["num"] += currentChar;
if (true) {

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];
	dataStore["data"]["type"] = "literal";
	dataStore["data"]["literalType"] = "number";
	
	var float num = string.parseFloat(actionCap0num);
	dataStore["data"]["value"] = num;
	
	if (num.isInteger()) {
		dataStore["data"]["integer"] = true;
	}else{
		dataStore["data"]["integer"] = false;
	}
}
c = 0;		this.error.vested++;

	}else{
		var string castnum0 = data["num"];
if (castnum0.length() >= 1) {
if (true) {

var string castacnum0 = data["num"];
var string actionCap0num = data["num"];
	dataStore["data"]["type"] = "literal";
	dataStore["data"]["literalType"] = "number";
	
	var float num = string.parseFloat(actionCap0num);
	dataStore["data"]["value"] = num;
	
	if (num.isInteger()) {
		dataStore["data"]["integer"] = true;
	}else{
		dataStore["data"]["integer"] = false;
	}
}c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, "0-9, .", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>PipelineParserOutput>function Literal(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <map>PipelineParserOutput ruleOut0 = this.Literal_Number(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast0;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		
	}
}else if (c == 1) {
	var <map>PipelineParserOutput ruleOut1 = this.Literal_Boolean(input, charPos);
	
if (ruleOut1.hadError) {
		c = 2; charPos--; this.offset--;
		
	}else{
		var map ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast1;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 2) {
	var <map>PipelineParserOutput ruleOut2 = this.Literal_String(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(1, "Literal_Number, Literal_Boolean, Literal_String", currentChar);
		
	}else{
		var map ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["l"] = ruleOutCast2;if (true) {

var map castacl0 = data["l"];
var map actionCap0l = data["l"];dataStore["data"] = actionCap0l;dataStore["data"]["start"] = startPos;dataStore["data"]["end"] = charPos;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<map>PipelineParserOutput>function Reference(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new map();
dataStore["temp"] = new map();
	var map data = dataStore["temp"];
	var int c = 0;
	


			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 36) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "$", currentChar);
	}
}else if (c == 1) {
	var <string>PipelineParserOutput ruleOut1 = this._(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(ruleOut1.error.code, "White space(optional)(" + ruleOut1.error.expected + ")", ruleOut1.error.found);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		
		c = 2;
		
	}
}else if (c == 2) {
	var <string>PipelineParserOutput ruleOut2 = this.Safe_Name(input, charPos);
	
if (ruleOut2.hadError) {
		this.giveError(ruleOut2.error.code, "Safe_Name(" + ruleOut2.error.expected + ")", ruleOut2.error.found);
		
	}else{
		var string ruleOutCast2 = ruleOut2.data["data"];
charPos = this.offset;
		data["name"] = ruleOutCast2;if (true) {

var map castacname0 = data["name"];
var string actionCap0name = data["name"];dataStore["data"]["type"] = "reference";
dataStore["data"]["name"] = actionCap0name;
dataStore["data"]["start"] = startPos;
dataStore["data"]["end"] = charPos;
}
		c = 0 - 1;
		
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <map>PipelineParserOutput parseOutput = new <map>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>PipelineParserOutput>function _(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var data = dataStore["temp"];
	var int c = 0;
	data = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		
c = 0;		this.error.vested++;

	}else{
		c = 0 - 1; charPos--; this.offset--;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>PipelineParserOutput parseOutput = new <string>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>PipelineParserOutput>function __(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var data = dataStore["temp"];
	var int c = 0;
	data["w"] = new <string>array();

			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var bool passed0 = false;
	if (currentCode == 32) {passed0 = true;}else if (currentCode == 9) {passed0 = true;}else if (currentCode == 13) {passed0 = true;}else if (currentCode == 10) {passed0 = true;}
	if (passed0 == false) {
		
	}
	if (passed0) {
		var <string>array castw0 = data["w"];
castw0.push(currentChar);

c = 0;		this.error.vested++;

	}else{
		var <string>array castw0 = data["w"];
if (castw0.length() >= 1) {
c = 0 - 1; charPos--; this.offset--;}else{
this.giveError(1, " , 	, \r, 
", currentChar);}

	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>PipelineParserOutput parseOutput = new <string>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>PipelineParserOutput>function String(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var data = dataStore["temp"];
	var int c = 0;
	
			var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	var <string>PipelineParserOutput ruleOut0 = this.String_Double(input, charPos);
	
if (ruleOut0.hadError) {
		c = 1; charPos--; this.offset--;
		
	}else{
		var string ruleOutCast0 = ruleOut0.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast0;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		c = 0 - 1;
		this.error.vested++;
	}
}else if (c == 1) {
	var <string>PipelineParserOutput ruleOut1 = this.String_Single(input, charPos);
	
if (ruleOut1.hadError) {
		this.giveError(1, "String_Double, String_Single", currentChar);
		
	}else{
		var string ruleOutCast1 = ruleOut1.data["data"];
charPos = this.offset;
		data["str"] = ruleOutCast1;if (true) {

var map castacstr0 = data["str"];
var map actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
		c = 0 - 1;
		this.error.vested++;
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>PipelineParserOutput parseOutput = new <string>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>PipelineParserOutput>function String_Double(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 34) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "\"") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 34) {
			if (true) {

var map castac0 = data;
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "\"", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>PipelineParserOutput parseOutput = new <string>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
bound public <<string>PipelineParserOutput>function String_Single(string input, int startPos) {var int oldVest = this.error.vested;
	var map dataStore = new map();
dataStore["data"] = new string();
dataStore["temp"] = new map();
	var data = dataStore["temp"];
	var int c = 0;
	
data["str"] = new string();


		
var bool escaped = false;
var map escapeCodes = new map();
escapeCodes["n"] = "\n";
escapeCodes["b"] = "\b";
escapeCodes["f"] = "\f";
escapeCodes["r"] = "\r";
escapeCodes["t"] = "\t";
escapeCodes["v"] = "\v";
escapeCodes["\\"] = "\\";
	var int literalChar = 0;
	for (var int charPos = startPos; charPos < input.length(); charPos++) {
		var string currentChar = input[charPos];
		var int currentCode = input.charCodeAt(charPos);
		if (currentCode == 10) {this.line++; this.column = 0;}
		if (c == 0) {
	if (currentCode == 39) {
			
			c = 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}else if (c == 1) {
	var string castnacstr1 = data["str"];
	
	

var bool doCapture = true;

if (currentChar == "\\") {if (escaped == false) {escaped = true; doCapture = false;}}

if (currentChar == "'") {
  if (escaped == false) {
    doCapture = false;
    c = 2; charPos--; this.offset--;
  }
  escaped = false;
}else if (escaped and doCapture == true) {
  doCapture = false;
  data["str"] += escapeCodes[currentChar];

  escaped = false;
}

if (doCapture) {
  data["str"] += currentChar;

}


}else if (c == 2) {
	if (currentCode == 39) {
			if (true) {

var map castac0 = data;
var string actionCap0str = data["str"];dataStore["data"] = actionCap0str;}
			c = 0 - 1;
			this.error.vested++;
	}else{
		this.giveError(1, "'", currentChar);
	}
}		this.offset++; this.column++;
		if (c == 0 - 1) {this.offset = charPos; break;}
		if (this.hadError) {break;}
	}
	var <string>PipelineParserOutput parseOutput = new <string>PipelineParserOutput(this.hadError, this.error.clone(), dataStore);
	parseOutput.error.vested = this.error.vested - oldVest; this.error.vested = oldVest;	this.hadError = false;
	return parseOutput;
}
}